#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°—É–ø–µ—Ä-–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–∞—à–±–æ—Ä–¥ —Å AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –û—Ä–∏–º—ç–∫—Å
"""

import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.figure_factory as ff
from datetime import datetime, timedelta
import numpy as np
from scipy import stats
from sklearn.ensemble import RandomForestRegressor, IsolationForest
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üöÄ AI-–î–∞—à–±–æ—Ä–¥ –û—Ä–∏–º—ç–∫—Å",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&display=swap');
    
    .main {
        background: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 50%, #16213e 100%);
        color: white;
        font-family: 'Inter', sans-serif;
    }
    
    .main-header {
        font-size: 4rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 3rem;
        background: linear-gradient(45deg, #00f5ff, #ff00ff, #ffff00);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 0 0 30px rgba(0, 245, 255, 0.5);
        animation: glow 2s ease-in-out infinite alternate;
    }
    
    @keyframes glow {
        from { filter: drop-shadow(0 0 20px #00f5ff); }
        to { filter: drop-shadow(0 0 30px #ff00ff); }
    }
    
    .ai-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 20px;
        margin: 1rem 0;
        box-shadow: 0 20px 40px rgba(0,0,0,0.3);
        border: 1px solid rgba(255,255,255,0.1);
        backdrop-filter: blur(10px);
    }
    
    .metric-card {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        color: white;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        transition: transform 0.3s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
    }
    
    .prediction-box {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 15px 35px rgba(0,0,0,0.2);
    }
    
    .stSelectbox > div > div {
        background-color: rgba(255,255,255,0.1);
        border-radius: 10px;
    }
    
    .stMultiSelect > div > div {
        background-color: rgba(255,255,255,0.1);
        border-radius: 10px;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data(ttl=300)
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('orimex_orders.db')
        
        query = '''
        SELECT 
            o.id,
            o.order_date,
            o.quantity,
            o.amount,
            c.head_contractor,
            c.buyer,
            c.manager,
            c.region,
            p.name as product_name,
            p.characteristics,
            p.category
        FROM orders o
        JOIN contractors c ON o.contractor_id = c.id
        JOIN products p ON o.product_id = p.id
        WHERE o.amount IS NOT NULL AND o.amount > 0
        '''
        
        df = pd.read_sql_query(query, conn)
        df['order_date'] = pd.to_datetime(df['order_date'])
        df['month'] = df['order_date'].dt.to_period('M')
        df['week'] = df['order_date'].dt.to_period('W')
        df['day_of_week'] = df['order_date'].dt.day_name()
        df['quarter'] = df['order_date'].dt.to_period('Q')
        df['hour'] = df['order_date'].dt.hour
        
        conn.close()
        return df
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def create_ai_anomaly_detection(df):
    """AI-–¥–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ –∑–∞–∫–∞–∑–∞—Ö"""
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
    features_df = df.groupby('order_date').agg({
        'amount': ['sum', 'mean', 'std', 'count'],
        'quantity': ['sum', 'mean']
    }).fillna(0)
    
    features_df.columns = ['amount_sum', 'amount_mean', 'amount_std', 'order_count', 'quantity_sum', 'quantity_mean']
    
    # Isolation Forest –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π
    isolation_forest = IsolationForest(contamination=0.1, random_state=42)
    anomalies = isolation_forest.fit_predict(features_df)
    
    features_df['anomaly'] = anomalies
    features_df['date'] = features_df.index
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π
    fig = go.Figure()
    
    # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–Ω–∏
    normal_days = features_df[features_df['anomaly'] == 1]
    fig.add_trace(go.Scatter(
        x=normal_days['date'],
        y=normal_days['amount_sum'],
        mode='markers',
        name='–û–±—ã—á–Ω—ã–µ –¥–Ω–∏',
        marker=dict(color='blue', size=8)
    ))
    
    # –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –¥–Ω–∏
    anomaly_days = features_df[features_df['anomaly'] == -1]
    fig.add_trace(go.Scatter(
        x=anomaly_days['date'],
        y=anomaly_days['amount_sum'],
        mode='markers',
        name='–ê–Ω–æ–º–∞–ª–∏–∏',
        marker=dict(color='red', size=12, symbol='diamond')
    ))
    
    fig.update_layout(
        title="ü§ñ AI-–¥–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂",
        height=500
    )
    
    return fig, len(anomaly_days)

def create_customer_segmentation(df):
    """AI-—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    
    # RFM –∞–Ω–∞–ª–∏–∑ (Recency, Frequency, Monetary)
    current_date = df['order_date'].max()
    
    rfm = df.groupby('buyer').agg({
        'order_date': lambda x: (current_date - x.max()).days,  # Recency
        'id': 'count',  # Frequency
        'amount': 'sum'  # Monetary
    }).reset_index()
    
    rfm.columns = ['buyer', 'recency', 'frequency', 'monetary']
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
    scaler = StandardScaler()
    rfm_scaled = scaler.fit_transform(rfm[['recency', 'frequency', 'monetary']])
    
    # K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
    kmeans = KMeans(n_clusters=4, random_state=42)
    rfm['cluster'] = kmeans.fit_predict(rfm_scaled)
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞–º
    cluster_names = {
        0: 'üåü VIP –∫–ª–∏–µ–Ω—Ç—ã',
        1: 'üíé –õ–æ—è–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', 
        2: '‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ —Ä–∏—Å–∫–∞',
        3: 'üÜï –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã'
    }
    
    rfm['cluster_name'] = rfm['cluster'].map(cluster_names)
    
    # 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    fig = go.Figure(data=go.Scatter3d(
        x=rfm['recency'],
        y=rfm['frequency'],
        z=rfm['monetary'],
        mode='markers',
        marker=dict(
            size=5,
            color=rfm['cluster'],
            colorscale='viridis',
            showscale=True,
            colorbar=dict(title="–°–µ–≥–º–µ–Ω—Ç—ã")
        ),
        text=rfm['buyer'],
        hovertemplate='<b>%{text}</b><br>' +
                     '–î–Ω–µ–π —Å –ø–æ–∫—É–ø–∫–∏: %{x}<br>' +
                     '–ß–∞—Å—Ç–æ—Ç–∞: %{y}<br>' +
                     '–°—É–º–º–∞: %{z:,.0f} ‚ÇΩ<extra></extra>'
    ))
    
    fig.update_layout(
        title="üéØ 3D —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (RFM –∞–Ω–∞–ª–∏–∑)",
        scene=dict(
            xaxis_title='Recency (–¥–Ω–∏)',
            yaxis_title='Frequency (–∑–∞–∫–∞–∑—ã)',
            zaxis_title='Monetary (—Ä—É–±.)'
        ),
        height=600
    )
    
    return fig, rfm

def create_ml_sales_prediction(df):
    """–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂"""
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    daily_data = df.groupby('order_date').agg({
        'amount': 'sum',
        'quantity': 'sum',
        'id': 'count'
    }).reset_index()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    daily_data['day_of_year'] = daily_data['order_date'].dt.dayofyear
    daily_data['month'] = daily_data['order_date'].dt.month
    daily_data['day_of_week'] = daily_data['order_date'].dt.dayofweek
    daily_data['is_weekend'] = daily_data['day_of_week'].isin([5, 6]).astype(int)
    
    # –õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    daily_data['amount_lag1'] = daily_data['amount'].shift(1)
    daily_data['amount_lag7'] = daily_data['amount'].shift(7)
    daily_data['amount_ma7'] = daily_data['amount'].rolling(window=7).mean()
    
    # –£–±–∏—Ä–∞–µ–º NaN
    ml_data = daily_data.dropna()
    
    # –ü—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª—å
    feature_columns = ['day_of_year', 'month', 'day_of_week', 'is_weekend', 
                      'amount_lag1', 'amount_lag7', 'amount_ma7', 'quantity', 'id']
    X = ml_data[feature_columns]
    y = ml_data['amount']
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train/test
    split_date = ml_data['order_date'].quantile(0.8)
    train_mask = ml_data['order_date'] <= split_date
    
    X_train, X_test = X[train_mask], X[~train_mask]
    y_train, y_test = y[train_mask], y[~train_mask]
    
    # –û–±—É—á–∞–µ–º Random Forest
    rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
    rf_model.fit(X_train, y_train)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    y_pred = rf_model.predict(X_test)
    
    # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    feature_importance = pd.DataFrame({
        'feature': feature_columns,
        'importance': rf_model.feature_importances_
    }).sort_values('importance', ascending=False)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    fig_pred = go.Figure()
    
    test_dates = ml_data[~train_mask]['order_date']
    
    fig_pred.add_trace(go.Scatter(
        x=test_dates,
        y=y_test,
        mode='lines+markers',
        name='–†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏',
        line=dict(color='blue')
    ))
    
    fig_pred.add_trace(go.Scatter(
        x=test_dates,
        y=y_pred,
        mode='lines+markers',
        name='ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è',
        line=dict(color='red', dash='dash')
    ))
    
    fig_pred.update_layout(
        title="ü§ñ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂",
        height=500
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    fig_importance = px.bar(
        feature_importance,
        x='importance',
        y='feature',
        orientation='h',
        title="üéØ –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂"
    )
    fig_importance.update_layout(height=400)
    
    # –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
    mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100
    
    return fig_pred, fig_importance, mape

def create_network_analysis(df):
    """–°–µ—Ç–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π –∫–ª–∏–µ–Ω—Ç-—Ç–æ–≤–∞—Ä"""
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Å–≤—è–∑–µ–π
    product_client_matrix = df.pivot_table(
        index='buyer', 
        columns='product_name', 
        values='amount', 
        aggfunc='sum', 
        fill_value=0
    )
    
    # –¢–æ–ø —Å–≤—è–∑–∏
    top_combinations = df.groupby(['buyer', 'product_name'])['amount'].sum().reset_index()
    top_combinations = top_combinations.sort_values('amount', ascending=False).head(20)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–µ–≤–æ–π –≥—Ä–∞—Ñ
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –∏ —Å–≤—è–∑–∏
    for idx, row in top_combinations.iterrows():
        # –†–∞–∑–º–µ—Ä —É–∑–ª–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω —Å—É–º–º–µ
        size = np.sqrt(row['amount'] / 10000)
        
        fig.add_trace(go.Scatter(
            x=[idx, idx + 0.5],
            y=[0, 1],
            mode='lines+markers+text',
            line=dict(width=size/2, color='rgba(100,100,100,0.5)'),
            marker=dict(size=[size, size/2], color=['blue', 'red']),
            text=[row['buyer'][:20], row['product_name'][:15]],
            textposition='middle center',
            name=f"{row['amount']:,.0f} ‚ÇΩ",
            showlegend=False
        ))
    
    fig.update_layout(
        title="üï∏Ô∏è –°–µ—Ç–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑: —Å–≤—è–∑–∏ –∫–ª–∏–µ–Ω—Ç-—Ç–æ–≤–∞—Ä",
        xaxis_title="–°–≤—è–∑–∏ (—Ç–æ–ø-20 –ø–æ —Å—É–º–º–µ)",
        yaxis_title="–ö–ª–∏–µ–Ω—Ç—ã ‚Üí –¢–æ–≤–∞—Ä—ã",
        height=600,
        showlegend=False
    )
    
    return fig

def create_sentiment_analysis(df):
    """–ê–Ω–∞–ª–∏–∑ '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è' –ø—Ä–æ–¥–∞–∂"""
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
    daily_sales = df.groupby('order_date')['amount'].sum().reset_index()
    daily_sales['ma_7'] = daily_sales['amount'].rolling(window=7).mean()
    daily_sales['ma_30'] = daily_sales['amount'].rolling(window=30).mean()
    
    # –ò–Ω–¥–µ–∫—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    daily_sales['sentiment'] = (
        (daily_sales['amount'] - daily_sales['ma_30']) / daily_sales['ma_30'] * 100
    )
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    daily_sales['sentiment_category'] = pd.cut(
        daily_sales['sentiment'], 
        bins=[-np.inf, -20, -5, 5, 20, np.inf],
        labels=['üò± –û—á–µ–Ω—å –ø–ª–æ—Ö–æ', 'üòü –ü–ª–æ—Ö–æ', 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ', 'üòä –•–æ—Ä–æ—à–æ', 'üöÄ –û—Ç–ª–∏—á–Ω–æ']
    )
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    fig = go.Figure()
    
    colors = {'üò± –û—á–µ–Ω—å –ø–ª–æ—Ö–æ': 'red', 'üòü –ü–ª–æ—Ö–æ': 'orange', 
              'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ': 'gray', 'üòä –•–æ—Ä–æ—à–æ': 'lightgreen', 'üöÄ –û—Ç–ª–∏—á–Ω–æ': 'green'}
    
    for category in daily_sales['sentiment_category'].cat.categories:
        data = daily_sales[daily_sales['sentiment_category'] == category]
        if not data.empty:
            fig.add_trace(go.Scatter(
                x=data['order_date'],
                y=data['sentiment'],
                mode='markers',
                name=category,
                marker=dict(color=colors[category], size=8)
            ))
    
    fig.add_hline(y=0, line_dash="dash", line_color="white")
    fig.update_layout(
        title="üòä –ò–Ω–¥–µ–∫—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ç—Ä–µ–Ω–¥–∞)",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–ò–Ω–¥–µ–∫—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (%)",
        height=500
    )
    
    return fig, daily_sales['sentiment_category'].value_counts()

def create_competitive_analysis(df):
    """–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤"""
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_performance = df.groupby(['category', 'product_name']).agg({
        'amount': 'sum',
        'quantity': 'sum',
        'id': 'count'
    }).reset_index()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª—é —Ä—ã–Ω–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_totals = category_performance.groupby('category')['amount'].transform('sum')
    category_performance['market_share'] = category_performance['amount'] / category_totals * 100
    
    # –°–æ–∑–¥–∞–µ–º bubble chart
    fig = px.scatter(
        category_performance[category_performance['market_share'] > 1],  # –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã
        x='quantity',
        y='amount',
        size='market_share',
        color='category',
        hover_name='product_name',
        title="ü•ä –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ (—Ä–∞–∑–º–µ—Ä = –¥–æ–ª—è —Ä—ã–Ω–∫–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)",
        labels={'quantity': '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ (—à—Ç.)', 'amount': '–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)'}
    )
    
    fig.update_layout(height=600)
    
    return fig, category_performance

def create_profitability_analysis(df):
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)"""
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    margin_rates = {
        '–°—Ç–æ–ª—ã': 0.35,
        '–°—Ç—É–ª—å—è': 0.42,
        '–ö—Ä–µ—Å–ª–∞': 0.38,
        '–î–∏–≤–∞–Ω—ã': 0.30,
        '–®–∫–∞—Ñ—ã': 0.25
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∂—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    df['margin_rate'] = df['category'].map(margin_rates).fillna(0.35)
    df['profit'] = df['amount'] * df['margin_rate']
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    profitability = df.groupby('region').agg({
        'amount': 'sum',
        'profit': 'sum',
        'id': 'count'
    }).reset_index()
    
    profitability['profit_margin'] = profitability['profit'] / profitability['amount'] * 100
    profitability['profit_per_order'] = profitability['profit'] / profitability['id']
    
    # Bubble chart –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
    fig = px.scatter(
        profitability.head(20),
        x='amount',
        y='profit',
        size='id',
        color='profit_margin',
        hover_name='region',
        title="üí∞ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º",
        labels={'amount': '–í—ã—Ä—É—á–∫–∞', 'profit': '–ü—Ä–∏–±—ã–ª—å'},
        color_continuous_scale='viridis'
    )
    
    fig.update_layout(height=600)
    
    return fig, profitability

def create_advanced_forecasting(df):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é"""
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    daily_sales = df.groupby('order_date')['amount'].sum().reset_index()
    daily_sales = daily_sales.sort_values('order_date')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    daily_sales['trend'] = np.arange(len(daily_sales))
    daily_sales['month'] = daily_sales['order_date'].dt.month
    daily_sales['day_of_week'] = daily_sales['order_date'].dt.dayofweek
    
    # –°–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    daily_sales['month_sin'] = np.sin(2 * np.pi * daily_sales['month'] / 12)
    daily_sales['month_cos'] = np.cos(2 * np.pi * daily_sales['month'] / 12)
    daily_sales['dow_sin'] = np.sin(2 * np.pi * daily_sales['day_of_week'] / 7)
    daily_sales['dow_cos'] = np.cos(2 * np.pi * daily_sales['day_of_week'] / 7)
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    features = ['trend', 'month_sin', 'month_cos', 'dow_sin', 'dow_cos']
    X = daily_sales[features].fillna(0)
    y = daily_sales['amount']
    
    model = RandomForestRegressor(n_estimators=200, random_state=42)
    model.fit(X, y)
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 60 –¥–Ω–µ–π
    future_dates = pd.date_range(
        start=daily_sales['order_date'].max() + timedelta(days=1),
        periods=60,
        freq='D'
    )
    
    future_df = pd.DataFrame({'order_date': future_dates})
    future_df['trend'] = np.arange(len(daily_sales), len(daily_sales) + 60)
    future_df['month'] = future_df['order_date'].dt.month
    future_df['day_of_week'] = future_df['order_date'].dt.dayofweek
    future_df['month_sin'] = np.sin(2 * np.pi * future_df['month'] / 12)
    future_df['month_cos'] = np.cos(2 * np.pi * future_df['month'] / 12)
    future_df['dow_sin'] = np.sin(2 * np.pi * future_df['day_of_week'] / 7)
    future_df['dow_cos'] = np.cos(2 * np.pi * future_df['day_of_week'] / 7)
    
    future_predictions = model.predict(future_df[features])
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    fig = go.Figure()
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    fig.add_trace(go.Scatter(
        x=daily_sales['order_date'],
        y=daily_sales['amount'],
        mode='lines',
        name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
        line=dict(color='blue')
    ))
    
    # –ü—Ä–æ–≥–Ω–æ–∑
    fig.add_trace(go.Scatter(
        x=future_dates,
        y=future_predictions,
        mode='lines',
        name='ML –ø—Ä–æ–≥–Ω–æ–∑ (60 –¥–Ω–µ–π)',
        line=dict(color='red', dash='dash')
    ))
    
    # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    std_pred = np.std(y - model.predict(X))
    upper_bound = future_predictions + 1.96 * std_pred
    lower_bound = future_predictions - 1.96 * std_pred
    
    fig.add_trace(go.Scatter(
        x=future_dates,
        y=upper_bound,
        fill=None,
        mode='lines',
        line_color='rgba(0,0,0,0)',
        showlegend=False
    ))
    
    fig.add_trace(go.Scatter(
        x=future_dates,
        y=lower_bound,
        fill='tonexty',
        mode='lines',
        line_color='rgba(0,0,0,0)',
        name='–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª',
        fillcolor='rgba(255,0,0,0.2)'
    ))
    
    fig.update_layout(
        title="üîÆ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂",
        height=600
    )
    
    return fig, future_predictions.sum(), feature_importance

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">üöÄ AI-–î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–æ–≤ –û—Ä–∏–º—ç–∫—Å</h1>', unsafe_allow_html=True)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    with st.spinner('ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–µ–π...'):
        df = load_data()
    
    if df.empty:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞.")
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_revenue = df['amount'].sum()
    total_orders = len(df)
    avg_order = df['amount'].mean()
    unique_customers = df['buyer'].nunique()
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div class="metric-card">
            <h2>üí∞ {total_revenue:,.0f} ‚ÇΩ</h2>
            <p>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="metric-card">
            <h2>üõí {total_orders:,}</h2>
            <p>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="metric-card">
            <h2>üìä {avg_order:,.0f} ‚ÇΩ</h2>
            <p>–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown(f"""
        <div class="metric-card">
            <h2>üë• {unique_customers:,}</h2>
            <p>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</p>
        </div>
        """, unsafe_allow_html=True)
    
    # AI-–∞–Ω–∞–ª–∏–∑
    st.markdown("## ü§ñ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "ü§ñ –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π",
        "üéØ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤", 
        "üîÆ ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "üï∏Ô∏è –°–µ—Ç–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑",
        "üòä –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
        "üí∞ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏"
    ])
    
    with tab1:
        st.subheader("ü§ñ AI-–¥–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π")
        fig_anomaly, anomaly_count = create_ai_anomaly_detection(df)
        st.plotly_chart(fig_anomaly, width='stretch')
        
        if anomaly_count > 0:
            st.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {anomaly_count} –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö")
        else:
            st.success("‚úÖ –ê–Ω–æ–º–∞–ª–∏–π –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    with tab2:
        st.subheader("üéØ AI-—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
        fig_segments, rfm_data = create_customer_segmentation(df)
        st.plotly_chart(fig_segments, width='stretch')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
        segment_stats = rfm_data['cluster_name'].value_counts()
        
        col1, col2 = st.columns(2)
        with col1:
            st.write("**üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º:**")
            for segment, count in segment_stats.items():
                st.write(f"‚Ä¢ {segment}: {count} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({count/len(rfm_data)*100:.1f}%)")
        
        with col2:
            # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
            segment_means = rfm_data.groupby('cluster_name')[['recency', 'frequency', 'monetary']].mean()
            st.write("**üìà –°—Ä–µ–¥–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:**")
            st.dataframe(segment_means.round(0))
    
    with tab3:
        st.subheader("üîÆ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
        fig_ml, fig_importance, accuracy = create_ml_sales_prediction(df)
        
        col1, col2 = st.columns(2)
        with col1:
            st.plotly_chart(fig_ml, width='stretch')
        with col2:
            st.plotly_chart(fig_importance, width='stretch')
        
        st.markdown(f"""
        <div class="prediction-box">
            <h3>üéØ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {100-accuracy:.1f}%</h3>
            <p>–ú–æ–¥–µ–ª—å Random Forest –æ–±—É—á–µ–Ω–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å, —Ç—Ä–µ–Ω–¥—ã –∏ –ª–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏</p>
        </div>
        """, unsafe_allow_html=True)
    
    with tab4:
        st.subheader("üï∏Ô∏è –°–µ—Ç–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π")
        fig_network = create_network_analysis(df)
        st.plotly_chart(fig_network, width='stretch')
        
        st.info("üí° –ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –ø–æ –æ–±—ä–µ–º—É –ø—Ä–æ–¥–∞–∂")
    
    with tab5:
        st.subheader("üòä –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂")
        fig_sentiment, sentiment_stats = create_sentiment_analysis(df)
        st.plotly_chart(fig_sentiment, width='stretch')
        
        col1, col2 = st.columns(2)
        with col1:
            st.write("**üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:**")
            for mood, count in sentiment_stats.items():
                st.write(f"‚Ä¢ {mood}: {count} –¥–Ω–µ–π")
        
        with col2:
            # –¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            latest_sentiment = sentiment_stats.index[0] if len(sentiment_stats) > 0 else "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
            st.markdown(f"""
            <div class="prediction-box">
                <h3>–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞:</h3>
                <h2>{latest_sentiment}</h2>
            </div>
            """, unsafe_allow_html=True)
    
    with tab6:
        st.subheader("üí∞ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏")
        fig_profit, profit_data = create_profitability_analysis(df)
        st.plotly_chart(fig_profit, width='stretch')
        
        # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        fig_competitive, competitive_data = create_competitive_analysis(df)
        st.plotly_chart(fig_competitive, width='stretch')
        
        # –¢–æ–ø –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
        top_profitable = profit_data.sort_values('profit', ascending=False).head(10)
        st.subheader("üèÜ –¢–æ–ø-10 –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤")
        st.dataframe(
            top_profitable[['region', 'profit', 'profit_margin', 'profit_per_order']].style.format({
                'profit': '{:,.0f} ‚ÇΩ',
                'profit_margin': '{:.1f}%',
                'profit_per_order': '{:,.0f} ‚ÇΩ'
            }),
            width='stretch'
        )

if __name__ == "__main__":
    main()
