#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üåü –ú–ï–ì–ê-–¥–∞—à–±–æ—Ä–¥ –û—Ä–∏–º—ç–∫—Å - –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –º–∞–∫—Å–∏–º—É–º —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫—Ä–∞—Å–æ—Ç—ã
"""

import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.figure_factory as ff
from datetime import datetime, timedelta
import numpy as np
from scipy import stats
import json
import base64
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üåü –ú–ï–ì–ê-–¥–∞—à–±–æ—Ä–¥ –û—Ä–∏–º—ç–∫—Å",
    page_icon="üåü",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Exo+2:wght@300;400;600;700&display=swap');
    
    .stApp {
        background: 
            radial-gradient(circle at 20% 80%, #120458 0%, transparent 50%),
            radial-gradient(circle at 80% 20%, #ff006e 0%, transparent 50%),
            radial-gradient(circle at 40% 40%, #8338ec 0%, transparent 50%),
            linear-gradient(135deg, #000000 0%, #1a0033 25%, #330066 50%, #000000 100%);
        background-attachment: fixed;
        color: white;
        font-family: 'Exo 2', sans-serif;
    }
    
    .cosmic-header {
        font-family: 'Orbitron', monospace;
        font-size: 5rem;
        font-weight: 900;
        text-align: center;
        margin-bottom: 3rem;
        background: linear-gradient(45deg, #ff006e, #8338ec, #3a86ff, #06ffa5);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 
            0 0 10px #ff006e,
            0 0 20px #8338ec,
            0 0 30px #3a86ff;
        animation: cosmic-glow 3s ease-in-out infinite alternate;
        position: relative;
    }
    
    @keyframes cosmic-glow {
        from { 
            filter: drop-shadow(0 0 20px #ff006e) drop-shadow(0 0 40px #8338ec);
            transform: scale(1);
        }
        to { 
            filter: drop-shadow(0 0 30px #8338ec) drop-shadow(0 0 60px #3a86ff);
            transform: scale(1.02);
        }
    }
    
    .hologram-card {
        background: linear-gradient(135deg, 
            rgba(255, 0, 110, 0.1) 0%, 
            rgba(131, 56, 236, 0.1) 50%, 
            rgba(58, 134, 255, 0.1) 100%);
        backdrop-filter: blur(20px);
        border-radius: 25px;
        padding: 2rem;
        margin: 1rem 0;
        border: 2px solid rgba(255, 255, 255, 0.1);
        box-shadow: 
            0 0 30px rgba(255, 0, 110, 0.3),
            0 0 60px rgba(131, 56, 236, 0.2),
            inset 0 0 30px rgba(255, 255, 255, 0.05);
        position: relative;
        overflow: hidden;
    }
    
    .hologram-card::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
        animation: hologram-sweep 4s linear infinite;
    }
    
    @keyframes hologram-sweep {
        0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
        100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
    }
    
    .quantum-metric {
        background: linear-gradient(135deg, #ff006e 0%, #8338ec 50%, #3a86ff 100%);
        padding: 2rem;
        border-radius: 20px;
        text-align: center;
        color: white;
        box-shadow: 
            0 0 40px rgba(255, 0, 110, 0.6),
            0 0 80px rgba(131, 56, 236, 0.4),
            0 20px 40px rgba(0, 0, 0, 0.3);
        animation: quantum-pulse 3s ease-in-out infinite;
        border: 3px solid rgba(255, 255, 255, 0.2);
        position: relative;
        overflow: hidden;
    }
    
    @keyframes quantum-pulse {
        0%, 100% { 
            box-shadow: 
                0 0 40px rgba(255, 0, 110, 0.6),
                0 0 80px rgba(131, 56, 236, 0.4);
        }
        50% { 
            box-shadow: 
                0 0 60px rgba(255, 0, 110, 0.8),
                0 0 120px rgba(131, 56, 236, 0.6),
                0 0 160px rgba(58, 134, 255, 0.4);
        }
    }
    
    .ai-insight {
        background: linear-gradient(135deg, #06ffa5 0%, #3a86ff 100%);
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        color: white;
        box-shadow: 0 10px 30px rgba(6, 255, 165, 0.3);
        border-left: 5px solid #ffffff;
        animation: insight-glow 2s ease-in-out infinite alternate;
    }
    
    @keyframes insight-glow {
        from { box-shadow: 0 10px 30px rgba(6, 255, 165, 0.3); }
        to { box-shadow: 0 15px 40px rgba(6, 255, 165, 0.5); }
    }
    
    .matrix-bg {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: -1;
        opacity: 0.05;
    }
    
    .control-panel {
        background: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(15px);
        border-radius: 20px;
        padding: 1.5rem;
        margin: 1rem 0;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .neon-button {
        background: linear-gradient(45deg, #ff006e, #8338ec);
        color: white;
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: 25px;
        font-weight: bold;
        cursor: pointer;
        box-shadow: 0 0 20px rgba(255, 0, 110, 0.5);
        transition: all 0.3s ease;
    }
    
    .neon-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 25px rgba(255, 0, 110, 0.7);
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data(ttl=300)
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('orimex_orders.db')
        
        query = '''
        SELECT 
            o.id, o.order_date, o.quantity, o.amount,
            c.head_contractor, c.buyer, c.manager, c.region,
            p.name as product_name, p.characteristics, p.category
        FROM orders o
        JOIN contractors c ON o.contractor_id = c.id
        JOIN products p ON o.product_id = p.id
        WHERE o.amount IS NOT NULL AND o.amount > 0
        '''
        
        df = pd.read_sql_query(query, conn)
        df['order_date'] = pd.to_datetime(df['order_date'])
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        df['month'] = df['order_date'].dt.to_period('M')
        df['week'] = df['order_date'].dt.to_period('W')
        df['day_of_week'] = df['order_date'].dt.day_name()
        df['hour'] = df['order_date'].dt.hour
        df['is_weekend'] = df['order_date'].dt.dayofweek.isin([5, 6])
        df['price_per_unit'] = df['amount'] / df['quantity']
        
        # –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
        df['order_segment'] = pd.qcut(
            df['amount'], 
            q=5, 
            labels=['ü•â –ë—Ä–æ–Ω–∑–∞', 'ü•à –°–µ—Ä–µ–±—Ä–æ', 'ü•á –ó–æ–ª–æ—Ç–æ', 'üíé –ü–ª–∞—Ç–∏–Ω–∞', 'üëë –≠–ª–∏—Ç']
        )
        
        conn.close()
        return df
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def create_cosmic_visualizations(df):
    """–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    # 3D –≥–∞–ª–∞–∫—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
    monthly_data = df.groupby([
        df['order_date'].dt.to_period('M'),
        'category',
        'region'
    ])['amount'].sum().reset_index()
    
    monthly_data['month_num'] = monthly_data['order_date'].apply(lambda x: x.month)
    monthly_data['category_num'] = pd.Categorical(monthly_data['category']).codes
    monthly_data['region_num'] = pd.Categorical(monthly_data['region']).codes
    
    fig_3d = go.Figure(data=go.Scatter3d(
        x=monthly_data['month_num'],
        y=monthly_data['category_num'],
        z=monthly_data['region_num'],
        mode='markers',
        marker=dict(
            size=np.sqrt(monthly_data['amount'] / 10000),
            color=monthly_data['amount'],
            colorscale='plasma',
            showscale=True,
            colorbar=dict(title="–í—ã—Ä—É—á–∫–∞"),
            opacity=0.8
        ),
        text=monthly_data['amount'].apply(lambda x: f"{x:,.0f} ‚ÇΩ"),
        hovertemplate='<b>%{text}</b><br>' +
                     '–ú–µ—Å—è—Ü: %{x}<br>' +
                     '–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %{y}<br>' +
                     '–†–µ–≥–∏–æ–Ω: %{z}<extra></extra>'
    ))
    
    fig_3d.update_layout(
        title="üåå 3D –ì–∞–ª–∞–∫—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ (–º–µ—Å—è—Ü √ó –∫–∞—Ç–µ–≥–æ—Ä–∏—è √ó —Ä–µ–≥–∏–æ–Ω)",
        scene=dict(
            xaxis_title='–ú–µ—Å—è—Ü',
            yaxis_title='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            zaxis_title='–†–µ–≥–∏–æ–Ω',
            bgcolor='rgba(0,0,0,0.9)'
        ),
        height=700
    )
    
    return fig_3d

def create_ai_recommendations(df):
    """AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞"""
    
    recommendations = []
    
    # –ê–Ω–∞–ª–∏–∑ –ø–∞–¥–∞—é—â–∏—Ö –ø—Ä–æ–¥–∞–∂
    monthly_sales = df.groupby(df['order_date'].dt.to_period('M'))['amount'].sum()
    if len(monthly_sales) >= 3:
        recent_trend = monthly_sales.tail(3).pct_change().mean() * 100
        if recent_trend < -10:
            recommendations.append({
                'type': 'warning',
                'title': '‚ö†Ô∏è –¢—Ä–µ–≤–æ–∂–Ω—ã–π —Ç—Ä–µ–Ω–¥',
                'text': f'–ü—Ä–æ–¥–∞–∂–∏ —Å–Ω–∏–∂–∞—é—Ç—Å—è –Ω–∞ {abs(recent_trend):.1f}% –≤ –º–µ—Å—è—Ü. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.',
                'action': '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω —Å–Ω–∏–∂–µ–Ω–∏—è'
            })
        elif recent_trend > 10:
            recommendations.append({
                'type': 'success',
                'title': 'üöÄ –û—Ç–ª–∏—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞',
                'text': f'–ü—Ä–æ–¥–∞–∂–∏ —Ä–∞—Å—Ç—É—Ç –Ω–∞ {recent_trend:.1f}% –≤ –º–µ—Å—è—Ü. –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏.',
                'action': '–£–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Ä–æ—Å—Ç'
            })
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
    region_potential = df.groupby('region').agg({
        'amount': 'sum',
        'buyer': 'nunique',
        'manager': 'nunique'
    })
    
    region_potential['revenue_per_manager'] = region_potential['amount'] / region_potential['manager']
    underperforming_regions = region_potential[
        region_potential['revenue_per_manager'] < region_potential['revenue_per_manager'].median()
    ].head(3)
    
    if len(underperforming_regions) > 0:
        regions_list = ', '.join(underperforming_regions.index[:3])
        recommendations.append({
            'type': 'info',
            'title': 'üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞',
            'text': f'–†–µ–≥–∏–æ–Ω—ã —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º: {regions_list}',
            'action': '–£—Å–∏–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –≤ —ç—Ç–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö'
        })
    
    # –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
    monthly_avg = df.groupby(df['order_date'].dt.month)['amount'].mean()
    seasonal_variation = monthly_avg.std() / monthly_avg.mean() * 100
    
    if seasonal_variation > 30:
        peak_months = monthly_avg.nlargest(2).index
        recommendations.append({
            'type': 'info', 
            'title': 'üìÖ –°–µ–∑–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
            'text': f'–í—ã—Å–æ–∫–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å ({seasonal_variation:.0f}%). –ü–∏–∫–∏ –≤ –º–µ—Å—è—Ü–∞—Ö: {", ".join(map(str, peak_months))}',
            'action': '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–µ–∑–æ–Ω–Ω—ã–º –ø–∏–∫–∞–º –∑–∞—Ä–∞–Ω–µ–µ'
        })
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
    client_concentration = df.groupby('buyer')['amount'].sum().sort_values(ascending=False)
    top_10_share = client_concentration.head(10).sum() / client_concentration.sum() * 100
    
    if top_10_share > 50:
        recommendations.append({
            'type': 'warning',
            'title': '‚ö†Ô∏è –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤',
            'text': f'–¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–∞—é—Ç {top_10_share:.1f}% –≤—ã—Ä—É—á–∫–∏',
            'action': '–î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –±–∞–∑—É'
        })
    
    return recommendations

def create_interactive_simulator(df):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä –±–∏–∑–Ω–µ—Å–∞"""
    
    st.subheader("üéÆ –ë–∏–∑–Ω–µ—Å-—Å–∏–º—É–ª—è—Ç–æ—Ä")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.markdown("### üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
        price_change = st.slider("üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (%)", -50, 100, 0)
        marketing_budget = st.slider("üì¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –±—é–¥–∂–µ—Ç (% –æ—Ç –≤—ã—Ä—É—á–∫–∏)", 0, 20, 5)
        staff_change = st.slider("üë• –ò–∑–º–µ–Ω–µ–Ω–∏–µ —à—Ç–∞—Ç–∞ (%)", -30, 50, 0)
        
        # –°–µ–∑–æ–Ω–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        season_boost = st.selectbox(
            "üåü –°–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä",
            ["–û–±—ã—á–Ω—ã–π —Å–µ–∑–æ–Ω", "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ (+30%)", "–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞ (+50%)", "–ö—Ä–∏–∑–∏—Å (-20%)"]
        )
        
        season_multipliers = {
            "–û–±—ã—á–Ω—ã–π —Å–µ–∑–æ–Ω": 1.0,
            "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ (+30%)": 1.3,
            "–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞ (+50%)": 1.5,
            "–ö—Ä–∏–∑–∏—Å (-20%)": 0.8
        }
        
        season_factor = season_multipliers[season_boost]
        
        # –°–∏–º—É–ª—è—Ü–∏—è
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é"):
            # –ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            base_revenue = df['amount'].sum()
            base_orders = len(df)
            base_customers = df['buyer'].nunique()
            
            # –≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞
            price_elasticity = -0.8  # –ü—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω –Ω–∞ 10% —Å–ø—Ä–æ—Å –ø–∞–¥–∞–µ—Ç –Ω–∞ 8%
            marketing_effectiveness = 0.3  # 1% –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ = 0.3% —Ä–æ—Å—Ç–∞ –ø—Ä–æ–¥–∞–∂
            
            # –†–∞—Å—á–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            demand_change = (
                1 + (price_change * price_elasticity / 100) +
                (marketing_budget * marketing_effectiveness / 100) +
                (staff_change / 100 * 0.5)  # –í–ª–∏—è–Ω–∏–µ —à—Ç–∞—Ç–∞
            ) * season_factor
            
            new_price_multiplier = 1 + price_change / 100
            new_revenue = base_revenue * new_price_multiplier * demand_change
            new_orders = base_orders * demand_change
            new_customers = base_customers * (1 + marketing_budget / 100 * 0.2)
            
            # –ó–∞—Ç—Ä–∞—Ç—ã
            marketing_cost = base_revenue * marketing_budget / 100
            staff_cost = base_revenue * 0.15 * (1 + staff_change / 100)  # 15% –æ—Ç –≤—ã—Ä—É—á–∫–∏ –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
            
            net_profit = new_revenue * 0.25 - marketing_cost - (staff_cost - base_revenue * 0.15)
            
            with col2:
                st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏")
                
                # –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                revenue_change = (new_revenue - base_revenue) / base_revenue * 100
                orders_change = (new_orders - base_orders) / base_orders * 100
                
                metric_col1, metric_col2, metric_col3 = st.columns(3)
                
                with metric_col1:
                    st.metric("üí∞ –í—ã—Ä—É—á–∫–∞", f"{new_revenue:,.0f} ‚ÇΩ", f"{revenue_change:+.1f}%")
                
                with metric_col2:
                    st.metric("üõí –ó–∞–∫–∞–∑—ã", f"{new_orders:,.0f}", f"{orders_change:+.1f}%")
                
                with metric_col3:
                    st.metric("üíµ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å", f"{net_profit:,.0f} ‚ÇΩ")
                
                # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                fig_simulation = go.Figure()
                
                categories = ['–í—ã—Ä—É—á–∫–∞', '–ó–∞–∫–∞–∑—ã', '–ö–ª–∏–µ–Ω—Ç—ã']
                current_values = [base_revenue, base_orders, base_customers]
                new_values = [new_revenue, new_orders, new_customers]
                
                fig_simulation.add_trace(go.Bar(
                    x=categories,
                    y=current_values,
                    name='–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
                    marker_color='blue',
                    opacity=0.7
                ))
                
                fig_simulation.add_trace(go.Bar(
                    x=categories,
                    y=new_values,
                    name='–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π',
                    marker_color='red',
                    opacity=0.7
                ))
                
                fig_simulation.update_layout(
                    title="üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤",
                    barmode='group',
                    height=400
                )
                
                st.plotly_chart(fig_simulation, use_container_width=True)

def create_real_time_dashboard(df):
    """–î–∞—à–±–æ—Ä–¥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    
    # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    latest_date = df['order_date'].max()
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–∏–æ–¥—ã
    last_hour = df[df['order_date'] >= (latest_date - timedelta(hours=1))]
    last_day = df[df['order_date'] >= (latest_date - timedelta(days=1))]
    last_week = df[df['order_date'] >= (latest_date - timedelta(days=7))]
    
    # –†–µ–∞–ª-—Ç–∞–π–º –º–µ—Ç—Ä–∏–∫–∏
    st.markdown("## ‚ö° –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è")
    
    rt_col1, rt_col2, rt_col3, rt_col4 = st.columns(4)
    
    with rt_col1:
        st.markdown(f"""
        <div class="quantum-metric">
            <h3>üí´ –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å</h3>
            <h2>{len(last_hour)} –∑–∞–∫–∞–∑–æ–≤</h2>
            <p>{last_hour['amount'].sum():,.0f} ‚ÇΩ</p>
        </div>
        """, unsafe_allow_html=True)
    
    with rt_col2:
        st.markdown(f"""
        <div class="quantum-metric">
            <h3>üåü –°–µ–≥–æ–¥–Ω—è</h3>
            <h2>{len(last_day)} –∑–∞–∫–∞–∑–æ–≤</h2>
            <p>{last_day['amount'].sum():,.0f} ‚ÇΩ</p>
        </div>
        """, unsafe_allow_html=True)
    
    with rt_col3:
        st.markdown(f"""
        <div class="quantum-metric">
            <h3>‚≠ê –ó–∞ –Ω–µ–¥–µ–ª—é</h3>
            <h2>{len(last_week)} –∑–∞–∫–∞–∑–æ–≤</h2>
            <p>{last_week['amount'].sum():,.0f} ‚ÇΩ</p>
        </div>
        """, unsafe_allow_html=True)
    
    with rt_col4:
        # –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂
        if len(last_day) > 0:
            sales_velocity = last_day['amount'].sum() / 24  # ‚ÇΩ –≤ —á–∞—Å
        else:
            sales_velocity = 0
        
        st.markdown(f"""
        <div class="quantum-metric">
            <h3>‚ö° –°–∫–æ—Ä–æ—Å—Ç—å</h3>
            <h2>{sales_velocity:,.0f} ‚ÇΩ/—á</h2>
            <p>–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂</p>
        </div>
        """, unsafe_allow_html=True)
    
    # –ñ–∏–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ (–∏–º–∏—Ç–∞—Ü–∏—è)
    hourly_data = df.groupby(df['order_date'].dt.floor('H'))['amount'].sum().tail(24)
    
    fig_live = go.Figure()
    fig_live.add_trace(go.Scatter(
        x=hourly_data.index,
        y=hourly_data.values,
        mode='lines+markers',
        name='–ü—Ä–æ–¥–∞–∂–∏ –ø–æ —á–∞—Å–∞–º',
        line=dict(color='#ff006e', width=3),
        marker=dict(size=8, color='#8338ec')
    ))
    
    fig_live.update_layout(
        title="üì° –ñ–∏–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)",
        xaxis_title="–í—Ä–µ–º—è",
        yaxis_title="–í—ã—Ä—É—á–∫–∞ ‚ÇΩ",
        height=400,
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0.1)'
    )
    
    return fig_live

def create_executive_summary(df):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞"""
    
    # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
    total_revenue = df['amount'].sum()
    total_orders = len(df)
    unique_customers = df['buyer'].nunique()
    avg_order_value = df['amount'].mean()
    
    # –†–æ—Å—Ç –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
    df_current = df[df['order_date'] >= df['order_date'].max() - timedelta(days=30)]
    df_previous = df[
        (df['order_date'] >= df['order_date'].max() - timedelta(days=60)) &
        (df['order_date'] < df['order_date'].max() - timedelta(days=30))
    ]
    
    current_revenue = df_current['amount'].sum()
    previous_revenue = df_previous['amount'].sum()
    revenue_growth = (current_revenue - previous_revenue) / previous_revenue * 100 if previous_revenue > 0 else 0
    
    # –¢–æ–ø-3 –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    top_customers = df.groupby('buyer')['amount'].sum().nlargest(3)
    top_products = df.groupby('product_name')['amount'].sum().nlargest(3)
    top_regions = df.groupby('region')['amount'].sum().nlargest(3)
    top_managers = df.groupby('manager')['amount'].sum().nlargest(3)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏
    summary_data = {
        'period': f"{df['order_date'].min().strftime('%d.%m.%Y')} - {df['order_date'].max().strftime('%d.%m.%Y')}",
        'total_revenue': total_revenue,
        'total_orders': total_orders,
        'unique_customers': unique_customers,
        'avg_order_value': avg_order_value,
        'revenue_growth': revenue_growth,
        'top_customers': top_customers.to_dict(),
        'top_products': top_products.to_dict(),
        'top_regions': top_regions.to_dict(),
        'top_managers': top_managers.to_dict()
    }
    
    return summary_data

def main():
    # –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="cosmic-header">üåü –ú–ï–ì–ê-–î–ê–®–ë–û–†–î –û–†–ò–ú–≠–ö–°</h1>', unsafe_allow_html=True)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    with st.spinner('üõ∏ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –±–∞–∑—ã...'):
        df = load_data()
    
    if df.empty:
        st.error("‚ùå –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return
    
    # AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = create_ai_recommendations(df)
    
    if recommendations:
        st.markdown("## ü§ñ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        for rec in recommendations:
            if rec['type'] == 'warning':
                st.markdown(f"""
                <div class="ai-insight" style="background: linear-gradient(135deg, #ff006e 0%, #ff4757 100%);">
                    <h4>{rec['title']}</h4>
                    <p>{rec['text']}</p>
                    <small><b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {rec['action']}</small>
                </div>
                """, unsafe_allow_html=True)
            elif rec['type'] == 'success':
                st.markdown(f"""
                <div class="ai-insight" style="background: linear-gradient(135deg, #06ffa5 0%, #00d2ff 100%);">
                    <h4>{rec['title']}</h4>
                    <p>{rec['text']}</p>
                    <small><b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {rec['action']}</small>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="ai-insight">
                    <h4>{rec['title']}</h4>
                    <p>{rec['text']}</p>
                    <small><b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {rec['action']}</small>
                </div>
                """, unsafe_allow_html=True)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    tab1, tab2, tab3, tab4 = st.tabs([
        "üåå –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏",
        "üéÆ –ë–∏–∑–Ω–µ—Å-—Å–∏–º—É–ª—è—Ç–æ—Ä",
        "üì° –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è",
        "üëî –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞"
    ])
    
    with tab1:
        st.markdown('<div class="hologram-card">', unsafe_allow_html=True)
        if not df.empty:
            fig_3d = create_cosmic_visualizations(df)
            st.plotly_chart(fig_3d, use_container_width=True)
            
            st.markdown("""
            <div class="ai-insight">
                <h4>üåå –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è 3D –≥–∞–ª–∞–∫—Ç–∏–∫–∏</h4>
                <p>–ö–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ä–µ–≥–∏–æ–Ω–µ.</p>
                <p>–†–∞–∑–º–µ—Ä —Ç–æ—á–∫–∏ = –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂, —Ü–≤–µ—Ç = –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤—ã—Ä—É—á–∫–∏</p>
            </div>
            """, unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab2:
        st.markdown('<div class="hologram-card">', unsafe_allow_html=True)
        create_interactive_simulator(df)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab3:
        st.markdown('<div class="hologram-card">', unsafe_allow_html=True)
        if not df.empty:
            fig_live = create_real_time_dashboard(df)
            st.plotly_chart(fig_live, use_container_width=True)
            
            # –ñ–∏–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
            st.markdown("### üö® –ñ–∏–≤—ã–µ –∞–ª–µ—Ä—Ç—ã")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            recent_data = df.tail(100)
            recent_avg = recent_data['amount'].mean()
            overall_avg = df['amount'].mean()
            
            if recent_avg > overall_avg * 1.5:
                st.success("üî• –í—Å–ø–ª–µ—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! –ü—Ä–æ–¥–∞–∂–∏ –≤—ã—à–µ –æ–±—ã—á–Ω–æ–≥–æ –Ω–∞ 50%+")
            elif recent_avg < overall_avg * 0.5:
                st.warning("‚ö†Ô∏è –°–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! –ü—Ä–æ–¥–∞–∂–∏ –Ω–∏–∂–µ –æ–±—ã—á–Ω–æ–≥–æ –Ω–∞ 50%+")
            else:
                st.info("‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab4:
        st.markdown('<div class="hologram-card">', unsafe_allow_html=True)
        st.subheader("üëî –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞")
        
        if not df.empty:
            summary = create_executive_summary(df)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            exec_col1, exec_col2, exec_col3 = st.columns(3)
            
            with exec_col1:
                st.markdown(f"""
                <div class="quantum-metric">
                    <h3>üìà –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h3>
                    <h2>{summary['total_revenue']:,.0f} ‚ÇΩ</h2>
                    <p>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞</p>
                    <p style="color: {'lightgreen' if summary['revenue_growth'] > 0 else 'lightcoral'};">
                        {summary['revenue_growth']:+.1f}% –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É
                    </p>
                </div>
                """, unsafe_allow_html=True)
            
            with exec_col2:
                st.markdown(f"""
                <div class="quantum-metric">
                    <h3>üéØ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h3>
                    <h2>{summary['total_orders']:,}</h2>
                    <p>–ó–∞–∫–∞–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</p>
                    <p>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {summary['avg_order_value']:,.0f} ‚ÇΩ</p>
                </div>
                """, unsafe_allow_html=True)
            
            with exec_col3:
                st.markdown(f"""
                <div class="quantum-metric">
                    <h3>üë• –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –±–∞–∑–∞</h3>
                    <h2>{summary['unique_customers']:,}</h2>
                    <p>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</p>
                    <p>–ó–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {summary['total_orders']/summary['unique_customers']:.1f}</p>
                </div>
                """, unsafe_allow_html=True)
            
            # –¢–æ–ø-—Å–ø–∏—Å–∫–∏
            st.markdown("### üèÜ –¢–æ–ø-—Ä–µ–π—Ç–∏–Ω–≥–∏")
            
            top_col1, top_col2, top_col3, top_col4 = st.columns(4)
            
            with top_col1:
                st.markdown("**üë• –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã:**")
                for i, (client, amount) in enumerate(summary['top_customers'].items()):
                    medal = ["ü•á", "ü•à", "ü•â"][i]
                    st.write(f"{medal} {client[:20]}: {amount:,.0f} ‚ÇΩ")
            
            with top_col2:
                st.markdown("**üì¶ –¢–æ–ø —Ç–æ–≤–∞—Ä—ã:**")
                for i, (product, amount) in enumerate(summary['top_products'].items()):
                    medal = ["ü•á", "ü•à", "ü•â"][i]
                    st.write(f"{medal} {product[:20]}: {amount:,.0f} ‚ÇΩ")
            
            with top_col3:
                st.markdown("**üó∫Ô∏è –¢–æ–ø —Ä–µ–≥–∏–æ–Ω—ã:**")
                for i, (region, amount) in enumerate(summary['top_regions'].items()):
                    medal = ["ü•á", "ü•à", "ü•â"][i]
                    st.write(f"{medal} {region}: {amount:,.0f} ‚ÇΩ")
            
            with top_col4:
                st.markdown("**üë®‚Äçüíº –¢–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä—ã:**")
                for i, (manager, amount) in enumerate(summary['top_managers'].items()):
                    medal = ["ü•á", "ü•à", "ü•â"][i]
                    st.write(f"{medal} {manager[:20]}: {amount:,.0f} ‚ÇΩ")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏
            st.markdown("### üìã –≠–∫—Å–ø–æ—Ä—Ç —Å–≤–æ–¥–∫–∏")
            
            summary_json = json.dumps(summary, ensure_ascii=False, indent=2, default=str)
            
            col_export1, col_export2 = st.columns(2)
            
            with col_export1:
                st.download_button(
                    "üì• –°–∫–∞—á–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É (JSON)",
                    data=summary_json,
                    file_name=f"executive_summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json"
                )
            
            with col_export2:
                # –°–æ–∑–¥–∞–Ω–∏–µ PDF-–ø–æ–¥–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ HTML
                html_report = f"""
                <html>
                <head><title>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –û—Ä–∏–º—ç–∫—Å</title></head>
                <body style="font-family: Arial; margin: 40px;">
                    <h1>üìä –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –û—Ä–∏–º—ç–∫—Å</h1>
                    <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> {summary['period']}</p>
                    <h2>–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h2>
                    <ul>
                        <li>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {summary['total_revenue']:,.0f} ‚ÇΩ</li>
                        <li>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {summary['total_orders']:,}</li>
                        <li>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {summary['unique_customers']:,}</li>
                        <li>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {summary['avg_order_value']:,.0f} ‚ÇΩ</li>
                        <li>–†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏: {summary['revenue_growth']:+.1f}%</li>
                    </ul>
                    <h2>–¢–æ–ø-3 –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
                    <h3>–ö–ª–∏–µ–Ω—Ç—ã:</h3>
                    <ol>{"".join([f"<li>{k}: {v:,.0f} ‚ÇΩ</li>" for k, v in list(summary['top_customers'].items())[:3]])}</ol>
                    <h3>–¢–æ–≤–∞—Ä—ã:</h3>
                    <ol>{"".join([f"<li>{k}: {v:,.0f} ‚ÇΩ</li>" for k, v in list(summary['top_products'].items())[:3]])}</ol>
                    <h3>–†–µ–≥–∏–æ–Ω—ã:</h3>
                    <ol>{"".join([f"<li>{k}: {v:,.0f} ‚ÇΩ</li>" for k, v in list(summary['top_regions'].items())[:3]])}</ol>
                </body>
                </html>
                """
                
                st.download_button(
                    "üìÑ –°–∫–∞—á–∞—Ç—å HTML –æ—Ç—á–µ—Ç",
                    data=html_report,
                    file_name=f"executive_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
                    mime="text/html"
                )
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # –§—É—Ç–µ—Ä —Å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º
    st.markdown(f"""
    <div style="
        background: linear-gradient(135deg, #ff006e 0%, #8338ec 50%, #3a86ff 100%);
        padding: 3rem;
        border-radius: 25px;
        text-align: center;
        color: white;
        margin-top: 3rem;
        box-shadow: 0 0 50px rgba(255, 0, 110, 0.5);
    ">
        <h2 style="font-family: 'Orbitron', monospace;">üåü –ú–ï–ì–ê-–î–ê–®–ë–û–†–î –û–†–ò–ú–≠–ö–°</h2>
        <p style="font-size: 1.2rem;">–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –º–∞–∫—Å–∏–º—É–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</p>
        <p>üöÄ –í–µ—Ä—Å–∏—è: MEGA v4.0 | üìä –ó–∞–ø–∏—Å–µ–π: {len(df):,} | üïê {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
        <p style="opacity: 0.8;">–°–æ–∑–¥–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π AI –∏ Data Science</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
