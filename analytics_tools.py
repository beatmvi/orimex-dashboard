#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –û—Ä–∏–º—ç–∫—Å
"""

import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime, timedelta
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –û—Ä–∏–º—ç–∫—Å",
    page_icon="üõ†Ô∏è",
    layout="wide"
)

def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('orimex_orders.db')
        query = '''
        SELECT 
            o.id, o.order_date, o.quantity, o.amount,
            c.head_contractor, c.buyer, c.manager, c.region,
            p.name as product_name, p.characteristics, p.category
        FROM orders o
        JOIN contractors c ON o.contractor_id = c.id
        JOIN products p ON o.product_id = p.id
        WHERE o.amount IS NOT NULL AND o.amount > 0
        '''
        df = pd.read_sql_query(query, conn)
        df['order_date'] = pd.to_datetime(df['order_date'])
        conn.close()
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return pd.DataFrame()

def create_custom_report():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    st.header("üìã –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤")
    
    df = load_data()
    if df.empty:
        return
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞")
        
        # –í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫
        metrics = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏:",
            ['–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã'],
            default=['–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤']
        )
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
        group_by = st.selectbox(
            "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ:",
            ['–î–∞—Ç–∞', '–†–µ–≥–∏–æ–Ω', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ö–ª–∏–µ–Ω—Ç']
        )
        
        # –ü–µ—Ä–∏–æ–¥
        date_range = st.date_input(
            "–ü–µ—Ä–∏–æ–¥:",
            value=(df['order_date'].min().date(), df['order_date'].max().date())
        )
        
        # –§–∏–ª—å—Ç—Ä—ã
        selected_regions = st.multiselect(
            "–†–µ–≥–∏–æ–Ω—ã:",
            df['region'].unique(),
            default=df['region'].unique()[:5]
        )
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if st.button("üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç"):
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            filtered_df = df[
                (df['order_date'].dt.date >= date_range[0]) &
                (df['order_date'].dt.date <= date_range[1]) &
                (df['region'].isin(selected_regions))
            ]
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
            group_mapping = {
                '–î–∞—Ç–∞': 'order_date',
                '–†–µ–≥–∏–æ–Ω': 'region', 
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': 'category',
                '–ú–µ–Ω–µ–¥–∂–µ—Ä': 'manager',
                '–ö–ª–∏–µ–Ω—Ç': 'buyer'
            }
            
            group_col = group_mapping[group_by]
            
            if group_by == '–î–∞—Ç–∞':
                grouped = filtered_df.groupby(filtered_df['order_date'].dt.date)
            else:
                grouped = filtered_df.groupby(group_col)
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            report_data = {}
            
            if '–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂' in metrics:
                report_data['–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂'] = grouped['amount'].sum()
            if '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤' in metrics:
                report_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'] = grouped['id'].count()
            if '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫' in metrics:
                report_data['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫'] = grouped['amount'].mean()
            if '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã' in metrics:
                report_data['–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã'] = grouped['buyer'].nunique()
            
            report_df = pd.DataFrame(report_data).round(2)
            
            with col2:
                st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç")
                st.dataframe(report_df, width='stretch')
                
                # –≠–∫—Å–ø–æ—Ä—Ç
                csv = report_df.to_csv(encoding='utf-8')
                st.download_button(
                    "üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                    data=csv,
                    file_name=f"custom_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
                )

def create_what_if_analysis():
    """What-if –∞–Ω–∞–ª–∏–∑"""
    st.header("üîÆ What-If –∞–Ω–∞–ª–∏–∑")
    
    df = load_data()
    if df.empty:
        return
    
    st.write("**–°–º–æ–¥–µ–ª–∏—Ä—É–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞:**")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏—è")
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω
        price_change = st.slider(
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω (%)",
            min_value=-50,
            max_value=100,
            value=0,
            help="–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è = —Ä–æ—Å—Ç —Ü–µ–Ω, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ = —Å–∫–∏–¥–∫–∏"
        )
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞
        demand_change = st.slider(
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ (%)",
            min_value=-50,
            max_value=100,
            value=0,
            help="–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤"
        )
        
        # –°–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
        seasonal_factor = st.slider(
            "–°–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä",
            min_value=0.5,
            max_value=2.0,
            value=1.0,
            step=0.1,
            help="1.0 = –æ–±—ã—á–Ω—ã–π —Å–µ–∑–æ–Ω, >1.0 = –≤—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω"
        )
        
        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        selected_category = st.selectbox(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            ['–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'] + list(df['category'].unique())
        )
    
    with col2:
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario_df = df.copy()
        
        if selected_category != '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
            scenario_df = scenario_df[scenario_df['category'] == selected_category]
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        base_revenue = scenario_df['amount'].sum()
        base_orders = len(scenario_df)
        
        # –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        new_price_multiplier = 1 + price_change / 100
        new_demand_multiplier = 1 + demand_change / 100
        
        # –≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
        elasticity = -0.5  # –ü—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω –Ω–∞ 10% —Å–ø—Ä–æ—Å –ø–∞–¥–∞–µ—Ç –Ω–∞ 5%
        demand_price_effect = 1 + (price_change * elasticity / 100)
        
        total_demand_change = new_demand_multiplier * demand_price_effect * seasonal_factor
        
        # –ù–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        new_revenue = base_revenue * new_price_multiplier * total_demand_change
        new_orders = base_orders * total_demand_change
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        revenue_change = (new_revenue - base_revenue) / base_revenue * 100
        orders_change = (new_orders - base_orders) / base_orders * 100
        
        st.metric("üí∞ –í—ã—Ä—É—á–∫–∞", f"{new_revenue:,.0f} ‚ÇΩ", f"{revenue_change:+.1f}%")
        st.metric("üõí –ó–∞–∫–∞–∑—ã", f"{new_orders:,.0f}", f"{orders_change:+.1f}%")
        st.metric("üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{new_revenue/new_orders:,.0f} ‚ÇΩ" if new_orders > 0 else "0 ‚ÇΩ")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
        fig = go.Figure()
        
        scenarios = ['–¢–µ–∫—É—â–∏–π', '–ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π']
        revenues = [base_revenue, new_revenue]
        colors = ['blue', 'red' if revenue_change < 0 else 'green']
        
        fig.add_trace(go.Bar(
            x=scenarios,
            y=revenues,
            marker_color=colors,
            text=[f"{r:,.0f} ‚ÇΩ" for r in revenues],
            textposition='auto'
        ))
        
        fig.update_layout(
            title="üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤",
            yaxis_title="–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)",
            height=400
        )
        
        st.plotly_chart(fig, width='stretch')

def create_advanced_filters():
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫"""
    st.header("üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
    
    df = load_data()
    if df.empty:
        return
    
    # SQL-–ø–æ–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.subheader("üíæ SQL-–∑–∞–ø—Ä–æ—Å—ã")
    
    predefined_queries = {
        "–¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤": """
        SELECT buyer, SUM(amount) as total_amount, COUNT(*) as order_count
        FROM data 
        GROUP BY buyer 
        ORDER BY total_amount DESC 
        LIMIT 10
        """,
        "–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ—Å—è—Ü–∞–º": """
        SELECT strftime('%Y-%m', order_date) as month, 
               SUM(amount) as revenue,
               COUNT(*) as orders
        FROM data 
        GROUP BY month 
        ORDER BY month
        """,
        "–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π": """
        SELECT category, 
               SUM(amount) as revenue,
               AVG(amount) as avg_order,
               COUNT(*) as orders
        FROM data 
        GROUP BY category 
        ORDER BY revenue DESC
        """
    }
    
    selected_query = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", list(predefined_queries.keys()))
    
    custom_query = st.text_area(
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π SQL-–∑–∞–ø—Ä–æ—Å:",
        value=predefined_queries[selected_query],
        height=150,
        help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'data' –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"
    )
    
    if st.button("‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"):
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            conn = sqlite3.connect(':memory:')
            df.to_sql('data', conn, index=False)
            
            result = pd.read_sql_query(custom_query, conn)
            
            st.success(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {len(result)} –∑–∞–ø–∏—Å–µ–π")
            st.dataframe(result, width='stretch')
            
            # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            csv = result.to_csv(index=False, encoding='utf-8')
            st.download_button(
                "üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                data=csv,
                file_name=f"query_result_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            )
            
            conn.close()
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")

def create_data_quality_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
    st.header("üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    df = load_data()
    if df.empty:
        return
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        total_records = len(df)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏
        missing_data = df.isnull().sum()
        missing_percent = missing_data / len(df) * 100
        
        quality_df = pd.DataFrame({
            '–ü–æ–ª–µ': missing_data.index,
            '–ü—Ä–æ–ø—É—Å–∫–∏': missing_data.values,
            '–ü—Ä–æ—Ü–µ–Ω—Ç': missing_percent.values
        })
        
        st.dataframe(quality_df, width='stretch')
        
        # –î—É–±–ª–∏–∫–∞—Ç—ã
        duplicates = df.duplicated().sum()
        st.metric("üîÑ –î—É–±–ª–∏–∫–∞—Ç—ã", duplicates)
        
        # –í—ã–±—Ä–æ—Å—ã –≤ —Å—É–º–º–∞—Ö
        Q1 = df['amount'].quantile(0.25)
        Q3 = df['amount'].quantile(0.75)
        IQR = Q3 - Q1
        outliers = len(df[(df['amount'] < Q1 - 1.5 * IQR) | (df['amount'] > Q3 + 1.5 * IQR)])
        st.metric("‚ö° –í—ã–±—Ä–æ—Å—ã –≤ —Å—É–º–º–∞—Ö", outliers)
    
    with col2:
        st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å—É–º–º –∑–∞–∫–∞–∑–æ–≤
        fig_hist = px.histogram(
            df[df['amount'] < df['amount'].quantile(0.95)],
            x='amount',
            nbins=50,
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º –∑–∞–∫–∞–∑–æ–≤"
        )
        st.plotly_chart(fig_hist, width='stretch')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_stats = df.groupby('category').agg({
            'amount': ['count', 'mean', 'std', 'min', 'max']
        }).round(2)
        
        st.write("**üì¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**")
        st.dataframe(category_stats, width='stretch')

def create_export_center():
    """–¶–µ–Ω—Ç—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    st.header("üì§ –¶–µ–Ω—Ç—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –æ—Ç—á–µ—Ç–æ–≤")
    
    df = load_data()
    if df.empty:
        return
    
    export_options = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        [
            "–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤",
            "–°–≤–æ–¥–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º", 
            "–°–≤–æ–¥–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º",
            "–°–≤–æ–¥–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º",
            "–°–≤–æ–¥–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º",
            "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã (–ø–æ –¥–Ω—è–º)",
            "ABC –∞–Ω–∞–ª–∏–∑"
        ],
        default=["–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤"]
    )
    
    export_format = st.radio(
        "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        ["CSV", "Excel", "JSON"],
        horizontal=True
    )
    
    if st.button("üì• –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç"):
        export_data = {}
        
        if "–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤" in export_options:
            export_data['orders'] = df
        
        if "–°–≤–æ–¥–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º" in export_options:
            client_summary = df.groupby('buyer').agg({
                'amount': ['sum', 'mean', 'count'],
                'order_date': ['min', 'max']
            }).round(2)
            export_data['client_summary'] = client_summary
        
        if "–°–≤–æ–¥–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º" in export_options:
            product_summary = df.groupby(['product_name', 'category']).agg({
                'amount': ['sum', 'mean', 'count'],
                'quantity': 'sum'
            }).round(2)
            export_data['product_summary'] = product_summary
        
        if "–°–≤–æ–¥–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º" in export_options:
            region_summary = df.groupby('region').agg({
                'amount': ['sum', 'mean', 'count'],
                'buyer': 'nunique'
            }).round(2)
            export_data['region_summary'] = region_summary
        
        if "–°–≤–æ–¥–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º" in export_options:
            manager_summary = df.groupby('manager').agg({
                'amount': ['sum', 'mean', 'count'],
                'buyer': 'nunique'
            }).round(2)
            export_data['manager_summary'] = manager_summary
        
        if "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã (–ø–æ –¥–Ω—è–º)" in export_options:
            daily_data = df.groupby('order_date').agg({
                'amount': 'sum',
                'id': 'count'
            }).reset_index()
            export_data['daily_timeseries'] = daily_data
        
        if "ABC –∞–Ω–∞–ª–∏–∑" in export_options:
            # ABC –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
            product_abc = df.groupby('product_name')['amount'].sum().sort_values(ascending=False)
            product_abc_cum = (product_abc.cumsum() / product_abc.sum() * 100).reset_index()
            product_abc_cum['ABC_category'] = pd.cut(
                product_abc_cum['amount'], 
                bins=[0, 80, 95, 100], 
                labels=['A', 'B', 'C']
            )
            export_data['abc_analysis'] = product_abc_cum
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        if export_format == "CSV":
            for name, data in export_data.items():
                csv = data.to_csv(index=True, encoding='utf-8')
                st.download_button(
                    f"üì• {name}.csv",
                    data=csv,
                    file_name=f"{name}_{timestamp}.csv",
                    mime="text/csv"
                )
        
        elif export_format == "JSON":
            for name, data in export_data.items():
                json_data = data.to_json(orient='records', date_format='iso')
                st.download_button(
                    f"üì• {name}.json",
                    data=json_data,
                    file_name=f"{name}_{timestamp}.json",
                    mime="application/json"
                )
        
        st.success(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(export_data)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")

def create_real_time_monitor():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    st.header("üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    
    df = load_data()
    if df.empty:
        return
    
    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    auto_refresh = st.checkbox("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)")
    
    if auto_refresh:
        st.rerun()
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
    latest_date = df['order_date'].max()
    today_data = df[df['order_date'].dt.date == latest_date.date()]
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üí∞ –ü—Ä–æ–¥–∞–∂–∏ —Å–µ–≥–æ–¥–Ω—è",
            f"{today_data['amount'].sum():,.0f} ‚ÇΩ",
            f"{len(today_data)} –∑–∞–∫–∞–∑–æ–≤"
        )
    
    with col2:
        avg_today = today_data['amount'].mean() if len(today_data) > 0 else 0
        avg_overall = df['amount'].mean()
        change = (avg_today - avg_overall) / avg_overall * 100 if avg_overall > 0 else 0
        st.metric(
            "üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ —Å–µ–≥–æ–¥–Ω—è", 
            f"{avg_today:,.0f} ‚ÇΩ",
            f"{change:+.1f}% –∫ —Å—Ä–µ–¥–Ω–µ–º—É"
        )
    
    with col3:
        if len(today_data) > 0:
            top_manager_today = today_data.groupby('manager')['amount'].sum().idxmax()
            top_amount = today_data.groupby('manager')['amount'].sum().max()
            st.metric(
                "üë®‚Äçüíº –¢–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ–≥–æ–¥–Ω—è",
                top_manager_today[:15] + "..." if len(top_manager_today) > 15 else top_manager_today,
                f"{top_amount:,.0f} ‚ÇΩ"
            )
        else:
            st.metric("üë®‚Äçüíº –¢–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ–≥–æ–¥–Ω—è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "0 ‚ÇΩ")
    
    with col4:
        if len(today_data) > 0:
            top_product_today = today_data.groupby('product_name')['amount'].sum().idxmax()
            st.metric(
                "üèÜ –¢–æ–ø —Ç–æ–≤–∞—Ä —Å–µ–≥–æ–¥–Ω—è",
                top_product_today[:15] + "..." if len(top_product_today) > 15 else top_product_today,
                f"{today_data.groupby('product_name')['amount'].sum().max():,.0f} ‚ÇΩ"
            )
        else:
            st.metric("üèÜ –¢–æ–ø —Ç–æ–≤–∞—Ä —Å–µ–≥–æ–¥–Ω—è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "0 ‚ÇΩ")
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    last_7_days = df[df['order_date'] >= (latest_date - timedelta(days=7))]
    daily_trend = last_7_days.groupby(last_7_days['order_date'].dt.date)['amount'].sum().reset_index()
    
    fig = px.line(
        daily_trend,
        x='order_date',
        y='amount',
        title="üìà –¢—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
        markers=True
    )
    fig.update_layout(height=400)
    st.plotly_chart(fig, width='stretch')

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –û—Ä–∏–º—ç–∫—Å</h1>', unsafe_allow_html=True)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    tool = st.selectbox(
        "üîß –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:",
        [
            "üìã –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤",
            "üîÆ What-If –∞–Ω–∞–ª–∏–∑", 
            "üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã",
            "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö",
            "üì§ –¶–µ–Ω—Ç—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞",
            "üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
        ]
    )
    
    st.markdown("---")
    
    if tool == "üìã –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤":
        create_custom_report()
    elif tool == "üîÆ What-If –∞–Ω–∞–ª–∏–∑":
        create_what_if_analysis()
    elif tool == "üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã":
        create_advanced_filters()
    elif tool == "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö":
        create_data_quality_check()
    elif tool == "üì§ –¶–µ–Ω—Ç—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞":
        create_export_center()
    elif tool == "üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏":
        create_real_time_monitor()

if __name__ == "__main__":
    main()
