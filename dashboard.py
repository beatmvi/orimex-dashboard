#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–æ–≤ –û—Ä–∏–º—ç–∫—Å
"""

import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üìä –î–∞—à–±–æ—Ä–¥ –û—Ä–∏–º—ç–∫—Å",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    .metric-container {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .sidebar .sidebar-content {
        background-color: #f8f9fa;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('orimex_orders.db')
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Å –¥–∂–æ–π–Ω–∞–º–∏
        query = '''
        SELECT 
            o.id,
            o.order_date,
            o.quantity,
            o.amount,
            c.head_contractor,
            c.buyer,
            c.manager,
            c.region,
            p.name as product_name,
            p.characteristics,
            p.category
        FROM orders o
        JOIN contractors c ON o.contractor_id = c.id
        JOIN products p ON o.product_id = p.id
        WHERE o.amount IS NOT NULL AND o.amount > 0
        '''
        
        df = pd.read_sql_query(query, conn)
        df['order_date'] = pd.to_datetime(df['order_date'])
        
        conn.close()
        return df
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

@st.cache_data
def get_summary_stats(df):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if df.empty:
        return {}
    
    return {
        'total_orders': len(df),
        'total_amount': df['amount'].sum(),
        'avg_order_amount': df['amount'].mean(),
        'unique_products': df['product_name'].nunique(),
        'unique_contractors': df['head_contractor'].nunique(),
        'unique_regions': df['region'].nunique(),
        'date_range': (df['order_date'].min(), df['order_date'].max())
    }

def create_time_series_chart(df):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤"""
    daily_stats = df.groupby('order_date').agg({
        'amount': 'sum',
        'quantity': 'sum',
        'id': 'count'
    }).reset_index()
    daily_stats.columns = ['date', 'total_amount', 'total_quantity', 'order_count']
    
    fig = make_subplots(
        rows=2, cols=1,
        subplot_titles=('–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º'),
        vertical_spacing=0.1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å—É–º–º—ã
    fig.add_trace(
        go.Scatter(
            x=daily_stats['date'],
            y=daily_stats['total_amount'],
            mode='lines+markers',
            name='–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤',
            line=dict(color='#1f77b4', width=2),
            marker=dict(size=4)
        ),
        row=1, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    fig.add_trace(
        go.Scatter(
            x=daily_stats['date'],
            y=daily_stats['order_count'],
            mode='lines+markers',
            name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
            line=dict(color='#ff7f0e', width=2),
            marker=dict(size=4)
        ),
        row=2, col=1
    )
    
    fig.update_layout(
        height=600,
        showlegend=False,
        title_text="–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–∏"
    )
    
    fig.update_xaxes(title_text="–î–∞—Ç–∞")
    fig.update_yaxes(title_text="–°—É–º–º–∞ (—Ä—É–±.)", row=1, col=1)
    fig.update_yaxes(title_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", row=2, col=1)
    
    return fig

def create_region_analysis(df):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"""
    region_stats = df.groupby('region').agg({
        'amount': ['sum', 'mean', 'count']
    }).round(2)
    
    region_stats.columns = ['–û–±—â–∞—è —Å—É–º–º–∞', '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤']
    region_stats = region_stats.reset_index()
    
    # Pie chart –¥–ª—è —Å—É–º–º—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    fig_pie = px.pie(
        region_stats, 
        values='–û–±—â–∞—è —Å—É–º–º–∞', 
        names='region',
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"
    )
    
    # Bar chart –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
    fig_bar = px.bar(
        region_stats,
        x='region',
        y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
        title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º",
        color='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
        color_continuous_scale='viridis'
    )
    
    return fig_pie, fig_bar, region_stats

def create_product_analysis(df):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–æ–≤–∞—Ä–∞–º"""
    product_stats = df.groupby(['category', 'product_name']).agg({
        'amount': 'sum',
        'quantity': 'sum',
        'id': 'count'
    }).reset_index()
    
    product_stats.columns = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–¢–æ–≤–∞—Ä', '–û–±—â–∞—è —Å—É–º–º–∞', '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤']
    product_stats = product_stats.sort_values('–û–±—â–∞—è —Å—É–º–º–∞', ascending=False)
    
    # –¢–æ–ø-20 —Ç–æ–≤–∞—Ä–æ–≤
    top_products = product_stats.head(20)
    
    fig = px.bar(
        top_products,
        x='–û–±—â–∞—è —Å—É–º–º–∞',
        y='–¢–æ–≤–∞—Ä',
        color='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        orientation='h',
        title="–¢–æ–ø-20 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—É–º–º–µ –ø—Ä–æ–¥–∞–∂"
    )
    fig.update_layout(height=800)
    
    return fig, product_stats

def create_contractor_analysis(df):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º"""
    contractor_stats = df.groupby(['head_contractor', 'buyer']).agg({
        'amount': 'sum',
        'id': 'count'
    }).reset_index()
    
    contractor_stats.columns = ['–ì–æ–ª–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å', '–û–±—â–∞—è —Å—É–º–º–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤']
    contractor_stats = contractor_stats.sort_values('–û–±—â–∞—è —Å—É–º–º–∞', ascending=False)
    
    # –¢–æ–ø-15 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    top_contractors = contractor_stats.head(15)
    
    fig = px.bar(
        top_contractors,
        x='–û–±—â–∞—è —Å—É–º–º–∞',
        y='–ü–æ–∫—É–ø–∞—Ç–µ–ª—å',
        orientation='h',
        title="–¢–æ–ø-15 –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –ø–æ —Å—É–º–º–µ –∑–∞–∫–∞–∑–æ–≤",
        color='–û–±—â–∞—è —Å—É–º–º–∞',
        color_continuous_scale='plasma'
    )
    fig.update_layout(height=600)
    
    return fig, contractor_stats

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">üìä –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–æ–≤ –û—Ä–∏–º—ç–∫—Å</h1>', unsafe_allow_html=True)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'):
        df = load_data()
    
    if df.empty:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞.")
        st.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–∫—Ä–∏–ø—Ç csv_to_db.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    st.sidebar.header("üîß –§–∏–ª—å—Ç—Ä—ã")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    date_range = st.sidebar.date_input(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥",
        value=(df['order_date'].min().date(), df['order_date'].max().date()),
        min_value=df['order_date'].min().date(),
        max_value=df['order_date'].max().date()
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    regions = ['–í—Å–µ'] + sorted(df['region'].unique().tolist())
    selected_region = st.sidebar.selectbox("–†–µ–≥–∏–æ–Ω", regions)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = ['–í—Å–µ'] + sorted(df['category'].unique().tolist())
    selected_category = st.sidebar.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤", categories)
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_df = df.copy()
    
    if len(date_range) == 2:
        start_date, end_date = date_range
        filtered_df = filtered_df[
            (filtered_df['order_date'].dt.date >= start_date) & 
            (filtered_df['order_date'].dt.date <= end_date)
        ]
    
    if selected_region != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['region'] == selected_region]
    
    if selected_category != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['category'] == selected_category]
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    stats = get_summary_stats(filtered_df)
    
    if stats:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üí∞ –û–±—â–∞—è —Å—É–º–º–∞", f"{stats['total_amount']:,.0f} ‚ÇΩ")
        
        with col2:
            st.metric("üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", f"{stats['total_orders']:,}")
        
        with col3:
            st.metric("üìä –°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑", f"{stats['avg_order_amount']:,.0f} ‚ÇΩ")
        
        with col4:
            st.metric("üè≠ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", stats['unique_products'])
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìà –î–∏–Ω–∞–º–∏–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏", 
        "üó∫Ô∏è –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º", 
        "üì¶ –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤", 
        "üè¢ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤",
        "üìã –î–∞–Ω–Ω—ã–µ"
    ])
    
    with tab1:
        st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
        if not filtered_df.empty:
            fig_time = create_time_series_chart(filtered_df)
            st.plotly_chart(fig_time, width='stretch')
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
            monthly_stats = filtered_df.groupby(filtered_df['order_date'].dt.to_period('M')).agg({
                'amount': 'sum',
                'id': 'count'
            }).reset_index()
            monthly_stats['order_date'] = monthly_stats['order_date'].astype(str)
            monthly_stats.columns = ['–ú–µ—Å—è—Ü', '–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤']
            
            st.subheader("üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º")
            st.dataframe(monthly_stats, width='stretch')
    
    with tab2:
        st.subheader("–ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
        if not filtered_df.empty:
            fig_pie, fig_bar, region_stats = create_region_analysis(filtered_df)
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(fig_pie, width='stretch')
            with col2:
                st.plotly_chart(fig_bar, width='stretch')
            
            st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
            st.dataframe(region_stats, width='stretch')
    
    with tab3:
        st.subheader("–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤")
        if not filtered_df.empty:
            fig_products, product_stats = create_product_analysis(filtered_df)
            st.plotly_chart(fig_products, width='stretch')
            
            st.subheader("üì¶ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º")
            st.dataframe(product_stats, width='stretch')
    
    with tab4:
        st.subheader("–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤")
        if not filtered_df.empty:
            fig_contractors, contractor_stats = create_contractor_analysis(filtered_df)
            st.plotly_chart(fig_contractors, width='stretch')
            
            st.subheader("üè¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º")
            st.dataframe(contractor_stats, width='stretch')
    
    with tab5:
        st.subheader("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        st.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered_df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(df)} –æ–±—â–∏—Ö")
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞
        if not filtered_df.empty:
            csv = filtered_df.to_csv(index=False, encoding='utf-8')
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CSV)",
                data=csv,
                file_name=f"orimex_orders_filtered_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        st.dataframe(filtered_df, width='stretch')
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown(
        "<div style='text-align: center; color: #666;'>"
        "üìä –î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –û—Ä–∏–º—ç–∫—Å | "
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        "</div>",
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()
