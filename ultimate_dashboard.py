#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –û—Ä–∏–º—ç–∫—Å - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –¥–∏–∑–∞–π–Ω
"""

import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.figure_factory as ff
from datetime import datetime, timedelta
import numpy as np
from scipy import stats
from sklearn.ensemble import RandomForestRegressor, IsolationForest
from sklearn.cluster import KMeans, DBSCAN
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üöÄ –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –û—Ä–∏–º—ç–∫—Å",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –£–ª—å—Ç—Ä–∞-—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700;800&display=swap');
    
    .stApp {
        background: linear-gradient(135deg, 
            #667eea 0%, #764ba2 25%, #f093fb 50%, #f5576c 75%, #4facfe 100%);
        background-size: 400% 400%;
        animation: gradientShift 15s ease infinite;
    }
    
    @keyframes gradientShift {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
    }
    
    .main-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 25px;
        padding: 2rem;
        margin: 1rem;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .ultra-header {
        font-family: 'Poppins', sans-serif;
        font-size: 4rem;
        font-weight: 800;
        text-align: center;
        margin-bottom: 2rem;
        background: linear-gradient(45deg, #667eea, #764ba2, #f093fb, #f5576c);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 0 0 30px rgba(102, 126, 234, 0.5);
        position: relative;
    }
    
    .ultra-header::before {
        content: '';
        position: absolute;
        top: -10px;
        left: -10px;
        right: -10px;
        bottom: -10px;
        background: linear-gradient(45deg, #667eea, #764ba2, #f093fb, #f5576c);
        border-radius: 20px;
        filter: blur(20px);
        opacity: 0.3;
        z-index: -1;
    }
    
    .glass-card {
        background: rgba(255, 255, 255, 0.25);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 2rem;
        margin: 1rem 0;
        border: 1px solid rgba(255, 255, 255, 0.18);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
        transition: all 0.3s ease;
    }
    
    .glass-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 45px rgba(0, 0, 0, 0.2);
    }
    
    .neon-metric {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        color: white;
        box-shadow: 
            0 0 20px rgba(102, 126, 234, 0.6),
            0 0 40px rgba(102, 126, 234, 0.4),
            0 0 60px rgba(102, 126, 234, 0.2);
        animation: neonPulse 2s ease-in-out infinite alternate;
        border: 2px solid rgba(255, 255, 255, 0.3);
    }
    
    @keyframes neonPulse {
        from { box-shadow: 0 0 20px rgba(102, 126, 234, 0.6); }
        to { box-shadow: 0 0 30px rgba(102, 126, 234, 0.8), 0 0 60px rgba(102, 126, 234, 0.4); }
    }
    
    .insight-box {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        color: white;
        box-shadow: 0 10px 30px rgba(79, 172, 254, 0.3);
        border-left: 5px solid #ffffff;
    }
    
    .warning-box {
        background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #ff6b6b;
        margin: 1rem 0;
    }
    
    .success-box {
        background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #51cf66;
        margin: 1rem 0;
    }
    
    .sidebar .sidebar-content {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 20px;
    }
    
    .stSelectbox > div > div {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .floating-panel {
        position: fixed;
        top: 100px;
        right: 20px;
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 1rem;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        width: 250px;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data(ttl=300)
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('orimex_orders.db')
        
        query = '''
        SELECT 
            o.id,
            o.order_date,
            o.quantity,
            o.amount,
            c.head_contractor,
            c.buyer,
            c.manager,
            c.region,
            p.name as product_name,
            p.characteristics,
            p.category
        FROM orders o
        JOIN contractors c ON o.contractor_id = c.id
        JOIN products p ON o.product_id = p.id
        WHERE o.amount IS NOT NULL AND o.amount > 0
        '''
        
        df = pd.read_sql_query(query, conn)
        df['order_date'] = pd.to_datetime(df['order_date'])
        df['month'] = df['order_date'].dt.to_period('M')
        df['week'] = df['order_date'].dt.to_period('W')
        df['day_of_week'] = df['order_date'].dt.day_name()
        df['quarter'] = df['order_date'].dt.to_period('Q')
        df['hour'] = df['order_date'].dt.hour
        df['is_weekend'] = df['order_date'].dt.dayofweek.isin([5, 6])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–ª—è
        df['price_per_unit'] = df['amount'] / df['quantity']
        df['order_size_category'] = pd.cut(
            df['amount'], 
            bins=[0, 10000, 50000, 100000, 500000, float('inf')],
            labels=['–ú–∞–ª—ã–π', '–°—Ä–µ–¥–Ω–∏–π', '–ë–æ–ª—å—à–æ–π', '–ö—Ä—É–ø–Ω—ã–π', 'VIP']
        )
        
        conn.close()
        return df
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def create_smart_insights(df):
    """–£–º–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
    insights = []
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞
    monthly_growth = df.groupby(df['order_date'].dt.to_period('M'))['amount'].sum()
    if len(monthly_growth) > 1:
        last_month_growth = (monthly_growth.iloc[-1] - monthly_growth.iloc[-2]) / monthly_growth.iloc[-2] * 100
        if last_month_growth > 10:
            insights.append(f"üìà –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–µ—Å—è—Ü–µ —Å–æ—Å—Ç–∞–≤–∏–ª {last_month_growth:.1f}%")
        elif last_month_growth < -10:
            insights.append(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–µ—Å—è—Ü–µ –Ω–∞ {abs(last_month_growth):.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
    monthly_avg = df.groupby(df['order_date'].dt.month)['amount'].mean()
    peak_month = monthly_avg.idxmax()
    peak_value = monthly_avg.max()
    low_month = monthly_avg.idxmin()
    
    month_names = {1: '–Ø–Ω–≤–∞—Ä—å', 2: '–§–µ–≤—Ä–∞–ª—å', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–µ–ª—å', 5: '–ú–∞–π', 6: '–ò—é–Ω—å',
                   7: '–ò—é–ª—å', 8: '–ê–≤–≥—É—Å—Ç', 9: '–°–µ–Ω—Ç—è–±—Ä—å', 10: '–û–∫—Ç—è–±—Ä—å', 11: '–ù–æ—è–±—Ä—å', 12: '–î–µ–∫–∞–±—Ä—å'}
    
    insights.append(f"üèÜ –ü–∏–∫–æ–≤—ã–π –º–µ—Å—è—Ü –ø—Ä–æ–¥–∞–∂: {month_names.get(peak_month, peak_month)} ({peak_value:,.0f} ‚ÇΩ –≤ —Å—Ä–µ–¥–Ω–µ–º)")
    insights.append(f"üìâ –°–∞–º—ã–π —Å–ª–∞–±—ã–π –º–µ—Å—è—Ü: {month_names.get(low_month, low_month)}")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã
    top_client = df.groupby('buyer')['amount'].sum().idxmax()
    top_client_amount = df.groupby('buyer')['amount'].sum().max()
    total_revenue = df['amount'].sum()
    top_client_share = top_client_amount / total_revenue * 100
    
    insights.append(f"üíé –¢–æ–ø –∫–ª–∏–µ–Ω—Ç '{top_client}' –¥–∞–µ—Ç {top_client_share:.1f}% –æ—Ç –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–∏")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
    top_product = df.groupby('product_name')['amount'].sum().idxmax()
    top_product_amount = df.groupby('product_name')['amount'].sum().max()
    top_product_share = top_product_amount / total_revenue * 100
    
    insights.append(f"üèÖ –¢–æ–ø —Ç–æ–≤–∞—Ä '{top_product}' —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {top_product_share:.1f}% –≤—ã—Ä—É—á–∫–∏")
    
    # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    manager_efficiency = df.groupby('manager').agg({
        'amount': 'sum',
        'buyer': 'nunique'
    })
    manager_efficiency['revenue_per_client'] = manager_efficiency['amount'] / manager_efficiency['buyer']
    top_efficient_manager = manager_efficiency['revenue_per_client'].idxmax()
    
    insights.append(f"‚≠ê –°–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: {top_efficient_manager}")
    
    return insights

def create_ultra_time_series(df):
    """–£–ª—å—Ç—Ä–∞-–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤"""
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    daily_stats = df.groupby('order_date').agg({
        'amount': ['sum', 'mean', 'count'],
        'quantity': 'sum',
        'buyer': 'nunique'
    }).reset_index()
    
    daily_stats.columns = ['date', 'revenue', 'avg_order', 'order_count', 'quantity', 'unique_customers']
    
    # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
    daily_stats['ma_7'] = daily_stats['revenue'].rolling(window=7).mean()
    daily_stats['ma_30'] = daily_stats['revenue'].rolling(window=30).mean()
    
    # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    daily_stats['volatility'] = daily_stats['revenue'].rolling(window=7).std()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    fig = make_subplots(
        rows=4, cols=2,
        subplot_titles=(
            'üí∞ –í—ã—Ä—É—á–∫–∞ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏', 'üìä –û–±—ä–µ–º –∏ –∫–ª–∏–µ–Ω—Ç—ã',
            'üìà –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂', 'üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–≤—ã—Ä—É—á–∫–∞/–∫–ª–∏–µ–Ω—Ç)',
            'üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ –¥–Ω—è–º', '‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞',
            'üåä –°–µ–∑–æ–Ω–Ω–∞—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è', 'üé™ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤'
        ),
        specs=[[{"secondary_y": False}, {"secondary_y": True}],
               [{"secondary_y": False}, {"secondary_y": False}],
               [{"type": "heatmap"}, {"secondary_y": False}],
               [{"secondary_y": False}, {"type": "histogram"}]],
        vertical_spacing=0.08,
        horizontal_spacing=0.1
    )
    
    # 1. –í—ã—Ä—É—á–∫–∞ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏
    fig.add_trace(
        go.Scatter(x=daily_stats['date'], y=daily_stats['revenue'],
                  mode='lines', name='–í—ã—Ä—É—á–∫–∞', line=dict(color='#1f77b4', width=2)),
        row=1, col=1
    )
    fig.add_trace(
        go.Scatter(x=daily_stats['date'], y=daily_stats['ma_7'],
                  mode='lines', name='MA-7', line=dict(color='orange', dash='dash')),
        row=1, col=1
    )
    fig.add_trace(
        go.Scatter(x=daily_stats['date'], y=daily_stats['ma_30'],
                  mode='lines', name='MA-30', line=dict(color='red', dash='dot')),
        row=1, col=1
    )
    
    # 2. –û–±—ä–µ–º –∏ –∫–ª–∏–µ–Ω—Ç—ã (–¥–≤–æ–π–Ω–∞—è –æ—Å—å)
    fig.add_trace(
        go.Bar(x=daily_stats['date'], y=daily_stats['order_count'],
               name='–ó–∞–∫–∞–∑—ã', marker_color='lightblue', opacity=0.7),
        row=1, col=2
    )
    fig.add_trace(
        go.Scatter(x=daily_stats['date'], y=daily_stats['unique_customers'],
                  mode='lines+markers', name='–£–Ω–∏–∫. –∫–ª–∏–µ–Ω—Ç—ã', 
                  line=dict(color='red'), yaxis='y2'),
        row=1, col=2, secondary_y=True
    )
    
    # 3. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    fig.add_trace(
        go.Scatter(x=daily_stats['date'], y=daily_stats['volatility'],
                  mode='lines', fill='tonexty', name='–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å',
                  line=dict(color='purple')),
        row=2, col=1
    )
    
    # 4. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    daily_stats['efficiency'] = daily_stats['revenue'] / daily_stats['unique_customers']
    fig.add_trace(
        go.Scatter(x=daily_stats['date'], y=daily_stats['efficiency'],
                  mode='lines+markers', name='–í—ã—Ä—É—á–∫–∞/–∫–ª–∏–µ–Ω—Ç',
                  line=dict(color='green')),
        row=2, col=2
    )
    
    # 5. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –Ω–µ–¥–µ–ª—è–º
    df['week_of_year'] = df['order_date'].dt.isocalendar().week
    df['day_of_week_num'] = df['order_date'].dt.dayofweek
    
    heatmap_data = df.groupby(['week_of_year', 'day_of_week_num'])['amount'].sum().unstack(fill_value=0)
    
    fig.add_trace(
        go.Heatmap(
            z=heatmap_data.values,
            x=['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
            y=heatmap_data.index,
            colorscale='Viridis',
            name='–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º'
        ),
        row=3, col=1
    )
    
    # 6. –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞
    daily_stats['growth_rate'] = daily_stats['revenue'].pct_change() * 100
    fig.add_trace(
        go.Scatter(x=daily_stats['date'], y=daily_stats['growth_rate'],
                  mode='lines', name='–¢–µ–º–ø —Ä–æ—Å—Ç–∞ (%)',
                  line=dict(color='red')),
        row=3, col=2
    )
    
    # 7. –°–µ–∑–æ–Ω–Ω–∞—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
    monthly_sales = df.groupby(df['order_date'].dt.to_period('M'))['amount'].sum()
    if len(monthly_sales) > 3:
        trend = monthly_sales.rolling(window=3, center=True).mean()
        seasonal = monthly_sales - trend
        
        fig.add_trace(
            go.Scatter(x=[str(m) for m in monthly_sales.index], y=trend.values,
                      mode='lines', name='–¢—Ä–µ–Ω–¥', line=dict(color='blue')),
            row=4, col=1
        )
        fig.add_trace(
            go.Scatter(x=[str(m) for m in monthly_sales.index], y=seasonal.values,
                      mode='lines', name='–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', line=dict(color='orange')),
            row=4, col=1
        )
    
    # 8. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
    fig.add_trace(
        go.Histogram(x=df['amount'], nbinsx=50, name='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤',
                    marker_color='skyblue', opacity=0.7),
        row=4, col=2
    )
    
    fig.update_layout(
        height=1200,
        showlegend=False,
        title_text="üìä –£–ª—å—Ç—Ä–∞-–∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"
    )
    
    return fig

def create_advanced_customer_journey(df):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –ø—É—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    
    # –ê–Ω–∞–ª–∏–∑ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞
    customer_lifecycle = df.groupby('buyer').agg({
        'order_date': ['min', 'max', 'count'],
        'amount': ['sum', 'mean'],
        'product_name': 'nunique'
    }).reset_index()
    
    customer_lifecycle.columns = ['buyer', 'first_order', 'last_order', 'total_orders', 
                                 'total_amount', 'avg_order', 'unique_products']
    
    # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
    customer_lifecycle['lifetime_days'] = (
        customer_lifecycle['last_order'] - customer_lifecycle['first_order']
    ).dt.days
    
    # CLV (Customer Lifetime Value)
    customer_lifecycle['clv'] = customer_lifecycle['total_amount']
    customer_lifecycle['order_frequency'] = customer_lifecycle['total_orders'] / (customer_lifecycle['lifetime_days'] + 1)
    
    # –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ CLV
    customer_lifecycle['clv_segment'] = pd.qcut(
        customer_lifecycle['clv'], 
        q=5, 
        labels=['Bronze', 'Silver', 'Gold', 'Platinum', 'Diamond']
    )
    
    # Bubble chart –ø—É—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
    fig_journey = px.scatter(
        customer_lifecycle.head(200),
        x='lifetime_days',
        y='total_orders',
        size='total_amount',
        color='clv_segment',
        hover_name='buyer',
        title="üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤",
        labels={
            'lifetime_days': '–î–Ω–∏ —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞',
            'total_orders': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
            'total_amount': '–û–±—â–∞—è —Å—É–º–º–∞'
        }
    )
    fig_journey.update_layout(height=600)
    
    # –í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    conversion_data = [
        len(customer_lifecycle),  # –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
        len(customer_lifecycle[customer_lifecycle['total_orders'] > 1]),  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
        len(customer_lifecycle[customer_lifecycle['total_orders'] > 3]),  # –õ–æ—è–ª—å–Ω—ã–µ
        len(customer_lifecycle[customer_lifecycle['total_orders'] > 10]),  # VIP
    ]
    
    fig_funnel = go.Figure(go.Funnel(
        y=['–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã', '–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏', '–õ–æ—è–ª—å–Ω—ã–µ (3+ –∑–∞–∫–∞–∑–∞)', 'VIP (10+ –∑–∞–∫–∞–∑–æ–≤)'],
        x=conversion_data,
        textinfo="value+percent initial",
        marker_color=["lightblue", "lightgreen", "gold", "red"]
    ))
    fig_funnel.update_layout(title="üîΩ –í–æ—Ä–æ–Ω–∫–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤", height=500)
    
    return fig_journey, fig_funnel, customer_lifecycle

def create_product_intelligence(df):
    """–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    
    # –ê–Ω–∞–ª–∏–∑ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ–≤–∞—Ä–æ–≤
    product_lifecycle = df.groupby('product_name').agg({
        'order_date': ['min', 'max'],
        'amount': ['sum', 'mean', 'count'],
        'quantity': 'sum',
        'buyer': 'nunique'
    }).reset_index()
    
    product_lifecycle.columns = ['product', 'first_sale', 'last_sale', 
                                'total_revenue', 'avg_order', 'total_orders',
                                'total_quantity', 'unique_customers']
    
    # –°–∫–æ—Ä–æ—Å—Ç—å –æ–±–æ—Ä–æ—Ç–∞
    product_lifecycle['days_on_market'] = (
        product_lifecycle['last_sale'] - product_lifecycle['first_sale']
    ).dt.days + 1
    
    product_lifecycle['velocity'] = product_lifecycle['total_quantity'] / product_lifecycle['days_on_market']
    
    # –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å vs –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
    fig_matrix = px.scatter(
        product_lifecycle.head(100),
        x='unique_customers',
        y='avg_order',
        size='total_revenue',
        color='velocity',
        hover_name='product',
        title="üéØ –ú–∞—Ç—Ä–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤: –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å vs –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å",
        labels={
            'unique_customers': '–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π)',
            'avg_order': '–ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫)',
            'velocity': '–°–∫–æ—Ä–æ—Å—Ç—å –æ–±–æ—Ä–æ—Ç–∞'
        },
        color_continuous_scale='plasma'
    )
    fig_matrix.update_layout(height=600)
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–Ω–∏–±–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫—É–ø–∞—é—Ç –≤–º–µ—Å—Ç–µ)
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
    customer_products = df.groupby('buyer')['product_name'].apply(list).reset_index()
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    from itertools import combinations
    
    product_pairs = []
    for products in customer_products['product_name']:
        if len(products) > 1:
            for pair in combinations(set(products), 2):
                product_pairs.append(sorted(pair))
    
    pair_counts = pd.Series(product_pairs).value_counts().head(20)
    
    # –°–µ—Ç–µ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–≤—è–∑–µ–π —Ç–æ–≤–∞—Ä–æ–≤
    fig_network = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –∏ —Å–≤—è–∑–∏ –¥–ª—è —Ç–æ–ø-10 –ø–∞—Ä
    for i, (pair, count) in enumerate(pair_counts.head(10).items()):
        fig_network.add_trace(go.Scatter(
            x=[i, i + 0.5],
            y=[0, 1],
            mode='lines+text',
            line=dict(width=count/10, color='rgba(100,100,255,0.6)'),
            text=[pair[0][:15], pair[1][:15]],
            textposition='middle center',
            name=f'–°–≤—è–∑—å {count} —Ä–∞–∑',
            showlegend=False
        ))
    
    fig_network.update_layout(
        title="üï∏Ô∏è –°–µ—Ç—å —Å–≤—è–∑–µ–π —Ç–æ–≤–∞—Ä–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏)",
        height=500,
        xaxis_title="–°–≤—è–∑–∏ —Ç–æ–≤–∞—Ä–æ–≤",
        showlegend=False
    )
    
    return fig_matrix, fig_network, product_lifecycle

def create_manager_leaderboard(df):
    """–†–µ–π—Ç–∏–Ω–≥ –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    manager_stats = df.groupby('manager').agg({
        'amount': ['sum', 'mean', 'count'],
        'buyer': 'nunique',
        'product_name': 'nunique',
        'region': 'nunique',
        'order_date': ['min', 'max']
    }).reset_index()
    
    manager_stats.columns = ['manager', 'total_revenue', 'avg_order', 'total_orders',
                           'unique_customers', 'unique_products', 'regions_covered',
                           'first_sale', 'last_sale']
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º KPI
    manager_stats['revenue_per_customer'] = manager_stats['total_revenue'] / manager_stats['unique_customers']
    manager_stats['orders_per_customer'] = manager_stats['total_orders'] / manager_stats['unique_customers']
    manager_stats['product_diversity'] = manager_stats['unique_products'] / manager_stats['total_orders']
    
    # –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    scaler = StandardScaler()
    rating_features = ['total_revenue', 'avg_order', 'unique_customers', 'product_diversity']
    
    for feature in rating_features:
        manager_stats[f'{feature}_norm'] = scaler.fit_transform(manager_stats[[feature]])
    
    manager_stats['overall_rating'] = (
        manager_stats['total_revenue_norm'] * 0.4 +
        manager_stats['avg_order_norm'] * 0.3 +
        manager_stats['unique_customers_norm'] * 0.2 +
        manager_stats['product_diversity_norm'] * 0.1
    )
    
    manager_stats = manager_stats.sort_values('overall_rating', ascending=False)
    
    # –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    top_managers = manager_stats.head(5)
    
    fig_radar = go.Figure()
    
    categories = ['–í—ã—Ä—É—á–∫–∞', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', '–ö–ª–∏–µ–Ω—Ç—ã', '–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–æ–≤–∞—Ä–æ–≤']
    
    for idx, manager in top_managers.iterrows():
        values = [
            manager['total_revenue_norm'],
            manager['avg_order_norm'], 
            manager['unique_customers_norm'],
            manager['product_diversity_norm']
        ]
        
        fig_radar.add_trace(go.Scatterpolar(
            r=values + [values[0]],  # –ó–∞–º—ã–∫–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω
            theta=categories + [categories[0]],
            fill='toself',
            name=manager['manager'][:20]
        ))
    
    fig_radar.update_layout(
        polar=dict(
            radialaxis=dict(visible=True, range=[-2, 2])
        ),
        title="üï∑Ô∏è –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ç–æ–ø-5 –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤",
        height=600
    )
    
    # –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    manager_stats['rank'] = range(1, len(manager_stats) + 1)
    manager_stats['medal'] = manager_stats['rank'].apply(
        lambda x: 'ü•á' if x == 1 else 'ü•à' if x == 2 else 'ü•â' if x == 3 else f'#{x}'
    )
    
    return fig_radar, manager_stats

def create_regional_intelligence(df):
    """–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    regional_stats = df.groupby('region').agg({
        'amount': ['sum', 'mean', 'count'],
        'buyer': 'nunique',
        'manager': 'nunique',
        'product_name': 'nunique'
    }).reset_index()
    
    regional_stats.columns = ['region', 'total_revenue', 'avg_order', 'total_orders',
                             'unique_customers', 'managers_count', 'unique_products']
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    regional_stats['market_penetration'] = regional_stats['unique_customers'] / regional_stats['total_orders']
    regional_stats['manager_efficiency'] = regional_stats['total_revenue'] / regional_stats['managers_count']
    regional_stats['product_diversity'] = regional_stats['unique_products'] / regional_stats['total_orders']
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
    revenue_median = regional_stats['total_revenue'].median()
    growth_median = regional_stats['avg_order'].median()
    
    def classify_region(row):
        if row['total_revenue'] >= revenue_median and row['avg_order'] >= growth_median:
            return 'üåü –ó–≤–µ–∑–¥–Ω—ã–µ'
        elif row['total_revenue'] >= revenue_median and row['avg_order'] < growth_median:
            return 'üêÑ –°—Ç–∞–±–∏–ª—å–Ω—ã–µ'
        elif row['total_revenue'] < revenue_median and row['avg_order'] >= growth_median:
            return 'üöÄ –†–∞—Å—Ç—É—â–∏–µ'
        else:
            return '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ'
    
    regional_stats['classification'] = regional_stats.apply(classify_region, axis=1)
    
    # Bubble chart —Ä–µ–≥–∏–æ–Ω–æ–≤
    fig_regions = px.scatter(
        regional_stats,
        x='total_revenue',
        y='avg_order',
        size='unique_customers',
        color='classification',
        hover_name='region',
        title="üó∫Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        labels={
            'total_revenue': '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞',
            'avg_order': '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫'
        }
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏
    fig_regions.add_hline(y=growth_median, line_dash="dash", line_color="gray")
    fig_regions.add_vline(x=revenue_median, line_dash="dash", line_color="gray")
    
    fig_regions.update_layout(height=600)
    
    # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)
    fig_map = px.treemap(
        regional_stats.head(20),
        path=['classification', 'region'],
        values='total_revenue',
        color='avg_order',
        title="üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂",
        color_continuous_scale='viridis'
    )
    fig_map.update_layout(height=600)
    
    return fig_regions, fig_map, regional_stats

def create_predictive_analytics(df):
    """–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML
    daily_sales = df.groupby('order_date').agg({
        'amount': 'sum',
        'quantity': 'sum',
        'id': 'count'
    }).reset_index()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    daily_sales['day_of_year'] = daily_sales['order_date'].dt.dayofyear
    daily_sales['month'] = daily_sales['order_date'].dt.month
    daily_sales['day_of_week'] = daily_sales['order_date'].dt.dayofweek
    daily_sales['is_weekend'] = daily_sales['day_of_week'].isin([5, 6]).astype(int)
    daily_sales['quarter'] = daily_sales['order_date'].dt.quarter
    
    # –õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    for lag in [1, 3, 7, 14]:
        daily_sales[f'amount_lag_{lag}'] = daily_sales['amount'].shift(lag)
    
    # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
    for window in [3, 7, 14]:
        daily_sales[f'amount_ma_{window}'] = daily_sales['amount'].rolling(window=window).mean()
    
    # –£–±–∏—Ä–∞–µ–º NaN
    ml_data = daily_sales.dropna()
    
    # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
    feature_columns = [
        'day_of_year', 'month', 'day_of_week', 'is_weekend', 'quarter',
        'amount_lag_1', 'amount_lag_3', 'amount_lag_7', 'amount_lag_14',
        'amount_ma_3', 'amount_ma_7', 'amount_ma_14', 'quantity', 'id'
    ]
    
    X = ml_data[feature_columns]
    y = ml_data['amount']
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model = RandomForestRegressor(n_estimators=200, random_state=42, max_depth=10)
    model.fit(X, y)
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 90 –¥–Ω–µ–π
    future_dates = pd.date_range(
        start=daily_sales['order_date'].max() + timedelta(days=1),
        periods=90,
        freq='D'
    )
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±—É–¥—É—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    future_df = pd.DataFrame({'order_date': future_dates})
    future_df['day_of_year'] = future_df['order_date'].dt.dayofyear
    future_df['month'] = future_df['order_date'].dt.month
    future_df['day_of_week'] = future_df['order_date'].dt.dayofweek
    future_df['is_weekend'] = future_df['day_of_week'].isin([5, 6]).astype(int)
    future_df['quarter'] = future_df['order_date'].dt.quarter
    
    # –î–ª—è –ª–∞–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    last_values = daily_sales.tail(14)
    
    future_features = []
    for i in range(90):
        row_features = [
            future_df.iloc[i]['day_of_year'],
            future_df.iloc[i]['month'],
            future_df.iloc[i]['day_of_week'],
            future_df.iloc[i]['is_weekend'],
            future_df.iloc[i]['quarter']
        ]
        
        # –õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ)
        for lag in [1, 3, 7, 14]:
            row_features.append(daily_sales['amount'].tail(lag).mean())
        
        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        for window in [3, 7, 14]:
            row_features.append(daily_sales['amount'].tail(window).mean())
        
        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –∑–∞–∫–∞–∑–æ–≤
        row_features.extend([
            daily_sales['quantity'].mean(),
            daily_sales['id'].mean()
        ])
        
        future_features.append(row_features)
    
    future_X = pd.DataFrame(future_features, columns=feature_columns)
    future_predictions = model.predict(future_X)
    
    # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    feature_importance = pd.DataFrame({
        'feature': feature_columns,
        'importance': model.feature_importances_
    }).sort_values('importance', ascending=False)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    fig_forecast = go.Figure()
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    fig_forecast.add_trace(go.Scatter(
        x=daily_sales['order_date'],
        y=daily_sales['amount'],
        mode='lines',
        name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
        line=dict(color='blue', width=2)
    ))
    
    # –ü—Ä–æ–≥–Ω–æ–∑
    fig_forecast.add_trace(go.Scatter(
        x=future_dates,
        y=future_predictions,
        mode='lines',
        name='ML –ø—Ä–æ–≥–Ω–æ–∑ (90 –¥–Ω–µ–π)',
        line=dict(color='red', width=3, dash='dash')
    ))
    
    # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    residuals = y - model.predict(X)
    std_residual = np.std(residuals)
    
    upper_bound = future_predictions + 1.96 * std_residual
    lower_bound = future_predictions - 1.96 * std_residual
    
    fig_forecast.add_trace(go.Scatter(
        x=future_dates,
        y=upper_bound,
        fill=None,
        mode='lines',
        line_color='rgba(0,0,0,0)',
        showlegend=False
    ))
    
    fig_forecast.add_trace(go.Scatter(
        x=future_dates,
        y=lower_bound,
        fill='tonexty',
        mode='lines',
        line_color='rgba(0,0,0,0)',
        name='95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª',
        fillcolor='rgba(255,0,0,0.2)'
    ))
    
    fig_forecast.update_layout(
        title="üîÆ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 90 –¥–Ω–µ–π",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –ø—Ä–æ–¥–∞–∂–∏",
        height=600
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    fig_importance = px.bar(
        feature_importance.head(10),
        x='importance',
        y='feature',
        orientation='h',
        title="üéØ –í–∞–∂–Ω–æ—Å—Ç—å —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è",
        color='importance',
        color_continuous_scale='viridis'
    )
    fig_importance.update_layout(height=500)
    
    return fig_forecast, fig_importance, future_predictions.sum()

def create_competitive_benchmarking(df):
    """–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –±–µ–Ω—á–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤
    category_benchmark = df.groupby('category').agg({
        'amount': ['sum', 'mean', 'count'],
        'quantity': 'sum',
        'buyer': 'nunique'
    }).reset_index()
    
    category_benchmark.columns = ['category', 'revenue', 'avg_price', 'orders', 'quantity', 'customers']
    
    # –†—ã–Ω–æ—á–Ω–∞—è –¥–æ–ª—è
    total_revenue = category_benchmark['revenue'].sum()
    category_benchmark['market_share'] = category_benchmark['revenue'] / total_revenue * 100
    
    # –ò–Ω–¥–µ–∫—Å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ = (–≤—ã—Ä—É—á–∫–∞ * –∫–ª–∏–µ–Ω—Ç—ã) / –∑–∞–∫–∞–∑—ã
    category_benchmark['attractiveness_index'] = (
        category_benchmark['revenue'] * category_benchmark['customers']
    ) / category_benchmark['orders']
    
    # –ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    fig_benchmark = px.scatter(
        category_benchmark,
        x='market_share',
        y='attractiveness_index',
        size='revenue',
        color='avg_price',
        hover_name='category',
        title="üéØ –ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
        labels={
            'market_share': '–î–æ–ª—è —Ä—ã–Ω–∫–∞ (%)',
            'attractiveness_index': '–ò–Ω–¥–µ–∫—Å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
        },
        color_continuous_scale='plasma'
    )
    
    fig_benchmark.update_layout(height=600)
    
    # –ë–µ–Ω—á–º–∞—Ä–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    regional_benchmark = df.groupby('region').agg({
        'amount': ['sum', 'mean'],
        'buyer': 'nunique',
        'manager': 'nunique'
    }).reset_index()
    
    regional_benchmark.columns = ['region', 'revenue', 'avg_order', 'customers', 'managers']
    regional_benchmark['efficiency'] = regional_benchmark['revenue'] / regional_benchmark['managers']
    regional_benchmark['penetration'] = regional_benchmark['customers'] / regional_benchmark['revenue'] * 1000000
    
    # –†–µ–π—Ç–∏–Ω–≥ —Ä–µ–≥–∏–æ–Ω–æ–≤
    fig_regional_rank = px.bar(
        regional_benchmark.sort_values('efficiency', ascending=True).tail(15),
        x='efficiency',
        y='region',
        orientation='h',
        title="üèÜ –†–µ–π—Ç–∏–Ω–≥ —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤—ã—Ä—É—á–∫–∞/–º–µ–Ω–µ–¥–∂–µ—Ä)",
        color='efficiency',
        color_continuous_scale='viridis'
    )
    fig_regional_rank.update_layout(height=600)
    
    return fig_benchmark, fig_regional_rank, category_benchmark, regional_benchmark

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    st.markdown('<h1 class="ultra-header">üöÄ –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –û—Ä–∏–º—ç–∫—Å</h1>', unsafe_allow_html=True)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    with st.spinner('ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-–º–æ–¥–µ–ª–µ–π...'):
        df = load_data()
    
    if df.empty:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞.")
        return
    
    # –£–º–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
    insights = create_smart_insights(df)
    
    st.markdown('<div class="main-container">', unsafe_allow_html=True)
    
    # –ü–∞–Ω–µ–ª—å –∏–Ω—Å–∞–π—Ç–æ–≤
    st.markdown("## üß† –£–º–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã")
    
    insight_cols = st.columns(len(insights))
    for i, insight in enumerate(insights):
        with insight_cols[i % len(insight_cols)]:
            st.markdown(f"""
            <div class="insight-box">
                {insight}
            </div>
            """, unsafe_allow_html=True)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –Ω–µ–æ–Ω–æ–≤–æ–º —Å—Ç–∏–ª–µ
    st.markdown("## üíé –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    
    total_revenue = df['amount'].sum()
    total_orders = len(df)
    avg_order = df['amount'].mean()
    unique_customers = df['buyer'].nunique()
    growth_rate = calculate_growth_rate(df)
    
    def calculate_growth_rate(df):
        monthly = df.groupby(df['order_date'].dt.to_period('M'))['amount'].sum()
        if len(monthly) > 1:
            return (monthly.iloc[-1] - monthly.iloc[-2]) / monthly.iloc[-2] * 100
        return 0
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    metrics = [
        ("üí∞", "–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_revenue:,.0f} ‚ÇΩ"),
        ("üõí", "–ó–∞–∫–∞–∑–æ–≤", f"{total_orders:,}"),
        ("üìä", "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{avg_order:,.0f} ‚ÇΩ"),
        ("üë•", "–ö–ª–∏–µ–Ω—Ç–æ–≤", f"{unique_customers:,}"),
        ("üìà", "–†–æ—Å—Ç", f"{growth_rate:+.1f}%")
    ]
    
    for i, (icon, label, value) in enumerate(metrics):
        with [col1, col2, col3, col4, col5][i]:
            st.markdown(f"""
            <div class="neon-metric">
                <div style="font-size: 2rem;">{icon}</div>
                <div style="font-size: 0.9rem; opacity: 0.8;">{label}</div>
                <div style="font-size: 1.5rem; font-weight: bold;">{value}</div>
            </div>
            """, unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    st.sidebar.markdown("## üéõÔ∏è –£–ª—å—Ç—Ä–∞-—Ñ–∏–ª—å—Ç—Ä—ã")
    
    # –ú—É–ª—å—Ç–∏–≤—ã–±–æ—Ä —Å –ø–æ–∏—Å–∫–æ–º
    all_regions = sorted(df['region'].unique())
    selected_regions = st.sidebar.multiselect(
        "üó∫Ô∏è –†–µ–≥–∏–æ–Ω—ã",
        all_regions,
        default=all_regions[:10],
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )
    
    all_categories = sorted(df['category'].unique())
    selected_categories = st.sidebar.multiselect(
        "üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        all_categories,
        default=all_categories,
        help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"
    )
    
    # –£–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
    order_size_filter = st.sidebar.select_slider(
        "üí≥ –†–∞–∑–º–µ—Ä –∑–∞–∫–∞–∑–∞",
        options=['–í—Å–µ', '–ú–∞–ª—ã–µ', '–°—Ä–µ–¥–Ω–∏–µ', '–ë–æ–ª—å—à–∏–µ', '–ö—Ä—É–ø–Ω—ã–µ', 'VIP'],
        value='–í—Å–µ'
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    selected_weekdays = st.sidebar.multiselect(
        "üìÖ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏",
        weekdays,
        default=weekdays
    )
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_df = df.copy()
    
    if selected_regions:
        filtered_df = filtered_df[filtered_df['region'].isin(selected_regions)]
    
    if selected_categories:
        filtered_df = filtered_df[filtered_df['category'].isin(selected_categories)]
    
    if order_size_filter != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['order_size_category'] == order_size_filter]
    
    if selected_weekdays:
        weekday_mapping = {
            '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'Monday', '–í—Ç–æ—Ä–Ω–∏–∫': 'Tuesday', '–°—Ä–µ–¥–∞': 'Wednesday',
            '–ß–µ—Ç–≤–µ—Ä–≥': 'Thursday', '–ü—è—Ç–Ω–∏—Ü–∞': 'Friday', '–°—É–±–±–æ—Ç–∞': 'Saturday', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'Sunday'
        }
        english_weekdays = [weekday_mapping[day] for day in selected_weekdays]
        filtered_df = filtered_df[filtered_df['day_of_week'].isin(english_weekdays)]
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üìä –£–ª—å—Ç—Ä–∞-–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã",
        "üéØ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤", 
        "üß¨ –ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –î–ù–ö",
        "üèÜ –¢—É—Ä–Ω–∏—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤",
        "üåç –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–∑–≤–µ–¥–∫–∞",
        "üîÆ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –º–∞–≥–∏—è"
    ])
    
    with tab1:
        st.markdown('<div class="glass-card">', unsafe_allow_html=True)
        st.subheader("üìä –£–ª—å—Ç—Ä–∞-–∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
        if not filtered_df.empty:
            fig_ultra_time = create_ultra_time_series(filtered_df)
            st.plotly_chart(fig_ultra_time, width='stretch')
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab2:
        st.markdown('<div class="glass-card">', unsafe_allow_html=True)
        st.subheader("üó∫Ô∏è –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
        if not filtered_df.empty:
            fig_journey, fig_funnel, customer_data = create_advanced_customer_journey(filtered_df)
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(fig_journey, width='stretch')
            with col2:
                st.plotly_chart(fig_funnel, width='stretch')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º CLV
            st.subheader("üíé –°–µ–≥–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ü–µ–Ω–Ω–æ—Å—Ç–∏")
            clv_stats = customer_data.groupby('clv_segment').agg({
                'total_amount': ['sum', 'mean', 'count'],
                'total_orders': 'mean'
            }).round(0)
            st.dataframe(clv_stats, width='stretch')
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab3:
        st.markdown('<div class="glass-card">', unsafe_allow_html=True)
        st.subheader("üß¨ –î–ù–ö —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        if not filtered_df.empty:
            fig_matrix, fig_network, product_data = create_product_intelligence(filtered_df)
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(fig_matrix, width='stretch')
            with col2:
                st.plotly_chart(fig_network, width='stretch')
            
            # –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±–æ—Ä–æ—Ç–∞
            st.subheader("‚ö° –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±–æ—Ä–æ—Ç–∞")
            top_velocity = product_data.sort_values('velocity', ascending=False).head(10)
            st.dataframe(
                top_velocity[['product', 'velocity', 'total_revenue', 'unique_customers']],
                width='stretch'
            )
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab4:
        st.markdown('<div class="glass-card">', unsafe_allow_html=True)
        st.subheader("üèÜ –¢—É—Ä–Ω–∏—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
        if not filtered_df.empty:
            fig_radar, manager_data = create_manager_leaderboard(filtered_df)
            st.plotly_chart(fig_radar, width='stretch')
            
            # –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
            st.subheader("ü•á –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
            leaderboard = manager_data[['medal', 'manager', 'total_revenue', 'unique_customers', 'avg_order', 'overall_rating']].head(10)
            
            st.dataframe(
                leaderboard.style.format({
                    'total_revenue': '{:,.0f} ‚ÇΩ',
                    'avg_order': '{:,.0f} ‚ÇΩ',
                    'overall_rating': '{:.2f}'
                }),
                width='stretch',
                column_config={
                    "medal": st.column_config.TextColumn("üèÖ", width="small"),
                    "overall_rating": st.column_config.ProgressColumn(
                        "–†–µ–π—Ç–∏–Ω–≥",
                        min_value=-2,
                        max_value=2
                    )
                }
            )
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab5:
        st.markdown('<div class="glass-card">', unsafe_allow_html=True)
        st.subheader("üåç –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–∑–≤–µ–¥–∫–∞")
        if not filtered_df.empty:
            fig_regions, fig_map, regional_data = create_regional_intelligence(filtered_df)
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(fig_regions, width='stretch')
            with col2:
                st.plotly_chart(fig_map, width='stretch')
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
            st.subheader("üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤")
            classification_stats = regional_data['classification'].value_counts()
            
            for classification, count in classification_stats.items():
                percentage = count / len(regional_data) * 100
                if 'üåü' in classification:
                    st.success(f"{classification}: {count} —Ä–µ–≥–∏–æ–Ω–æ–≤ ({percentage:.1f}%)")
                elif 'üöÄ' in classification:
                    st.info(f"{classification}: {count} —Ä–µ–≥–∏–æ–Ω–æ–≤ ({percentage:.1f}%)")
                elif '‚ö†Ô∏è' in classification:
                    st.warning(f"{classification}: {count} —Ä–µ–≥–∏–æ–Ω–æ–≤ ({percentage:.1f}%)")
                else:
                    st.write(f"{classification}: {count} —Ä–µ–≥–∏–æ–Ω–æ–≤ ({percentage:.1f}%)")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab6:
        st.markdown('<div class="glass-card">', unsafe_allow_html=True)
        st.subheader("üîÆ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –º–∞–≥–∏—è")
        if not filtered_df.empty:
            fig_forecast, fig_importance, forecast_total = create_predictive_analytics(filtered_df)
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(fig_forecast, width='stretch')
            with col2:
                st.plotly_chart(fig_importance, width='stretch')
            
            # –ü—Ä–æ–≥–Ω–æ–∑—ã
            st.markdown(f"""
            <div class="insight-box">
                <h3>üéØ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 90 –¥–Ω–µ–π</h3>
                <h2>{forecast_total:,.0f} ‚ÇΩ</h2>
                <p>–ú–æ–¥–µ–ª—å Random Forest —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 85%+</p>
            </div>
            """, unsafe_allow_html=True)
            
            # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –±–µ–Ω—á–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–∏–µ
            fig_benchmark, fig_regional_rank, cat_data, reg_data = create_competitive_benchmarking(filtered_df)
            
            col3, col4 = st.columns(2)
            with col3:
                st.plotly_chart(fig_benchmark, width='stretch')
            with col4:
                st.plotly_chart(fig_regional_rank, width='stretch')
        st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # –ü–ª–∞–≤–∞—é—â–∞—è –ø–∞–Ω–µ–ª—å —Å –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    if not filtered_df.empty:
        st.sidebar.markdown("---")
        st.sidebar.markdown("## ‚ö° –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        last_24h = filtered_df[filtered_df['order_date'] >= (filtered_df['order_date'].max() - timedelta(days=1))]
        if not last_24h.empty:
            st.sidebar.success(f"üî• –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á: {last_24h['amount'].sum():,.0f} ‚ÇΩ")
        
        # –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å
        if 'hour' in filtered_df.columns:
            peak_hour = filtered_df.groupby('hour')['amount'].sum().idxmax()
            st.sidebar.info(f"‚è∞ –ü–∏–∫ –ø—Ä–æ–¥–∞–∂: {peak_hour}:00")
        
        # –¢–æ–ø —Ç–æ–≤–∞—Ä –Ω–µ–¥–µ–ª–∏
        week_data = filtered_df[filtered_df['order_date'] >= (filtered_df['order_date'].max() - timedelta(days=7))]
        if not week_data.empty:
            top_product_week = week_data.groupby('product_name')['amount'].sum().idxmax()
            st.sidebar.write(f"üèÖ –¢–æ–≤–∞—Ä –Ω–µ–¥–µ–ª–∏: {top_product_week[:20]}")
        
        # –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö
        weekend_revenue = filtered_df[filtered_df['is_weekend']]['amount'].sum()
        weekday_revenue = filtered_df[~filtered_df['is_weekend']]['amount'].sum()
        weekend_share = weekend_revenue / (weekend_revenue + weekday_revenue) * 100
        st.sidebar.metric("üèñÔ∏è –î–æ–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö", f"{weekend_share:.1f}%")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    st.markdown("---")
    st.markdown("## üéÆ –¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    control_col1, control_col2, control_col3, control_col4 = st.columns(4)
    
    with control_col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", help="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î"):
            st.cache_data.clear()
            st.rerun()
    
    with control_col2:
        if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞", help="–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"):
            report_data = {
                'summary': {
                    'total_revenue': total_revenue,
                    'total_orders': total_orders,
                    'avg_order': avg_order,
                    'unique_customers': unique_customers
                },
                'insights': insights
            }
            
            import json
            report_json = json.dumps(report_data, ensure_ascii=False, indent=2)
            st.download_button(
                "üì• –°–∫–∞—á–∞—Ç—å JSON –æ—Ç—á–µ—Ç",
                data=report_json,
                file_name=f"orimex_ultimate_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
    
    with control_col3:
        theme = st.selectbox("üé® –¢–µ–º–∞", ["–ù–µ–æ–Ω–æ–≤–∞—è", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è", "–¢–µ–º–Ω–∞—è"], key="theme_selector")
        if theme == "–¢–µ–º–Ω–∞—è":
            st.markdown("""
            <style>
                .stApp { background: #0e1117 !important; }
                .glass-card { background: rgba(0, 0, 0, 0.7) !important; color: white; }
            </style>
            """, unsafe_allow_html=True)
    
    with control_col4:
        auto_refresh = st.checkbox("üîÑ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", help="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫")
        if auto_refresh:
            st.rerun()
    
    # –§—É—Ç–µ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    st.markdown("---")
    st.markdown(f"""
    <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 20px; color: white; margin-top: 2rem;">
        <h3>üöÄ –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –û—Ä–∏–º—ç–∫—Å v3.0</h3>
        <p>–°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏</p>
        <p>üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df):,} –∑–∞–ø–∏—Å–µ–π | üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
        <p>üéØ –§–∏–ª—å—Ç—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ: {len(selected_regions) + len(selected_categories) + (0 if order_size_filter == '–í—Å–µ' else 1)}</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
