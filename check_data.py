#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
"""

import sqlite3
import pandas as pd
from datetime import datetime

def check_database():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        conn = sqlite3.connect('orimex_orders.db')
        
        print("üîç –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –û–†–ò–ú–≠–ö–°")
        print("=" * 50)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM contractors')
        contractors_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM products')
        products_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM orders')
        orders_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT SUM(amount), AVG(amount), MIN(amount), MAX(amount) FROM orders WHERE amount IS NOT NULL')
        amount_stats = cursor.fetchone()
        
        cursor.execute('SELECT MIN(order_date), MAX(order_date) FROM orders')
        date_range = cursor.fetchone()
        
        print(f"üìä –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {contractors_count:,}")
        print(f"üì¶ –ü—Ä–æ–¥—É–∫—Ç–æ–≤: {products_count:,}")
        print(f"üõí –ó–∞–∫–∞–∑–æ–≤: {orders_count:,}")
        print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {amount_stats[0]:,.2f} —Ä—É–±." if amount_stats[0] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—É–º–º–∞—Ö")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: {amount_stats[1]:,.2f} —Ä—É–±." if amount_stats[1] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        print(f"üìâ –ú–∏–Ω. –∑–∞–∫–∞–∑: {amount_stats[2]:,.2f} —Ä—É–±." if amount_stats[2] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        print(f"üìà –ú–∞–∫—Å. –∑–∞–∫–∞–∑: {amount_stats[3]:,.2f} —Ä—É–±." if amount_stats[3] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_range[0]} - {date_range[1]}" if date_range[0] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞—Ç–∞—Ö")
        
        print("\nüè¢ –¢–û–ü-5 –ö–û–ù–¢–†–ê–ì–ï–ù–¢–û–í –ü–û –°–£–ú–ú–ï:")
        print("-" * 40)
        top_contractors = pd.read_sql_query('''
        SELECT c.head_contractor, c.buyer, SUM(o.amount) as total_amount, COUNT(o.id) as order_count
        FROM orders o
        JOIN contractors c ON o.contractor_id = c.id
        WHERE o.amount IS NOT NULL
        GROUP BY c.head_contractor, c.buyer
        ORDER BY total_amount DESC
        LIMIT 5
        ''', conn)
        
        for idx, row in top_contractors.iterrows():
            print(f"{idx+1}. {row['buyer']} - {row['total_amount']:,.0f} —Ä—É–±. ({row['order_count']} –∑–∞–∫–∞–∑–æ–≤)")
        
        print("\nüì¶ –¢–û–ü-5 –¢–û–í–ê–†–û–í –ü–û –°–£–ú–ú–ï:")
        print("-" * 40)
        top_products = pd.read_sql_query('''
        SELECT p.name, p.category, SUM(o.amount) as total_amount, COUNT(o.id) as order_count
        FROM orders o
        JOIN products p ON o.product_id = p.id
        WHERE o.amount IS NOT NULL
        GROUP BY p.name, p.category
        ORDER BY total_amount DESC
        LIMIT 5
        ''', conn)
        
        for idx, row in top_products.iterrows():
            print(f"{idx+1}. {row['name']} ({row['category']}) - {row['total_amount']:,.0f} —Ä—É–±. ({row['order_count']} –∑–∞–∫–∞–∑–æ–≤)")
        
        print("\nüó∫Ô∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ï–ì–ò–û–ù–ê–ú:")
        print("-" * 40)
        regions = pd.read_sql_query('''
        SELECT c.region, SUM(o.amount) as total_amount, COUNT(o.id) as order_count
        FROM orders o
        JOIN contractors c ON o.contractor_id = c.id
        WHERE o.amount IS NOT NULL
        GROUP BY c.region
        ORDER BY total_amount DESC
        ''', conn)
        
        for idx, row in regions.iterrows():
            print(f"{row['region']}: {row['total_amount']:,.0f} —Ä—É–±. ({row['order_count']} –∑–∞–∫–∞–∑–æ–≤)")
        
        print("\nüìà –î–ò–ù–ê–ú–ò–ö–ê –ü–û –ú–ï–°–Ø–¶–ê–ú:")
        print("-" * 40)
        monthly = pd.read_sql_query('''
        SELECT 
            strftime('%Y-%m', order_date) as month,
            SUM(amount) as total_amount,
            COUNT(id) as order_count
        FROM orders 
        WHERE amount IS NOT NULL
        GROUP BY strftime('%Y-%m', order_date)
        ORDER BY month
        ''', conn)
        
        for idx, row in monthly.iterrows():
            print(f"{row['month']}: {row['total_amount']:,.0f} —Ä—É–±. ({row['order_count']} –∑–∞–∫–∞–∑–æ–≤)")
        
        conn.close()
        
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üåê –î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8501")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    check_database()
