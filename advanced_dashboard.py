#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–æ–≤ –û—Ä–∏–º—ç–∫—Å
"""

import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.figure_factory as ff
from datetime import datetime, timedelta
import numpy as np
from scipy import stats
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –û—Ä–∏–º—ç–∫—Å",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        background: linear-gradient(90deg, #1f77b4, #ff7f0e);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    .metric-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        margin: 0.5rem 0;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        color: white;
    }
    .kpi-card {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem;
        text-align: center;
        color: white;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    .sidebar .sidebar-content {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    .stAlert {
        border-radius: 10px;
    }
    .css-1d391kg {
        padding-top: 1rem;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data(ttl=300)
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('orimex_orders.db')
        
        query = '''
        SELECT 
            o.id,
            o.order_date,
            o.quantity,
            o.amount,
            c.head_contractor,
            c.buyer,
            c.manager,
            c.region,
            p.name as product_name,
            p.characteristics,
            p.category
        FROM orders o
        JOIN contractors c ON o.contractor_id = c.id
        JOIN products p ON o.product_id = p.id
        WHERE o.amount IS NOT NULL AND o.amount > 0
        '''
        
        df = pd.read_sql_query(query, conn)
        df['order_date'] = pd.to_datetime(df['order_date'])
        df['month'] = df['order_date'].dt.to_period('M')
        df['week'] = df['order_date'].dt.to_period('W')
        df['day_of_week'] = df['order_date'].dt.day_name()
        df['quarter'] = df['order_date'].dt.to_period('Q')
        
        conn.close()
        return df
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

@st.cache_data
def get_advanced_stats(df):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if df.empty:
        return {}
    
    return {
        'total_orders': len(df),
        'total_amount': df['amount'].sum(),
        'avg_order_amount': df['amount'].mean(),
        'median_order_amount': df['amount'].median(),
        'std_order_amount': df['amount'].std(),
        'unique_products': df['product_name'].nunique(),
        'unique_contractors': df['head_contractor'].nunique(),
        'unique_regions': df['region'].nunique(),
        'unique_managers': df['manager'].nunique(),
        'date_range': (df['order_date'].min(), df['order_date'].max()),
        'top_order': df['amount'].max(),
        'conversion_rate': len(df[df['amount'] > df['amount'].mean()]) / len(df) * 100,
        'growth_rate': calculate_growth_rate(df),
        'seasonal_factor': calculate_seasonality(df)
    }

def calculate_growth_rate(df):
    """–†–∞—Å—á–µ—Ç —Ç–µ–º–ø–∞ —Ä–æ—Å—Ç–∞"""
    monthly = df.groupby(df['order_date'].dt.to_period('M'))['amount'].sum().reset_index()
    if len(monthly) < 2:
        return 0
    
    monthly['month_num'] = range(len(monthly))
    if len(monthly) > 1:
        correlation = monthly['month_num'].corr(monthly['amount'])
        return correlation * 100
    return 0

def calculate_seasonality(df):
    """–†–∞—Å—á–µ—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏"""
    monthly = df.groupby(df['order_date'].dt.month)['amount'].mean()
    return monthly.std() / monthly.mean() * 100

def create_advanced_time_series(df):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤"""
    fig = make_subplots(
        rows=3, cols=2,
        subplot_titles=(
            '–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º',
            '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞', '–¢—Ä–µ–Ω–¥ —Ä–æ—Å—Ç–∞',
            '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏', '–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º'
        ),
        specs=[[{"secondary_y": False}, {"secondary_y": False}],
               [{"secondary_y": False}, {"secondary_y": False}],
               [{"type": "bar"}, {"type": "bar"}]],
        vertical_spacing=0.08
    )
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    daily_stats = df.groupby('order_date').agg({
        'amount': ['sum', 'mean', 'count']
    }).reset_index()
    daily_stats.columns = ['date', 'total_amount', 'avg_amount', 'order_count']
    
    # 1. –°—É–º–º–∞ –ø–æ –¥–Ω—è–º —Å —Ç—Ä–µ–Ω–¥–æ–º
    fig.add_trace(
        go.Scatter(x=daily_stats['date'], y=daily_stats['total_amount'],
                  mode='lines+markers', name='–°—É–º–º–∞', line=dict(color='#1f77b4')),
        row=1, col=1
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥
    x_numeric = np.arange(len(daily_stats))
    z = np.polyfit(x_numeric, daily_stats['total_amount'], 1)
    trend_line = np.poly1d(z)(x_numeric)
    
    fig.add_trace(
        go.Scatter(x=daily_stats['date'], y=trend_line,
                  mode='lines', name='–¢—Ä–µ–Ω–¥', line=dict(color='red', dash='dash')),
        row=1, col=1
    )
    
    # 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    fig.add_trace(
        go.Scatter(x=daily_stats['date'], y=daily_stats['order_count'],
                  mode='lines+markers', name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', line=dict(color='#ff7f0e')),
        row=1, col=2
    )
    
    # 3. –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
    fig.add_trace(
        go.Scatter(x=daily_stats['date'], y=daily_stats['avg_amount'],
                  mode='lines+markers', name='–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞', line=dict(color='#2ca02c')),
        row=2, col=1
    )
    
    # 4. –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥
    daily_stats['cumulative'] = daily_stats['total_amount'].cumsum()
    fig.add_trace(
        go.Scatter(x=daily_stats['date'], y=daily_stats['cumulative'],
                  mode='lines', name='–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –∏—Ç–æ–≥', fill='tonexty', line=dict(color='#9467bd')),
        row=2, col=2
    )
    
    # 5. –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    dow_stats = df.groupby('day_of_week')['amount'].sum().reindex([
        'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
    ])
    
    fig.add_trace(
        go.Bar(x=['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'], y=dow_stats.values,
               name='–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏', marker_color='#17becf'),
        row=3, col=1
    )
    
    # 6. –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º
    monthly_stats = df.groupby(df['order_date'].dt.month)['amount'].mean()
    month_names = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', 
                   '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
    
    fig.add_trace(
        go.Bar(x=[month_names[i-1] for i in monthly_stats.index], y=monthly_stats.values,
               name='–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø–æ –º–µ—Å—è—Ü–∞–º', marker_color='#bcbd22'),
        row=3, col=2
    )
    
    fig.update_layout(height=1000, showlegend=False, title_text="üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
    return fig

def create_abc_analysis(df):
    """ABC –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    
    # ABC –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
    product_stats = df.groupby('product_name')['amount'].sum().sort_values(ascending=False)
    product_stats_cum = product_stats.cumsum() / product_stats.sum() * 100
    
    products_a = product_stats_cum[product_stats_cum <= 80].index
    products_b = product_stats_cum[(product_stats_cum > 80) & (product_stats_cum <= 95)].index
    products_c = product_stats_cum[product_stats_cum > 95].index
    
    # ABC –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤
    client_stats = df.groupby('buyer')['amount'].sum().sort_values(ascending=False)
    client_stats_cum = client_stats.cumsum() / client_stats.sum() * 100
    
    clients_a = client_stats_cum[client_stats_cum <= 80].index
    clients_b = client_stats_cum[(client_stats_cum > 80) & (client_stats_cum <= 95)].index
    clients_c = client_stats_cum[client_stats_cum > 95].index
    
    return {
        'products': {'A': products_a, 'B': products_b, 'C': products_c},
        'clients': {'A': clients_a, 'B': clients_b, 'C': clients_c},
        'product_stats': product_stats,
        'client_stats': client_stats
    }

def create_correlation_heatmap(df):
    """–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞"""
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    correlation_data = df.pivot_table(
        index='order_date', 
        columns='category', 
        values='amount', 
        aggfunc='sum', 
        fill_value=0
    )
    
    correlation_matrix = correlation_data.corr()
    
    fig = go.Figure(data=go.Heatmap(
        z=correlation_matrix.values,
        x=correlation_matrix.columns,
        y=correlation_matrix.columns,
        colorscale='RdBu',
        zmid=0,
        text=np.round(correlation_matrix.values, 2),
        texttemplate="%{text}",
        textfont={"size": 12},
        hoverongaps=False
    ))
    
    fig.update_layout(
        title="üî• –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–æ–¥–∞–∂ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤",
        xaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        yaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        height=600
    )
    
    return fig

def create_sales_forecast(df):
    """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂"""
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    daily_sales = df.groupby('order_date')['amount'].sum().reset_index()
    daily_sales['days'] = (daily_sales['order_date'] - daily_sales['order_date'].min()).dt.days
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
    X = daily_sales['days'].values.reshape(-1, 1)
    y = daily_sales['amount'].values
    
    model = LinearRegression()
    model.fit(X, y)
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 30 –¥–Ω–µ–π
    future_days = np.arange(daily_sales['days'].max() + 1, daily_sales['days'].max() + 31)
    future_predictions = model.predict(future_days.reshape(-1, 1))
    
    future_dates = [daily_sales['order_date'].max() + timedelta(days=i) for i in range(1, 31)]
    
    fig = go.Figure()
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    fig.add_trace(go.Scatter(
        x=daily_sales['order_date'],
        y=daily_sales['amount'],
        mode='lines+markers',
        name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
        line=dict(color='#1f77b4')
    ))
    
    # –ü—Ä–æ–≥–Ω–æ–∑
    fig.add_trace(go.Scatter(
        x=future_dates,
        y=future_predictions,
        mode='lines+markers',
        name='–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 30 –¥–Ω–µ–π',
        line=dict(color='red', dash='dash')
    ))
    
    fig.update_layout(
        title="üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –Ω–∞ 30 –¥–Ω–µ–π",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ (—Ä—É–±.)",
        height=500
    )
    
    return fig, future_predictions.sum()

def create_manager_performance(df):
    """–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    
    manager_stats = df.groupby('manager').agg({
        'amount': ['sum', 'mean', 'count'],
        'buyer': 'nunique'
    }).round(2)
    
    manager_stats.columns = ['–û–±—â–∞—è —Å—É–º–º–∞', '–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤']
    manager_stats = manager_stats.reset_index()
    manager_stats = manager_stats.sort_values('–û–±—â–∞—è —Å—É–º–º–∞', ascending=False)
    
    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = –û–±—â–∞—è —Å—É–º–º–∞ / –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ * –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    manager_stats['–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'] = (
        manager_stats['–û–±—â–∞—è —Å—É–º–º–∞'] / 
        manager_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'] * 
        manager_stats['–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤'] / 1000
    ).round(2)
    
    fig = px.scatter(
        manager_stats.head(20),
        x='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
        y='–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑',
        size='–û–±—â–∞—è —Å—É–º–º–∞',
        color='–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        hover_name='manager',
        title="üíº –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (—Ä–∞–∑–º–µ—Ä = –æ–±—â–∞—è —Å—É–º–º–∞, —Ü–≤–µ—Ç = —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)",
        color_continuous_scale='viridis'
    )
    
    fig.update_layout(height=600)
    return fig, manager_stats

def create_geographic_analysis(df):
    """–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂"""
    
    region_stats = df.groupby('region').agg({
        'amount': ['sum', 'mean', 'count'],
        'buyer': 'nunique'
    }).reset_index()
    
    region_stats.columns = ['–†–µ–≥–∏–æ–Ω', '–û–±—â–∞—è —Å—É–º–º–∞', '–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–ö–ª–∏–µ–Ω—Ç–æ–≤']
    region_stats = region_stats.sort_values('–û–±—â–∞—è —Å—É–º–º–∞', ascending=False)
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É-–¥–µ—Ä–µ–≤–æ
    fig_treemap = px.treemap(
        region_stats.head(20),
        path=['–†–µ–≥–∏–æ–Ω'],
        values='–û–±—â–∞—è —Å—É–º–º–∞',
        color='–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑',
        title="üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º",
        color_continuous_scale='plasma'
    )
    
    # –ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
    fig_bubble = px.scatter(
        region_stats.head(15),
        x='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
        y='–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑',
        size='–û–±—â–∞—è —Å—É–º–º–∞',
        color='–ö–ª–∏–µ–Ω—Ç–æ–≤',
        hover_name='–†–µ–≥–∏–æ–Ω',
        title="üéØ –ê–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏–æ–Ω–æ–≤: –æ–±—ä–µ–º vs —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        color_continuous_scale='viridis'
    )
    
    fig_bubble.update_layout(height=600)
    
    return fig_treemap, fig_bubble, region_stats

def create_product_portfolio_analysis(df):
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    
    # –ú–∞—Ç—Ä–∏—Ü–∞ BCG (Boston Consulting Group)
    product_stats = df.groupby(['product_name', 'category']).agg({
        'amount': 'sum',
        'quantity': 'sum'
    }).reset_index()
    
    # –†–æ—Å—Ç = –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º
    growth_data = df.groupby(['product_name', df['order_date'].dt.to_period('M')])['amount'].sum().reset_index()
    growth_rates = growth_data.groupby('product_name')['amount'].apply(
        lambda x: (x.iloc[-1] - x.iloc[0]) / x.iloc[0] * 100 if len(x) > 1 and x.iloc[0] > 0 else 0
    ).reset_index()
    growth_rates.columns = ['product_name', 'growth_rate']
    
    # –î–æ–ª—è —Ä—ã–Ω–∫–∞ = –¥–æ–ª—è –æ—Ç –æ–±—â–∏—Ö –ø—Ä–æ–¥–∞–∂
    total_sales = product_stats['amount'].sum()
    product_stats['market_share'] = product_stats['amount'] / total_sales * 100
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    bcg_data = product_stats.merge(growth_rates, on='product_name', how='left')
    bcg_data['growth_rate'] = bcg_data['growth_rate'].fillna(0)
    
    # –°–æ–∑–¥–∞–µ–º BCG –º–∞—Ç—Ä–∏—Ü—É
    fig = px.scatter(
        bcg_data.head(50),
        x='market_share',
        y='growth_rate',
        size='amount',
        color='category',
        hover_name='product_name',
        title="üìä BCG –ú–∞—Ç—Ä–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–¥–æ–ª—è —Ä—ã–Ω–∫–∞ vs —Ä–æ—Å—Ç)",
        labels={'market_share': '–î–æ–ª—è —Ä—ã–Ω–∫–∞ (%)', 'growth_rate': '–¢–µ–º–ø —Ä–æ—Å—Ç–∞ (%)'}
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è BCG
    fig.add_hline(y=bcg_data['growth_rate'].median(), line_dash="dash", line_color="gray")
    fig.add_vline(x=bcg_data['market_share'].median(), line_dash="dash", line_color="gray")
    
    fig.update_layout(height=700)
    
    return fig, bcg_data

def create_cohort_analysis(df):
    """–ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    df['order_month'] = df['order_date'].dt.to_period('M')
    first_purchase = df.groupby('buyer')['order_month'].min().reset_index()
    first_purchase.columns = ['buyer', 'cohort_month']
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    df_cohort = df.merge(first_purchase, on='buyer')
    df_cohort['months_since_first_purchase'] = (
        df_cohort['order_month'] - df_cohort['cohort_month']
    ).apply(lambda x: x.n)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–≥–æ—Ä—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    cohort_data = df_cohort.groupby(['cohort_month', 'months_since_first_purchase'])['buyer'].nunique().reset_index()
    cohort_table = cohort_data.pivot(index='cohort_month', 
                                    columns='months_since_first_purchase', 
                                    values='buyer')
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º retention rate
    cohort_sizes = first_purchase.groupby('cohort_month')['buyer'].nunique()
    retention_table = cohort_table.divide(cohort_sizes, axis=0)
    
    # –°–æ–∑–¥–∞–µ–º heatmap
    fig = go.Figure(data=go.Heatmap(
        z=retention_table.values,
        x=[f'–ú–µ—Å—è—Ü {i}' for i in retention_table.columns],
        y=[str(i) for i in retention_table.index],
        colorscale='Blues',
        text=np.round(retention_table.values * 100, 1),
        texttemplate="%{text}%",
        textfont={"size": 10}
    ))
    
    fig.update_layout(
        title="üë• –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (%)",
        xaxis_title="–ú–µ—Å—è—Ü—ã —Å –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏",
        yaxis_title="–ú–µ—Å—è—Ü –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏",
        height=500
    )
    
    return fig

def create_price_analysis(df):
    """–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    fig_violin = px.violin(
        df[df['amount'] < df['amount'].quantile(0.95)],  # –£–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–æ—Å—ã
        x='category',
        y='amount',
        title="üéª –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤",
        box=True
    )
    fig_violin.update_layout(height=500)
    
    # –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤
    Q1 = df['amount'].quantile(0.25)
    Q3 = df['amount'].quantile(0.75)
    IQR = Q3 - Q1
    outliers = df[(df['amount'] < Q1 - 1.5 * IQR) | (df['amount'] > Q3 + 1.5 * IQR)]
    
    fig_outliers = px.scatter(
        outliers.head(100),
        x='order_date',
        y='amount',
        color='category',
        hover_data=['buyer', 'product_name'],
        title="‚ö° –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–≤—ã–±—Ä–æ—Å—ã –≤ —Ü–µ–Ω–∞—Ö)"
    )
    fig_outliers.update_layout(height=500)
    
    return fig_violin, fig_outliers, len(outliers)

def create_funnel_analysis(df):
    """–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂"""
    
    # –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –∑–∞–∫–∞–∑–æ–≤
    bins = [0, 10000, 50000, 100000, 500000, float('inf')]
    labels = ['< 10–∫', '10-50–∫', '50-100–∫', '100-500–∫', '> 500–∫']
    
    df['amount_category'] = pd.cut(df['amount'], bins=bins, labels=labels, include_lowest=True)
    funnel_data = df['amount_category'].value_counts().sort_index()
    
    fig = go.Figure(go.Funnel(
        y=funnel_data.index,
        x=funnel_data.values,
        textinfo="value+percent initial",
        marker_color=["deepskyblue", "lightsalmon", "tan", "teal", "silver"]
    ))
    
    fig.update_layout(
        title="üîΩ –í–æ—Ä–æ–Ω–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–¥–µ–ª–∫–∏",
        height=500
    )
    
    return fig

def create_advanced_kpis(df):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ KPI –º–µ—Ç—Ä–∏–∫–∏"""
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ KPI
    total_revenue = df['amount'].sum()
    avg_order_value = df['amount'].mean()
    total_orders = len(df)
    unique_customers = df['buyer'].nunique()
    
    # Customer Lifetime Value (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    customer_orders = df.groupby('buyer').agg({
        'amount': 'sum',
        'id': 'count'
    })
    clv = customer_orders['amount'].mean()
    
    # –ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤
    days_range = (df['order_date'].max() - df['order_date'].min()).days
    order_frequency = total_orders / days_range if days_range > 0 else 0
    
    # Revenue per customer
    rpc = total_revenue / unique_customers
    
    # –ö–æ–Ω–≤–µ—Ä—Å–∏—è (–ø—Ä–æ—Ü–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏)
    repeat_customers = len(customer_orders[customer_orders['id'] > 1])
    repeat_rate = repeat_customers / unique_customers * 100
    
    return {
        'total_revenue': total_revenue,
        'avg_order_value': avg_order_value,
        'total_orders': total_orders,
        'unique_customers': unique_customers,
        'clv': clv,
        'order_frequency': order_frequency,
        'rpc': rpc,
        'repeat_rate': repeat_rate
    }

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–æ–≤ –û—Ä–∏–º—ç–∫—Å</h1>', unsafe_allow_html=True)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    with st.spinner('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'):
        df = load_data()
    
    if df.empty:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞.")
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    st.sidebar.header("üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏
    date_preset = st.sidebar.selectbox(
        "–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞",
        ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π", "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", "–í–µ—Å—å –ø–µ—Ä–∏–æ–¥"]
    )
    
    if date_preset == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π":
        end_date = df['order_date'].max().date()
        start_date = end_date - timedelta(days=30)
    elif date_preset == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π":
        end_date = df['order_date'].max().date()
        start_date = end_date - timedelta(days=90)
    elif date_preset == "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
        end_date = df['order_date'].max().date()
        start_date = end_date.replace(day=1)
    elif date_preset == "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü":
        current_month = df['order_date'].max().date().replace(day=1)
        start_date = (current_month - timedelta(days=1)).replace(day=1)
        end_date = current_month - timedelta(days=1)
    elif date_preset == "–í–µ—Å—å –ø–µ—Ä–∏–æ–¥":
        start_date = df['order_date'].min().date()
        end_date = df['order_date'].max().date()
    else:
        date_range = st.sidebar.date_input(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥",
            value=(df['order_date'].min().date(), df['order_date'].max().date()),
            min_value=df['order_date'].min().date(),
            max_value=df['order_date'].max().date()
        )
        if len(date_range) == 2:
            start_date, end_date = date_range
        else:
            start_date = df['order_date'].min().date()
            end_date = df['order_date'].max().date()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    regions = ['–í—Å–µ'] + sorted(df['region'].unique().tolist())
    selected_regions = st.sidebar.multiselect("–†–µ–≥–∏–æ–Ω—ã", regions, default=['–í—Å–µ'])
    
    categories = ['–í—Å–µ'] + sorted(df['category'].unique().tolist())
    selected_categories = st.sidebar.multiselect("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", categories, default=['–í—Å–µ'])
    
    managers = ['–í—Å–µ'] + sorted(df['manager'].unique().tolist())
    selected_managers = st.sidebar.multiselect("–ú–µ–Ω–µ–¥–∂–µ—Ä—ã", managers, default=['–í—Å–µ'])
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
    amount_range = st.sidebar.slider(
        "–†–∞–∑–º–µ—Ä –∑–∞–∫–∞–∑–∞ (—Ä—É–±.)",
        min_value=int(df['amount'].min()),
        max_value=int(df['amount'].max()),
        value=(int(df['amount'].min()), int(df['amount'].quantile(0.95))),
        step=1000
    )
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_df = df.copy()
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    filtered_df = filtered_df[
        (filtered_df['order_date'].dt.date >= start_date) & 
        (filtered_df['order_date'].dt.date <= end_date)
    ]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    if '–í—Å–µ' not in selected_regions and selected_regions:
        filtered_df = filtered_df[filtered_df['region'].isin(selected_regions)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if '–í—Å–µ' not in selected_categories and selected_categories:
        filtered_df = filtered_df[filtered_df['category'].isin(selected_categories)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    if '–í—Å–µ' not in selected_managers and selected_managers:
        filtered_df = filtered_df[filtered_df['manager'].isin(selected_managers)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—É–º–º–µ
    filtered_df = filtered_df[
        (filtered_df['amount'] >= amount_range[0]) & 
        (filtered_df['amount'] <= amount_range[1])
    ]
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ KPI –º–µ—Ç—Ä–∏–∫–∏
    kpis = create_advanced_kpis(filtered_df)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ KPI –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.markdown(f"""
        <div class="kpi-card">
            <h3>üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥</h3>
            <h2>{kpis['total_revenue']:,.0f} ‚ÇΩ</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="kpi-card">
            <h3>üìä –°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑</h3>
            <h2>{kpis['avg_order_value']:,.0f} ‚ÇΩ</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="kpi-card">
            <h3>üõí –ó–∞–∫–∞–∑–æ–≤</h3>
            <h2>{kpis['total_orders']:,}</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown(f"""
        <div class="kpi-card">
            <h3>üë• –ö–ª–∏–µ–Ω—Ç–æ–≤</h3>
            <h2>{kpis['unique_customers']:,}</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col5:
        st.markdown(f"""
        <div class="kpi-card">
            <h3>üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏</h3>
            <h2>{kpis['repeat_rate']:.1f}%</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col6, col7, col8 = st.columns(3)
    with col6:
        st.metric("üíé CLV", f"{kpis['clv']:,.0f} ‚ÇΩ", help="Customer Lifetime Value")
    with col7:
        st.metric("üìà RPC", f"{kpis['rpc']:,.0f} ‚ÇΩ", help="Revenue Per Customer")
    with col8:
        st.metric("‚ö° –ó–∞–∫–∞–∑–æ–≤/–¥–µ–Ω—å", f"{kpis['order_frequency']:.1f}")
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8 = st.tabs([
        "üìà –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã", 
        "üéØ ABC –∞–Ω–∞–ª–∏–∑", 
        "üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", 
        "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å —Ç–æ–≤–∞—Ä–æ–≤",
        "üë• –ö–æ–≥–æ—Ä—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "üíº –ú–µ–Ω–µ–¥–∂–µ—Ä—ã", 
        "üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã",
        "üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    ])
    
    with tab1:
        st.subheader("üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
        if not filtered_df.empty:
            fig_time = create_advanced_time_series(filtered_df)
            st.plotly_chart(fig_time, width='stretch')
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞
            if len(filtered_df['category'].unique()) > 1:
                fig_corr = create_correlation_heatmap(filtered_df)
                st.plotly_chart(fig_corr, width='stretch')
    
    with tab2:
        st.subheader("üéØ ABC –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        if not filtered_df.empty:
            abc_data = create_abc_analysis(filtered_df)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**üì¶ ABC —Ç–æ–≤–∞—Ä—ã:**")
                st.write(f"üü¢ **A-—Ç–æ–≤–∞—Ä—ã** ({len(abc_data['products']['A'])}): {len(abc_data['products']['A'])/len(abc_data['product_stats'])*100:.1f}% —Ç–æ–≤–∞—Ä–æ–≤ = 80% –≤—ã—Ä—É—á–∫–∏")
                st.write(f"üü° **B-—Ç–æ–≤–∞—Ä—ã** ({len(abc_data['products']['B'])}): {len(abc_data['products']['B'])/len(abc_data['product_stats'])*100:.1f}% —Ç–æ–≤–∞—Ä–æ–≤ = 15% –≤—ã—Ä—É—á–∫–∏")
                st.write(f"üî¥ **C-—Ç–æ–≤–∞—Ä—ã** ({len(abc_data['products']['C'])}): {len(abc_data['products']['C'])/len(abc_data['product_stats'])*100:.1f}% —Ç–æ–≤–∞—Ä–æ–≤ = 5% –≤—ã—Ä—É—á–∫–∏")
                
                if len(abc_data['products']['A']) > 0:
                    st.write("**üèÜ –¢–æ–ø A-—Ç–æ–≤–∞—Ä—ã:**")
                    for i, (product, amount) in enumerate(abc_data['product_stats'].head(10).items()):
                        st.write(f"{i+1}. {product}: {amount:,.0f} ‚ÇΩ")
            
            with col2:
                st.write("**üë• ABC –∫–ª–∏–µ–Ω—Ç—ã:**")
                st.write(f"üü¢ **A-–∫–ª–∏–µ–Ω—Ç—ã** ({len(abc_data['clients']['A'])}): {len(abc_data['clients']['A'])/len(abc_data['client_stats'])*100:.1f}% –∫–ª–∏–µ–Ω—Ç–æ–≤ = 80% –≤—ã—Ä—É—á–∫–∏")
                st.write(f"üü° **B-–∫–ª–∏–µ–Ω—Ç—ã** ({len(abc_data['clients']['B'])}): {len(abc_data['clients']['B'])/len(abc_data['client_stats'])*100:.1f}% –∫–ª–∏–µ–Ω—Ç–æ–≤ = 15% –≤—ã—Ä—É—á–∫–∏")
                st.write(f"üî¥ **C-–∫–ª–∏–µ–Ω—Ç—ã** ({len(abc_data['clients']['C'])}): {len(abc_data['clients']['C'])/len(abc_data['client_stats'])*100:.1f}% –∫–ª–∏–µ–Ω—Ç–æ–≤ = 5% –≤—ã—Ä—É—á–∫–∏")
                
                if len(abc_data['clients']['A']) > 0:
                    st.write("**üèÜ –¢–æ–ø A-–∫–ª–∏–µ–Ω—Ç—ã:**")
                    for i, (client, amount) in enumerate(abc_data['client_stats'].head(10).items()):
                        st.write(f"{i+1}. {client}: {amount:,.0f} ‚ÇΩ")
    
    with tab3:
        st.subheader("üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
        if not filtered_df.empty:
            fig_treemap, fig_bubble, region_stats = create_geographic_analysis(filtered_df)
            
            st.plotly_chart(fig_treemap, width='stretch')
            st.plotly_chart(fig_bubble, width='stretch')
            
            # –í–æ—Ä–æ–Ω–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            funnel_fig = create_funnel_analysis(filtered_df)
            st.plotly_chart(funnel_fig, width='stretch')
    
    with tab4:
        st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        if not filtered_df.empty:
            fig_bcg, bcg_data = create_product_portfolio_analysis(filtered_df)
            st.plotly_chart(fig_bcg, width='stretch')
            
            st.write("**üìã –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è BCG –º–∞—Ç—Ä–∏—Ü—ã:**")
            col1, col2 = st.columns(2)
            with col1:
                st.success("üåü **–ó–≤–µ–∑–¥—ã** (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö): –í—ã—Å–æ–∫–∏–π —Ä–æ—Å—Ç + –í—ã—Å–æ–∫–∞—è –¥–æ–ª—è")
                st.info("üêÑ **–î–æ–π–Ω—ã–µ –∫–æ—Ä–æ–≤—ã** (–ø—Ä–∞–≤—ã–π –Ω–∏–∑): –ù–∏–∑–∫–∏–π —Ä–æ—Å—Ç + –í—ã—Å–æ–∫–∞—è –¥–æ–ª—è")
            with col2:
                st.warning("‚ùì **–í–æ–ø—Ä–æ—Å—ã** (–ª–µ–≤—ã–π –≤–µ—Ä—Ö): –í—ã—Å–æ–∫–∏–π —Ä–æ—Å—Ç + –ù–∏–∑–∫–∞—è –¥–æ–ª—è")
                st.error("üêï **–°–æ–±–∞–∫–∏** (–ª–µ–≤—ã–π –Ω–∏–∑): –ù–∏–∑–∫–∏–π —Ä–æ—Å—Ç + –ù–∏–∑–∫–∞—è –¥–æ–ª—è")
            
            # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω
            fig_violin, fig_outliers, outliers_count = create_price_analysis(filtered_df)
            st.plotly_chart(fig_violin, width='stretch')
            st.plotly_chart(fig_outliers, width='stretch')
            st.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {outliers_count} –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    
    with tab5:
        st.subheader("üë• –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        if not filtered_df.empty and len(filtered_df['buyer'].unique()) > 10:
            fig_cohort = create_cohort_analysis(filtered_df)
            st.plotly_chart(fig_cohort, width='stretch')
            
            st.info("üí° **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** –¢–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Å—è—Ü—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏")
        else:
            st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    
    with tab6:
        st.subheader("üíº –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
        if not filtered_df.empty:
            fig_managers, manager_stats = create_manager_performance(filtered_df)
            st.plotly_chart(fig_managers, width='stretch')
            
            st.subheader("üìä –†–µ–π—Ç–∏–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
            st.dataframe(
                manager_stats.head(15).style.format({
                    '–û–±—â–∞—è —Å—É–º–º–∞': '{:,.0f} ‚ÇΩ',
                    '–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑': '{:,.0f} ‚ÇΩ',
                    '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': '{:.2f}'
                }),
                width='stretch'
            )
    
    with tab7:
        st.subheader("üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç—Ä–µ–Ω–¥—ã")
        if not filtered_df.empty:
            fig_forecast, forecast_sum = create_sales_forecast(filtered_df)
            st.plotly_chart(fig_forecast, width='stretch')
            
            col1, col2 = st.columns(2)
            with col1:
                st.success(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 30 –¥–Ω–µ–π: **{forecast_sum:,.0f} ‚ÇΩ**")
            with col2:
                growth_rate = calculate_growth_rate(filtered_df)
                if growth_rate > 0:
                    st.success(f"üìä –¢—Ä–µ–Ω–¥ —Ä–æ—Å—Ç–∞: **+{growth_rate:.1f}%**")
                else:
                    st.error(f"üìâ –¢—Ä–µ–Ω–¥ —Å–Ω–∏–∂–µ–Ω–∏—è: **{growth_rate:.1f}%**")
    
    with tab8:
        st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        st.info(f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ **{len(filtered_df):,}** –∑–∞–ø–∏—Å–µ–π –∏–∑ **{len(df):,}** –æ–±—â–∏—Ö")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –æ–ø—Ü–∏–∏
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if not filtered_df.empty:
                csv = filtered_df.to_csv(index=False, encoding='utf-8')
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
                    data=csv,
                    file_name=f"orimex_detailed_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
        
        with col2:
            if not filtered_df.empty:
                summary_stats = filtered_df.groupby(['region', 'category']).agg({
                    'amount': ['sum', 'mean', 'count']
                }).round(2)
                summary_csv = summary_stats.to_csv(encoding='utf-8')
                st.download_button(
                    label="üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (CSV)",
                    data=summary_csv,
                    file_name=f"orimex_summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
        
        with col3:
            if not filtered_df.empty:
                abc_data = create_abc_analysis(filtered_df)
                abc_products = pd.DataFrame({
                    '–¢–æ–≤–∞—Ä': abc_data['product_stats'].index,
                    '–°—É–º–º–∞': abc_data['product_stats'].values
                })
                abc_csv = abc_products.to_csv(index=False, encoding='utf-8')
                st.download_button(
                    label="üéØ ABC –∞–Ω–∞–ª–∏–∑ (CSV)",
                    data=abc_csv,
                    file_name=f"orimex_abc_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–∏—Å–∫–æ–º
        search_term = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω—ã–º:", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω...")
        
        if search_term:
            mask = (
                filtered_df['product_name'].str.contains(search_term, case=False, na=False) |
                filtered_df['buyer'].str.contains(search_term, case=False, na=False) |
                filtered_df['region'].str.contains(search_term, case=False, na=False) |
                filtered_df['manager'].str.contains(search_term, case=False, na=False)
            )
            display_df = filtered_df[mask]
        else:
            display_df = filtered_df
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort_column = st.selectbox(
            "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:",
            ['order_date', 'amount', 'quantity', 'buyer', 'product_name', 'region']
        )
        sort_order = st.radio("–ü–æ—Ä—è–¥–æ–∫:", ['–ü–æ —É–±—ã–≤–∞–Ω–∏—é', '–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é'], horizontal=True)
        
        if sort_order == '–ü–æ —É–±—ã–≤–∞–Ω–∏—é':
            display_df = display_df.sort_values(sort_column, ascending=False)
        else:
            display_df = display_df.sort_values(sort_column, ascending=True)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        st.dataframe(
            display_df.head(1000),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            width='stretch',
            column_config={
                "amount": st.column_config.NumberColumn(
                    "–°—É–º–º–∞",
                    format="%.0f ‚ÇΩ"
                ),
                "order_date": st.column_config.DateColumn(
                    "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
                    format="DD.MM.YYYY"
                )
            }
        )
        
        if len(display_df) > 1000:
            st.warning(f"‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(display_df):,}")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    st.sidebar.markdown("---")
    st.sidebar.header("üìä –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    if not filtered_df.empty:
        # –¢–æ–ø —Ç–æ–≤–∞—Ä –¥–Ω—è
        today_data = filtered_df[filtered_df['order_date'].dt.date == filtered_df['order_date'].dt.date.max()]
        if not today_data.empty:
            top_product_today = today_data.groupby('product_name')['amount'].sum().idxmax()
            st.sidebar.success(f"üèÜ –¢–æ–ø —Ç–æ–≤–∞—Ä —Å–µ–≥–æ–¥–Ω—è: {top_product_today}")
        
        # –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        top_manager = filtered_df.groupby('manager')['amount'].sum().idxmax()
        top_manager_amount = filtered_df.groupby('manager')['amount'].sum().max()
        st.sidebar.info(f"üë®‚Äçüíº –¢–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä: {top_manager}\nüí∞ {top_manager_amount:,.0f} ‚ÇΩ")
        
        # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        avg_by_category = filtered_df.groupby('category')['amount'].mean().sort_values(ascending=False)
        st.sidebar.write("**üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**")
        for cat, avg in avg_by_category.head(5).items():
            st.sidebar.write(f"‚Ä¢ {cat}: {avg:,.0f} ‚ÇΩ")
    
    # –§—É—Ç–µ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(
            "**üìä –î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –û—Ä–∏–º—ç–∫—Å**\n\n"
            "‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite\n"
            "‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å Plotly\n"
            "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ KPI –º–µ—Ç—Ä–∏–∫–∏"
        )
    
    with col2:
        st.markdown(
            f"**üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"**üìà –í–µ—Ä—Å–∏—è:** 2.0 Advanced\n"
            f"**üóÑÔ∏è –ó–∞–ø–∏—Å–µ–π –≤ –ë–î:** {len(df):,}\n"
            f"**üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ:** {len(filtered_df):,}"
        )
    
    with col3:
        if not filtered_df.empty:
            efficiency = len(filtered_df[filtered_df['amount'] > filtered_df['amount'].mean()]) / len(filtered_df) * 100
            st.markdown(
                f"**‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂:** {efficiency:.1f}%\n\n"
                f"**üìä –ü–æ–∫—Ä—ã—Ç–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤:** {filtered_df['region'].nunique()}\n"
                f"**üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:** {filtered_df['manager'].nunique()}\n"
                f"**üì¶ –¢–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:** {filtered_df['product_name'].nunique()}"
            )

if __name__ == "__main__":
    main()
