#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –û—Ä–∏–º—ç–∫—Å - —Ñ–æ–∫—É—Å –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
"""

import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.figure_factory as ff
from datetime import datetime, timedelta
import numpy as np
import warnings
import os
import time
import hashlib
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CSV
from csv_to_db import parse_csv_to_database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –û—Ä–∏–º—ç–∫—Å",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&display=swap');
    
    .main-header {
        font-family: 'Inter', sans-serif;
        font-size: 3.5rem;
        font-weight: 700;
        color: #2E86AB;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        background: linear-gradient(90deg, #2E86AB, #A23B72, #F18F01);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    
    .enhanced-card {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .manager-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 12px;
        color: white;
        margin: 0.5rem 0;
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.3);
    }
    
    .contractor-card {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        padding: 1.5rem;
        border-radius: 12px;
        color: white;
        margin: 0.5rem 0;
        box-shadow: 0 6px 20px rgba(240, 147, 251, 0.3);
    }
    
    .metric-highlight {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        color: white;
        margin: 0.5rem;
        box-shadow: 0 5px 15px rgba(79, 172, 254, 0.3);
    }
    
    .trend-up {
        color: #51cf66;
        font-weight: bold;
    }
    
    .trend-down {
        color: #ff6b6b;
        font-weight: bold;
    }
    
    .sidebar .sidebar-content {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 15px;
    }
    
    .filter-section {
        background: rgba(255, 255, 255, 0.1);
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data(ttl=300)
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not os.path.exists('orimex_orders.db'):
            st.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞
            csv_file = "–ó–∞–∫–∞–∑—ã –û—Ä–∏–º—ç–∫—Å - TDSheet.csv"
            if os.path.exists(csv_file):
                from csv_to_db import parse_csv_to_database
                success = parse_csv_to_database(csv_file, 'orimex_orders.db')
                if not success:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
                    return pd.DataFrame()
            else:
                st.error("‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.")
                return pd.DataFrame()
        
        conn = sqlite3.connect('orimex_orders.db')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        table_names = [table[0] for table in tables]
        
        if 'orders' not in table_names or 'contractors' not in table_names or 'products' not in table_names:
            st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            conn.close()
            return pd.DataFrame()
        
        query = '''
        SELECT 
            o.id,
            o.order_date,
            o.quantity,
            o.amount,
            c.head_contractor,
            c.buyer,
            c.manager,
            c.region,
            p.name as product_name,
            p.characteristics,
            p.category
        FROM orders o
        JOIN contractors c ON o.contractor_id = c.id
        JOIN products p ON o.product_id = p.id
        WHERE o.amount IS NOT NULL AND o.amount > 0
        '''
        
        df = pd.read_sql_query(query, conn)
        
        if df.empty:
            st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            conn.close()
            return pd.DataFrame()
        
        df['order_date'] = pd.to_datetime(df['order_date'])
        df['month'] = df['order_date'].dt.to_period('M')
        df['week'] = df['order_date'].dt.to_period('W')
        df['day_of_week'] = df['order_date'].dt.day_name()
        df['quarter'] = df['order_date'].dt.to_period('Q')
        
        conn.close()
        return df
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

@st.cache_data(ttl=300)
def create_sales_dynamics_analysis(df, period_type='–î–µ–Ω—å', start_date=None, end_date=None):
    """–ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É"""
    
    if df.empty:
        return None, None, None, None
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if start_date and end_date:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º date –æ–±—ä–µ–∫—Ç—ã –≤ datetime –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        start_datetime = pd.to_datetime(start_date)
        end_datetime = pd.to_datetime(end_date) + pd.Timedelta(days=1) - pd.Timedelta(seconds=1)
        df_filtered = df[(df['order_date'] >= start_datetime) & (df['order_date'] <= end_datetime)].copy()
    else:
        df_filtered = df.copy()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    df_filtered['order_date'] = pd.to_datetime(df_filtered['order_date'])
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
    if period_type == '–î–µ–Ω—å':
        df_filtered['period'] = df_filtered['order_date'].dt.date
        date_format = '%d.%m.%Y'
    elif period_type == '–ù–µ–¥–µ–ª—è':
        df_filtered['period'] = df_filtered['order_date'].dt.to_period('W').dt.start_time.dt.date
        date_format = '%d.%m.%Y'
    elif period_type == '–ú–µ—Å—è—Ü':
        df_filtered['period'] = df_filtered['order_date'].dt.to_period('M').dt.start_time.dt.date
        date_format = '%m.%Y'
    elif period_type == '–ö–≤–∞—Ä—Ç–∞–ª':
        df_filtered['period'] = df_filtered['order_date'].dt.to_period('Q').dt.start_time.dt.date
        date_format = 'Q%q %Y'
    else:  # –ì–æ–¥
        df_filtered['period'] = df_filtered['order_date'].dt.to_period('Y').dt.start_time.dt.date
        date_format = '%Y'
    
    # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–µ—Ä–∏–æ–¥—É
    dynamics_data = df_filtered.groupby('period').agg({
        'amount': ['sum', 'mean', 'count'],
        'quantity': 'sum'
    }).round(2)
    
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    dynamics_data.columns = ['–í—ã—Ä—É—á–∫–∞', '–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–∫–∞–∑–æ–≤', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤']
    dynamics_data = dynamics_data.reset_index()
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
    dynamics_data = dynamics_data.sort_values('period')
    
    # –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤
    dynamics_data['–í—ã—Ä—É—á–∫–∞_—Ç—Ä–µ–Ω–¥'] = dynamics_data['–í—ã—Ä—É—á–∫–∞'].rolling(window=min(7, len(dynamics_data)), center=True).mean()
    dynamics_data['–ó–∞–∫–∞–∑—ã_—Ç—Ä–µ–Ω–¥'] = dynamics_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–∫–∞–∑–æ–≤'].rolling(window=min(7, len(dynamics_data)), center=True).mean()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    # 1. –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –≤—ã—Ä—É—á–∫–∏
    fig_revenue = go.Figure()
    
    fig_revenue.add_trace(go.Scatter(
        x=dynamics_data['period'],
        y=dynamics_data['–í—ã—Ä—É—á–∫–∞'],
        mode='lines+markers',
        name='–í—ã—Ä—É—á–∫–∞',
        line=dict(color='#2E86AB', width=3),
        marker=dict(size=8, color='#2E86AB'),
        hovertemplate='<b>%{x}</b><br>–í—ã—Ä—É—á–∫–∞: %{y:,.0f} ‚ÇΩ<extra></extra>'
    ))
    
    fig_revenue.add_trace(go.Scatter(
        x=dynamics_data['period'],
        y=dynamics_data['–í—ã—Ä—É—á–∫–∞_—Ç—Ä–µ–Ω–¥'],
        mode='lines',
        name='–¢—Ä–µ–Ω–¥',
        line=dict(color='#F18F01', width=2, dash='dash'),
        hovertemplate='<b>%{x}</b><br>–¢—Ä–µ–Ω–¥: %{y:,.0f} ‚ÇΩ<extra></extra>'
    ))
    
    fig_revenue.update_layout(
        title=f'üìà –î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏ –ø–æ {period_type.lower()}–º',
        xaxis_title='–ü–µ—Ä–∏–æ–¥',
        yaxis_title='–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)',
        hovermode='x unified',
        template='plotly_white',
        height=400,
        showlegend=True,
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )
    
    # 2. –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
    fig_orders = go.Figure()
    
    fig_orders.add_trace(go.Bar(
        x=dynamics_data['period'],
        y=dynamics_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–∫–∞–∑–æ–≤'],
        name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
        marker_color='#A23B72',
        hovertemplate='<b>%{x}</b><br>–ó–∞–∫–∞–∑–æ–≤: %{y}<extra></extra>'
    ))
    
    fig_orders.add_trace(go.Scatter(
        x=dynamics_data['period'],
        y=dynamics_data['–ó–∞–∫–∞–∑—ã_—Ç—Ä–µ–Ω–¥'],
        mode='lines',
        name='–¢—Ä–µ–Ω–¥ –∑–∞–∫–∞–∑–æ–≤',
        line=dict(color='#F18F01', width=2, dash='dash'),
        yaxis='y2',
        hovertemplate='<b>%{x}</b><br>–¢—Ä–µ–Ω–¥ –∑–∞–∫–∞–∑–æ–≤: %{y:.1f}<extra></extra>'
    ))
    
    fig_orders.update_layout(
        title=f'üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ {period_type.lower()}–º',
        xaxis_title='–ü–µ—Ä–∏–æ–¥',
        yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
        yaxis2=dict(title='–¢—Ä–µ–Ω–¥ –∑–∞–∫–∞–∑–æ–≤', overlaying='y', side='right'),
        hovermode='x unified',
        template='plotly_white',
        height=400,
        showlegend=True,
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )
    
    # 3. –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
    fig_avg_check = go.Figure()
    
    fig_avg_check.add_trace(go.Scatter(
        x=dynamics_data['period'],
        y=dynamics_data['–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫'],
        mode='lines+markers',
        name='–°—Ä–µ–¥–Ω–∏–π —á–µ–∫',
        line=dict(color='#51cf66', width=3),
        marker=dict(size=8, color='#51cf66'),
        hovertemplate='<b>%{x}</b><br>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: %{y:,.0f} ‚ÇΩ<extra></extra>'
    ))
    
    fig_avg_check.update_layout(
        title=f'üí∞ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ {period_type.lower()}–º',
        xaxis_title='–ü–µ—Ä–∏–æ–¥',
        yaxis_title='–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (‚ÇΩ)',
        hovermode='x unified',
        template='plotly_white',
        height=400,
        showlegend=False
    )
    
    # 4. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ (–≤—ã—Ä—É—á–∫–∞ + –∑–∞–∫–∞–∑—ã)
    fig_combined = make_subplots(
        rows=2, cols=1,
        subplot_titles=(f'–í—ã—Ä—É—á–∫–∞ –ø–æ {period_type.lower()}–º', f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ {period_type.lower()}–º'),
        vertical_spacing=0.1,
        specs=[[{"secondary_y": False}], [{"secondary_y": False}]]
    )
    
    fig_combined.add_trace(
        go.Scatter(
            x=dynamics_data['period'],
            y=dynamics_data['–í—ã—Ä—É—á–∫–∞'],
            mode='lines+markers',
            name='–í—ã—Ä—É—á–∫–∞',
            line=dict(color='#2E86AB', width=3),
            marker=dict(size=6, color='#2E86AB')
        ),
        row=1, col=1
    )
    
    fig_combined.add_trace(
        go.Bar(
            x=dynamics_data['period'],
            y=dynamics_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–∫–∞–∑–æ–≤'],
            name='–ó–∞–∫–∞–∑—ã',
            marker_color='#A23B72',
            opacity=0.7
        ),
        row=2, col=1
    )
    
    fig_combined.update_layout(
        title=f'üìä –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ {period_type.lower()}–º',
        height=600,
        showlegend=True,
        template='plotly_white',
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_revenue = dynamics_data['–í—ã—Ä—É—á–∫–∞'].sum()
    total_orders = dynamics_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–∫–∞–∑–æ–≤'].sum()
    avg_check = dynamics_data['–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫'].mean()
    
    # –†–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞/–ø–∞–¥–µ–Ω–∏—è
    if len(dynamics_data) > 1:
        revenue_growth = ((dynamics_data['–í—ã—Ä—É—á–∫–∞'].iloc[-1] - dynamics_data['–í—ã—Ä—É—á–∫–∞'].iloc[-2]) / dynamics_data['–í—ã—Ä—É—á–∫–∞'].iloc[-2]) * 100
        orders_growth = ((dynamics_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–∫–∞–∑–æ–≤'].iloc[-1] - dynamics_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–∫–∞–∑–æ–≤'].iloc[-2]) / dynamics_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–∫–∞–∑–æ–≤'].iloc[-2]) * 100
    else:
        revenue_growth = 0
        orders_growth = 0
    
    stats = {
        'total_revenue': total_revenue,
        'total_orders': total_orders,
        'avg_check': avg_check,
        'revenue_growth': revenue_growth,
        'orders_growth': orders_growth,
        'period_count': len(dynamics_data)
    }
    
    return fig_revenue, fig_orders, fig_avg_check, fig_combined, dynamics_data, stats

def create_manager_detailed_analysis(df):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    manager_stats = df.groupby('manager').agg({
        'amount': ['sum', 'mean', 'count', 'std'],
        'buyer': 'nunique',
        'head_contractor': 'nunique',
        'region': 'nunique',
        'product_name': 'nunique',
        'category': 'nunique',
        'order_date': ['min', 'max']
    }).round(2)
    
    manager_stats.columns = [
        '–û–±—â–∞—è —Å—É–º–º–∞', '–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
        '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π', '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤', '–†–µ–≥–∏–æ–Ω–æ–≤', 
        '–¢–æ–≤–∞—Ä–æ–≤', '–ö–∞—Ç–µ–≥–æ—Ä–∏–π', '–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'
    ]
    
    manager_stats = manager_stats.reset_index()
    
    # –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å)
    manager_stats['–í—ã—Ä—É—á–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è'] = manager_stats['–û–±—â–∞—è —Å—É–º–º–∞'] / manager_stats['–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π'].replace(0, 1)
    manager_stats['–ó–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è'] = manager_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'] / manager_stats['–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π'].replace(0, 1)
    manager_stats['–î–Ω–µ–π —Ä–∞–±–æ—Ç—ã'] = (
        pd.to_datetime(manager_stats['–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑']) - 
        pd.to_datetime(manager_stats['–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑'])
    ).dt.days + 1
    manager_stats['–í—ã—Ä—É—á–∫–∞ –≤ –¥–µ–Ω—å'] = manager_stats['–û–±—â–∞—è —Å—É–º–º–∞'] / manager_stats['–î–Ω–µ–π —Ä–∞–±–æ—Ç—ã'].replace(0, 1)
    manager_stats['–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'] = manager_stats['–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'] / manager_stats['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ'].replace(0, 1)
    
    # –î–∏–Ω–∞–º–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
    manager_dynamics = df.groupby(['manager', df['order_date'].dt.to_period('M')])['amount'].sum().unstack(fill_value=0)
    
    # –¢–æ–ø-10 –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    top_managers = manager_stats.nlargest(10, '–û–±—â–∞—è —Å—É–º–º–∞')
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    fig_manager_performance = px.scatter(
        manager_stats,
        x='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
        y='–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑',
        size='–û–±—â–∞—è —Å—É–º–º–∞',
        color='–í—ã—Ä—É—á–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è',
        hover_name='manager',
        title="üíº –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤",
        labels={
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤': '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤)',
            '–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑': '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫)',
            '–í—ã—Ä—É—á–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è': 'CLV –º–µ–Ω–µ–¥–∂–µ—Ä–∞'
        },
        color_continuous_scale='viridis'
    )
    fig_manager_performance.update_layout(height=600)
    
    # –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    fig_manager_dynamics = go.Figure()
    
    colors = px.colors.qualitative.Set3
    for i, manager in enumerate(top_managers['manager'].head(5)):
        if manager in manager_dynamics.index:
            monthly_data = manager_dynamics.loc[manager]
            fig_manager_dynamics.add_trace(go.Scatter(
                x=[str(month) for month in monthly_data.index],
                y=monthly_data.values,
                mode='lines+markers',
                name=manager,
                line=dict(color=colors[i % len(colors)], width=3),
                marker=dict(size=8)
            ))
    
    fig_manager_dynamics.update_layout(
        title="üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–ø-5 –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º",
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis_title="–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)",
        height=500
    )
    
    # –†–µ–π—Ç–∏–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    manager_stats_sorted = manager_stats.sort_values('–û–±—â–∞—è —Å—É–º–º–∞', ascending=False)
    manager_stats_sorted['–†–µ–π—Ç–∏–Ω–≥'] = range(1, len(manager_stats_sorted) + 1)
    
    return fig_manager_performance, fig_manager_dynamics, manager_stats_sorted

def create_contractor_detailed_analysis(df):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤"""
    
    # –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    contractor_stats = df.groupby('head_contractor').agg({
        'amount': ['sum', 'mean', 'count', 'std'],
        'buyer': 'nunique',
        'manager': 'nunique',
        'region': 'nunique',
        'product_name': 'nunique',
        'category': 'nunique',
        'order_date': ['min', 'max']
    }).round(2)
    
    contractor_stats.columns = [
        '–û–±—â–∞—è —Å—É–º–º–∞', '–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
        '–ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π', '–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤', '–†–µ–≥–∏–æ–Ω–æ–≤', '–¢–æ–≤–∞—Ä–æ–≤', '–ö–∞—Ç–µ–≥–æ—Ä–∏–π',
        '–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'
    ]
    
    contractor_stats = contractor_stats.reset_index()
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    contractor_stats['–î–Ω–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞'] = (
        pd.to_datetime(contractor_stats['–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑']) - 
        pd.to_datetime(contractor_stats['–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑'])
    ).dt.days + 1
    
    contractor_stats['–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å'] = contractor_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'] / contractor_stats['–î–Ω–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞'].replace(0, 1)
    contractor_stats['–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤'] = contractor_stats['–¢–æ–≤–∞—Ä–æ–≤'] / contractor_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'].replace(0, 1)
    contractor_stats['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è'] = contractor_stats['–û–±—â–∞—è —Å—É–º–º–∞'] / contractor_stats['–ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π'].replace(0, 1)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (–¥–µ—Ç–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)
    buyer_stats = df.groupby(['head_contractor', 'buyer']).agg({
        'amount': ['sum', 'mean', 'count'],
        'manager': 'first',
        'region': 'first',
        'order_date': ['min', 'max']
    }).round(2)
    
    buyer_stats.columns = [
        '–û–±—â–∞—è —Å—É–º–º–∞', '–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
        '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–†–µ–≥–∏–æ–Ω', '–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'
    ]
    buyer_stats = buyer_stats.reset_index()
    
    # –î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    contractor_dynamics = df.groupby(['head_contractor', df['order_date'].dt.to_period('M')])['amount'].sum().unstack(fill_value=0)
    
    # –¢–æ–ø –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
    top_contractors = contractor_stats.nlargest(10, '–û–±—â–∞—è —Å—É–º–º–∞')
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    fig_contractor_segments = px.scatter(
        contractor_stats,
        x='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
        y='–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑',
        size='–û–±—â–∞—è —Å—É–º–º–∞',
        color='–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å',
        hover_name='head_contractor',
        title="üè¢ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤",
        labels={
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤': '–û–±—ä–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞',
            '–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑': '–†–∞–∑–º–µ—Ä —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞',
            '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å': '–ó–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å'
        },
        color_continuous_scale='plasma'
    )
    fig_contractor_segments.update_layout(height=600)
    
    # –î–∏–Ω–∞–º–∏–∫–∞ –í–°–ï–• –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞
    fig_contractor_dynamics = go.Figure()
    
    # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    all_contractors = contractor_dynamics.index.tolist()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏—Ö
    default_contractors = top_contractors['head_contractor'].head(10).tolist()
    
    colors = px.colors.qualitative.Set3
    for i, contractor in enumerate(default_contractors):
        if contractor in contractor_dynamics.index:
            monthly_data = contractor_dynamics.loc[contractor]
            fig_contractor_dynamics.add_trace(go.Scatter(
                x=[str(month) for month in monthly_data.index],
                y=monthly_data.values,
                mode='lines+markers',
                name=contractor[:25] + "..." if len(contractor) > 25 else contractor,
                line=dict(width=3, color=colors[i % len(colors)]),
                marker=dict(size=8)
            ))
    
    fig_contractor_dynamics.update_layout(
        title="üìä –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–ø-10 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏—Ö –Ω–∏–∂–µ)",
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis_title="–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)",
        height=500
    )
    
    # –ê–Ω–∞–ª–∏–∑ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    contractor_stats['–õ–æ—è–ª—å–Ω–æ—Å—Ç—å'] = contractor_stats['–î–Ω–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞'] / 30  # –≤ –º–µ—Å—è—Ü–∞—Ö
    contractor_stats['–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏'] = pd.cut(
        contractor_stats['–õ–æ—è–ª—å–Ω–æ—Å—Ç—å'],
        bins=[0, 1, 3, 6, float('inf')],
        labels=['–ù–æ–≤—ã–µ', '–†–∞–∑–≤–∏–≤–∞—é—â–∏–µ—Å—è', '–°—Ç–∞–±–∏–ª—å–Ω—ã–µ', '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ']
    )
    
    return fig_contractor_segments, fig_contractor_dynamics, contractor_stats, buyer_stats, all_contractors, contractor_dynamics

def create_manager_contractor_matrix(df):
    """–ú–∞—Ç—Ä–∏—Ü–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä-–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"""
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –º–µ–Ω–µ–¥–∂–µ—Ä √ó –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç
    interaction_matrix = df.groupby(['manager', 'head_contractor'])['amount'].sum().unstack(fill_value=0)
    
    # –¢–æ–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    manager_contractor_pairs = df.groupby(['manager', 'head_contractor']).agg({
        'amount': 'sum',
        'id': 'count',
        'buyer': 'nunique'
    }).reset_index()
    
    manager_contractor_pairs = manager_contractor_pairs.sort_values('amount', ascending=False)
    
    # Heatmap —Ç–æ–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    top_pairs = manager_contractor_pairs.head(50)
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è heatmap
    heatmap_data = top_pairs.pivot_table(
        index='manager', 
        columns='head_contractor', 
        values='amount', 
        fill_value=0
    )
    
    fig_heatmap = go.Figure(data=go.Heatmap(
        z=heatmap_data.values,
        x=[name[:15] + "..." if len(name) > 15 else name for name in heatmap_data.columns],
        y=[name[:20] + "..." if len(name) > 20 else name for name in heatmap_data.index],
        colorscale='Blues',
        hoverongaps=False
    ))
    
    fig_heatmap.update_layout(
        title="üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: –º–µ–Ω–µ–¥–∂–µ—Ä √ó –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç (—Ç–æ–ø-50 –ø–∞—Ä)",
        xaxis_title="–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã",
        yaxis_title="–ú–µ–Ω–µ–¥–∂–µ—Ä—ã",
        height=600
    )
    
    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä
    manager_contractor_pairs['–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'] = manager_contractor_pairs['amount'] / manager_contractor_pairs['id']
    
    return fig_heatmap, manager_contractor_pairs

def create_temporal_analysis(df, entity_type='manager', grouping_period='–ú–µ—Å—è—Ü—ã'):
    """–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""

    entity_col = 'manager' if entity_type == 'manager' else 'head_contractor'

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    if grouping_period == '–î–Ω–∏':
        period_freq = 'D'
        period_name = '–¥–Ω—è–º'
        growth_period = 'D'
    elif grouping_period == '–ù–µ–¥–µ–ª–∏':
        period_freq = 'W'
        period_name = '–Ω–µ–¥–µ–ª—è–º'
        growth_period = 'W'
    else:  # –ú–µ—Å—è—Ü—ã
        period_freq = 'M'
        period_name = '–º–µ—Å—è—Ü–∞–º'
        growth_period = 'M'

    # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
    period_data = df.groupby([entity_col, df['order_date'].dt.to_period(period_freq)])['amount'].sum().unstack(fill_value=0)

    # –†–æ—Å—Ç –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    period_growth = period_data.pct_change(axis=1) * 100

    # –¢–æ–ø-5 –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    top_entities = df.groupby(entity_col)['amount'].sum().nlargest(5).index

    # –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    fig_growth = go.Figure()

    colors = px.colors.qualitative.Set1
    for i, entity in enumerate(top_entities):
        if entity in period_growth.index:
            growth_data = period_growth.loc[entity].dropna()
            fig_growth.add_trace(go.Scatter(
                x=[str(p) for p in growth_data.index],
                y=growth_data.values,
                mode='lines+markers',
                name=entity[:20] + "..." if len(entity) > 20 else entity,
                line=dict(color=colors[i % len(colors)], width=3),
                marker=dict(size=10)
            ))

    fig_growth.update_layout(
        title=f"üìà –†–æ—Å—Ç –ø–æ {period_name} —Ç–æ–ø-5 {'–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤' if entity_type == 'manager' else '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤'} (%)",
        xaxis_title=grouping_period,
        yaxis_title="–†–æ—Å—Ç (%)",
        height=500
    )

    # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (—Å–µ–∑–æ–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–µ–ª—å–Ω—ã–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞)
    if grouping_period == '–î–Ω–∏':
        # –î–Ω–µ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ —á–∞—Å–∞–º –∏–ª–∏ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        pattern_data = df.groupby([entity_col, df['order_date'].dt.dayofweek])['amount'].mean().unstack(fill_value=0)
        pattern_labels = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        pattern_title = "–î–Ω–µ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω"
    elif grouping_period == '–ù–µ–¥–µ–ª–∏':
        # –ù–µ–¥–µ–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        pattern_data = df.groupby([entity_col, df['order_date'].dt.dayofweek])['amount'].mean().unstack(fill_value=0)
        pattern_labels = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        pattern_title = "–ù–µ–¥–µ–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω"
    else:  # –ú–µ—Å—è—Ü—ã
        # –ú–µ—Å—è—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        pattern_data = df.groupby([entity_col, df['order_date'].dt.month])['amount'].mean().unstack(fill_value=0)
        pattern_labels = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                         '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
        pattern_title = "–ú–µ—Å—è—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω"

    # Heatmap –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    pattern_top = pattern_data.loc[top_entities] if len(top_entities) > 0 else pattern_data

    fig_pattern = go.Figure(data=go.Heatmap(
        z=pattern_top.values,
        x=pattern_labels,
        y=[name[:15] + "..." if len(name) > 15 else name for name in pattern_top.index],
        colorscale='RdYlBu_r',
        hoverongaps=False
    ))

    fig_pattern.update_layout(
        title=f"üå°Ô∏è {pattern_title} {'–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤' if entity_type == 'manager' else '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤'}",
        xaxis_title="–ü–µ—Ä–∏–æ–¥",
        yaxis_title=f"{'–ú–µ–Ω–µ–¥–∂–µ—Ä—ã' if entity_type == 'manager' else '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã'}",
        height=400
    )

    return fig_growth, fig_pattern

def create_advanced_kpi_dashboard(df):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å KPI"""
    
    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_revenue = df['amount'].sum()
    total_orders = len(df)
    unique_customers = df['buyer'].nunique()
    unique_managers = df['manager'].nunique()
    unique_contractors = df['head_contractor'].nunique()
    
    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    avg_order_value = df['amount'].mean()
    median_order_value = df['amount'].median()
    
    # –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è (–∏–Ω–¥–µ–∫—Å –•–µ—Ä—Ñ–∏–Ω–¥–∞–ª—è-–•–∏—Ä—à–º–∞–Ω–∞)
    manager_shares = df.groupby('manager')['amount'].sum() / total_revenue
    hhi_managers = (manager_shares ** 2).sum() * 10000  # HHI –∏–Ω–¥–µ–∫—Å
    
    contractor_shares = df.groupby('head_contractor')['amount'].sum() / total_revenue  
    hhi_contractors = (contractor_shares ** 2).sum() * 10000
    
    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    manager_efficiency = df.groupby('manager').agg({
        'amount': 'sum',
        'buyer': 'nunique'
    })
    avg_manager_efficiency = (manager_efficiency['amount'] / manager_efficiency['buyer'].replace(0, 1)).mean()
    
    # Retention rate (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    customer_orders = df.groupby('buyer')['id'].count()
    repeat_customers = len(customer_orders[customer_orders > 1])
    retention_rate = repeat_customers / unique_customers * 100 if unique_customers > 0 else 0
    
    # –†–æ—Å—Ç (–º–µ—Å—è—Ü –∫ –º–µ—Å—è—Ü—É)
    monthly_revenue = df.groupby(df['order_date'].dt.to_period('M'))['amount'].sum()
    if len(monthly_revenue) > 1:
        mom_growth = (monthly_revenue.iloc[-1] - monthly_revenue.iloc[-2]) / monthly_revenue.iloc[-2] * 100
    else:
        mom_growth = 0
    
    return {
        'total_revenue': total_revenue,
        'total_orders': total_orders,
        'unique_customers': unique_customers,
        'unique_managers': unique_managers,
        'unique_contractors': unique_contractors,
        'avg_order_value': avg_order_value,
        'median_order_value': median_order_value,
        'hhi_managers': hhi_managers,
        'hhi_contractors': hhi_contractors,
        'avg_manager_efficiency': avg_manager_efficiency,
        'retention_rate': retention_rate,
        'mom_growth': mom_growth
    }

def create_product_detailed_analysis(df):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤"""
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    product_stats = df.groupby(['product_name', 'category']).agg({
        'amount': ['sum', 'mean', 'count', 'std'],
        'quantity': ['sum', 'mean'],
        'buyer': 'nunique',
        'head_contractor': 'nunique',
        'manager': 'nunique',
        'region': 'nunique',
        'order_date': ['min', 'max']
    }).round(2)
    
    product_stats.columns = [
        '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞', '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
        '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π', '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤', 
        '–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤', '–†–µ–≥–∏–æ–Ω–æ–≤', '–ü–µ—Ä–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞', '–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞'
    ]
    
    product_stats = product_stats.reset_index()
    
    # –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    product_stats['–î–Ω–µ–π –Ω–∞ —Ä—ã–Ω–∫–µ'] = (
        pd.to_datetime(product_stats['–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞']) - 
        pd.to_datetime(product_stats['–ü–µ—Ä–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞'])
    ).dt.days + 1
    
    product_stats['–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂'] = product_stats['–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'] / product_stats['–î–Ω–µ–π –Ω–∞ —Ä—ã–Ω–∫–µ'].replace(0, 1)
    product_stats['–ü—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ'] = product_stats['–ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π'] / product_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'].replace(0, 1)
    product_stats['–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ'] = product_stats['–†–µ–≥–∏–æ–Ω–æ–≤']
    product_stats['–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å'] = product_stats['–ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π'] * product_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤']
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ ABC
    total_revenue = product_stats['–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞'].sum()
    product_stats_sorted = product_stats.sort_values('–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞', ascending=False)
    product_stats_sorted['–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏'] = product_stats_sorted['–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞'] / total_revenue * 100
    product_stats_sorted['–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ–ª—è'] = product_stats_sorted['–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏'].cumsum()
    
    def abc_classification(cumulative_share):
        if cumulative_share <= 80:
            return 'A'
        elif cumulative_share <= 95:
            return 'B'
        else:
            return 'C'
    
    product_stats_sorted['ABC –∫–ª–∞—Å—Å'] = product_stats_sorted['–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ–ª—è'].apply(abc_classification)
    
    # –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
    product_dynamics = df.groupby(['product_name', df['order_date'].dt.to_period('M')])['amount'].sum().unstack(fill_value=0)
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ vs –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
    fig_product_matrix = px.scatter(
        product_stats.head(100),  # –¢–æ–ø-100 —Ç–æ–≤–∞—Ä–æ–≤
        x='–ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π',
        y='–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞',
        size='–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞',
        color='category',
        hover_name='product_name',
        title="üì¶ –ú–∞—Ç—Ä–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤: –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å vs –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å",
        labels={
            '–ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π': '–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π)',
            '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': '–ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞)'
        }
    )
    fig_product_matrix.update_layout(height=600)
    
    # –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤
    top_products = product_stats.nlargest(8, '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞')['product_name']
    
    fig_product_dynamics = go.Figure()
    colors = px.colors.qualitative.Set3
    
    for i, product in enumerate(top_products):
        if product in product_dynamics.index:
            monthly_data = product_dynamics.loc[product]
            fig_product_dynamics.add_trace(go.Scatter(
                x=[str(month) for month in monthly_data.index],
                y=monthly_data.values,
                mode='lines+markers',
                name=product[:25] + "..." if len(product) > 25 else product,
                line=dict(color=colors[i % len(colors)], width=3),
                marker=dict(size=8)
            ))
    
    fig_product_dynamics.update_layout(
        title="üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–ø-8 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º",
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis_title="–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)",
        height=500
    )
    
    # –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_dynamics = df.groupby(['category', df['order_date'].dt.to_period('M')])['amount'].sum().unstack(fill_value=0)
    
    fig_category_dynamics = go.Figure()
    
    category_colors = px.colors.qualitative.Plotly
    for i, category in enumerate(category_dynamics.index):
        monthly_data = category_dynamics.loc[category]
        fig_category_dynamics.add_trace(go.Scatter(
            x=[str(month) for month in monthly_data.index],
            y=monthly_data.values,
            mode='lines+markers',
            name=category,
            line=dict(width=4, color=category_colors[i % len(category_colors)]),
            marker=dict(size=10)
        ))
    
    fig_category_dynamics.update_layout(
        title="üìä –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤",
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis_title="–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)",
        height=500
    )
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_product_charts = {}
    
    for category in df['category'].unique():
        category_data = df[df['category'] == category]
        
        # –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_product_dynamics = category_data.groupby(['product_name', category_data['order_date'].dt.to_period('M')])['amount'].sum().unstack(fill_value=0)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_top_products = category_data.groupby('product_name')['amount'].sum().nlargest(10).index
        
        fig_category_products = go.Figure()
        
        colors = px.colors.qualitative.Pastel
        for i, product in enumerate(category_top_products):
            if product in category_product_dynamics.index:
                monthly_data = category_product_dynamics.loc[product]
                fig_category_products.add_trace(go.Scatter(
                    x=[str(month) for month in monthly_data.index],
                    y=monthly_data.values,
                    mode='lines+markers',
                    name=product[:30] + "..." if len(product) > 30 else product,
                    line=dict(width=3, color=colors[i % len(colors)]),
                    marker=dict(size=8)
                ))
        
        fig_category_products.update_layout(
            title=f"üì¶ –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' (—Ç–æ–ø-10)",
            xaxis_title="–ú–µ—Å—è—Ü",
            yaxis_title="–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)",
            height=500,
            showlegend=True
        )
        
        category_product_charts[category] = fig_category_products
    
    return fig_product_matrix, fig_product_dynamics, product_stats_sorted, fig_category_dynamics, category_product_charts

def create_contractor_product_analysis(df):
    """–ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç-—Ç–æ–≤–∞—Ä"""
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    contractor_product_matrix = df.groupby(['head_contractor', 'product_name'])['amount'].sum().unstack(fill_value=0)
    
    # –¢–æ–ø —Å–≤—è–∑–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç-—Ç–æ–≤–∞—Ä
    contractor_product_pairs = df.groupby(['head_contractor', 'product_name', 'category']).agg({
        'amount': 'sum',
        'quantity': 'sum',
        'id': 'count',
        'buyer': 'nunique'
    }).reset_index()
    
    contractor_product_pairs = contractor_product_pairs.sort_values('amount', ascending=False)
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    contractor_category_specialization = df.groupby(['head_contractor', 'category'])['amount'].sum().unstack(fill_value=0)
    contractor_category_pct = contractor_category_specialization.div(
        contractor_category_specialization.sum(axis=1), axis=0
    ) * 100
    
    # Heatmap —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–ø –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    top_contractors_spec = df.groupby('head_contractor')['amount'].sum().nlargest(15).index
    
    fig_contractor_specialization = go.Figure(data=go.Heatmap(
        z=contractor_category_pct.loc[top_contractors_spec].values,
        x=contractor_category_pct.columns,
        y=[name[:20] + "..." if len(name) > 20 else name for name in top_contractors_spec],
        colorscale='Viridis',
        hoverongaps=False,
        text=np.round(contractor_category_pct.loc[top_contractors_spec].values, 1),
        texttemplate="%{text}%",
        textfont={"size": 10}
    ))
    
    fig_contractor_specialization.update_layout(
        title="üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (%)",
        xaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤",
        yaxis_title="–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã",
        height=600
    )
    
    # –ê–Ω–∞–ª–∏–∑ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    contractor_diversity = df.groupby('head_contractor').agg({
        'product_name': 'nunique',
        'category': 'nunique',
        'amount': 'sum',
        'id': 'count'
    }).reset_index()
    
    contractor_diversity.columns = ['head_contractor', '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤', '–ö–∞—Ç–µ–≥–æ—Ä–∏–π', '–û–±—â–∞—è —Å—É–º–º–∞', '–ó–∞–∫–∞–∑–æ–≤']
    contractor_diversity['–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è'] = contractor_diversity['–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤'] / contractor_diversity['–ó–∞–∫–∞–∑–æ–≤']
    contractor_diversity['–®–∏—Ä–æ—Ç–∞ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞'] = contractor_diversity['–ö–∞—Ç–µ–≥–æ—Ä–∏–π']
    
    # Bubble chart –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    fig_diversity = px.scatter(
        contractor_diversity.head(50),
        x='–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è',
        y='–®–∏—Ä–æ—Ç–∞ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞',
        size='–û–±—â–∞—è —Å—É–º–º–∞',
        color='–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
        hover_name='head_contractor',
        title="üåà –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤",
        labels={
            '–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è': '–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑',
            '–®–∏—Ä–æ—Ç–∞ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'
        },
        color_continuous_scale='plasma'
    )
    fig_diversity.update_layout(height=600)
    
    # –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–ø –ø–∞—Ä –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç-—Ç–æ–≤–∞—Ä
    top_pairs = contractor_product_pairs.head(10)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É –¥–ª—è —Ç–æ–ø –ø–∞—Ä
    pairs_dynamics = []
    for _, pair in top_pairs.iterrows():
        pair_data = df[
            (df['head_contractor'] == pair['head_contractor']) & 
            (df['product_name'] == pair['product_name'])
        ].groupby(df['order_date'].dt.to_period('M'))['amount'].sum()
        
        for month, amount in pair_data.items():
            pairs_dynamics.append({
                '–ú–µ—Å—è—Ü': str(month),
                '–ü–∞—Ä–∞': f"{pair['head_contractor'][:15]}‚Äî{pair['product_name'][:15]}",
                '–í—ã—Ä—É—á–∫–∞': amount,
                '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç': pair['head_contractor'],
                '–¢–æ–≤–∞—Ä': pair['product_name']
            })
    
    pairs_df = pd.DataFrame(pairs_dynamics)
    
    fig_pairs_dynamics = px.line(
        pairs_df,
        x='–ú–µ—Å—è—Ü',
        y='–í—ã—Ä—É—á–∫–∞',
        color='–ü–∞—Ä–∞',
        title="üìä –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–ø-10 –ø–∞—Ä –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç-—Ç–æ–≤–∞—Ä",
        height=500
    )
    
    return fig_contractor_specialization, fig_diversity, fig_pairs_dynamics, contractor_product_pairs, contractor_diversity

def create_product_deep_dive(df, selected_product):
    """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    
    product_data = df[df['product_name'] == selected_product]
    
    if product_data.empty:
        return None, None, None
    
    # –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    monthly_product = product_data.groupby(product_data['order_date'].dt.to_period('M')).agg({
        'amount': 'sum',
        'quantity': 'sum',
        'id': 'count',
        'buyer': 'nunique'
    }).reset_index()
    
    fig_product_trend = make_subplots(
        rows=2, cols=2,
        subplot_titles=('–í—ã—Ä—É—á–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏'),
        specs=[[{"secondary_y": False}, {"secondary_y": False}],
               [{"secondary_y": False}, {"secondary_y": False}]]
    )
    
    # –í—ã—Ä—É—á–∫–∞
    fig_product_trend.add_trace(
        go.Scatter(x=[str(m) for m in monthly_product['order_date']], y=monthly_product['amount'],
                  mode='lines+markers', name='–í—ã—Ä—É—á–∫–∞', line=dict(color='blue', width=3)),
        row=1, col=1
    )
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    fig_product_trend.add_trace(
        go.Bar(x=[str(m) for m in monthly_product['order_date']], y=monthly_product['quantity'],
               name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', marker_color='lightgreen'),
        row=1, col=2
    )
    
    # –ó–∞–∫–∞–∑—ã
    fig_product_trend.add_trace(
        go.Scatter(x=[str(m) for m in monthly_product['order_date']], y=monthly_product['id'],
                  mode='lines+markers', name='–ó–∞–∫–∞–∑—ã', line=dict(color='orange')),
        row=2, col=1
    )
    
    # –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏
    fig_product_trend.add_trace(
        go.Scatter(x=[str(m) for m in monthly_product['order_date']], y=monthly_product['buyer'],
                  mode='lines+markers', name='–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏', line=dict(color='red')),
        row=2, col=2
    )
    
    fig_product_trend.update_layout(height=600, showlegend=False, title_text=f"üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞: {selected_product}")
    
    # –¢–æ–ø –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    product_contractors = product_data.groupby('head_contractor').agg({
        'amount': 'sum',
        'quantity': 'sum',
        'id': 'count',
        'buyer': 'nunique'
    }).sort_values('amount', ascending=False).reset_index()
    
    # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    product_regions = product_data.groupby('region')['amount'].sum().sort_values(ascending=False)
    
    return fig_product_trend, product_contractors, product_regions

def create_contractor_product_deep_dive(df, selected_contractor, selected_product):
    """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç-—Ç–æ–≤–∞—Ä"""
    
    pair_data = df[
        (df['head_contractor'] == selected_contractor) & 
        (df['product_name'] == selected_product)
    ]
    
    if pair_data.empty:
        return None, None
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø–∞—Ä—ã
    pair_monthly = pair_data.groupby(pair_data['order_date'].dt.to_period('M')).agg({
        'amount': 'sum',
        'quantity': 'sum',
        'id': 'count',
        'buyer': 'nunique'
    }).reset_index()
    
    fig_pair_dynamics = make_subplots(
        rows=2, cols=1,
        subplot_titles=('–í—ã—Ä—É—á–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º', '–û–±—ä–µ–º—ã –ø—Ä–æ–¥–∞–∂'),
        vertical_spacing=0.1
    )
    
    # –í—ã—Ä—É—á–∫–∞
    fig_pair_dynamics.add_trace(
        go.Scatter(x=[str(m) for m in pair_monthly['order_date']], y=pair_monthly['amount'],
                  mode='lines+markers', name='–í—ã—Ä—É—á–∫–∞', 
                  line=dict(color='purple', width=4), marker=dict(size=10)),
        row=1, col=1
    )
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    fig_pair_dynamics.add_trace(
        go.Bar(x=[str(m) for m in pair_monthly['order_date']], y=pair_monthly['quantity'],
               name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', marker_color='lightcoral'),
        row=2, col=1
    )
    
    fig_pair_dynamics.update_layout(
        height=500, 
        showlegend=False,
        title_text=f"üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–∞—Ä—ã: {selected_contractor} √ó {selected_product}"
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—ã
    pair_stats = {
        'total_revenue': pair_data['amount'].sum(),
        'total_quantity': pair_data['quantity'].sum(),
        'total_orders': len(pair_data),
        'unique_buyers': pair_data['buyer'].nunique(),
        'avg_order': pair_data['amount'].mean(),
        'first_order': pair_data['order_date'].min(),
        'last_order': pair_data['order_date'].max(),
        'days_active': (pair_data['order_date'].max() - pair_data['order_date'].min()).days + 1
    }
    
    return fig_pair_dynamics, pair_stats

def create_period_comparison(df, period1_start, period1_end, period2_start, period2_end):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"""
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    period1_data = df[
        (df['order_date'].dt.date >= period1_start) & 
        (df['order_date'].dt.date <= period1_end)
    ]
    
    period2_data = df[
        (df['order_date'].dt.date >= period2_start) & 
        (df['order_date'].dt.date <= period2_end)
    ]
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    comparison_metrics = {
        '–í—ã—Ä—É—á–∫–∞': {
            '–ü–µ—Ä–∏–æ–¥ 1': period1_data['amount'].sum(),
            '–ü–µ—Ä–∏–æ–¥ 2': period2_data['amount'].sum()
        },
        '–ó–∞–∫–∞–∑—ã': {
            '–ü–µ—Ä–∏–æ–¥ 1': len(period1_data),
            '–ü–µ—Ä–∏–æ–¥ 2': len(period2_data)
        },
        '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫': {
            '–ü–µ—Ä–∏–æ–¥ 1': period1_data['amount'].mean(),
            '–ü–µ—Ä–∏–æ–¥ 2': period2_data['amount'].mean()
        },
        '–ö–ª–∏–µ–Ω—Ç—ã': {
            '–ü–µ—Ä–∏–æ–¥ 1': period1_data['buyer'].nunique(),
            '–ü–µ—Ä–∏–æ–¥ 2': period2_data['buyer'].nunique()
        },
        '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã': {
            '–ü–µ—Ä–∏–æ–¥ 1': period1_data['head_contractor'].nunique(),
            '–ü–µ—Ä–∏–æ–¥ 2': period2_data['head_contractor'].nunique()
        }
    }
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    metrics_df = pd.DataFrame(comparison_metrics).T
    metrics_df['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] = ((metrics_df['–ü–µ—Ä–∏–æ–¥ 2'] - metrics_df['–ü–µ—Ä–∏–æ–¥ 1']) / metrics_df['–ü–µ—Ä–∏–æ–¥ 1'] * 100).round(1)
    
    fig_comparison = go.Figure()
    
    fig_comparison.add_trace(go.Bar(
        x=metrics_df.index,
        y=metrics_df['–ü–µ—Ä–∏–æ–¥ 1'],
        name=f'–ü–µ—Ä–∏–æ–¥ 1 ({period1_start} - {period1_end})',
        marker_color='lightblue',
        opacity=0.8
    ))
    
    fig_comparison.add_trace(go.Bar(
        x=metrics_df.index,
        y=metrics_df['–ü–µ—Ä–∏–æ–¥ 2'],
        name=f'–ü–µ—Ä–∏–æ–¥ 2 ({period2_start} - {period2_end})',
        marker_color='lightcoral',
        opacity=0.8
    ))
    
    fig_comparison.update_layout(
        title="üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏",
        barmode='group',
        height=500
    )
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    cat1_data = period1_data.groupby('category')['amount'].sum()
    cat2_data = period2_data.groupby('category')['amount'].sum()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    cat_comparison = pd.DataFrame({
        '–ü–µ—Ä–∏–æ–¥ 1': cat1_data,
        '–ü–µ—Ä–∏–æ–¥ 2': cat2_data
    }).fillna(0)
    
    cat_comparison['–ò–∑–º–µ–Ω–µ–Ω–∏–µ %'] = ((cat_comparison['–ü–µ—Ä–∏–æ–¥ 2'] - cat_comparison['–ü–µ—Ä–∏–æ–¥ 1']) / cat_comparison['–ü–µ—Ä–∏–æ–¥ 1'] * 100).round(1)
    cat_comparison['–ò–∑–º–µ–Ω–µ–Ω–∏–µ %'] = cat_comparison['–ò–∑–º–µ–Ω–µ–Ω–∏–µ %'].replace([np.inf, -np.inf], 0)
    
    fig_category_comparison = go.Figure()
    
    fig_category_comparison.add_trace(go.Bar(
        x=cat_comparison.index,
        y=cat_comparison['–ü–µ—Ä–∏–æ–¥ 1'],
        name=f'–ü–µ—Ä–∏–æ–¥ 1 ({period1_start} - {period1_end})',
        marker_color='skyblue',
        opacity=0.8
    ))

    fig_category_comparison.add_trace(go.Bar(
        x=cat_comparison.index,
        y=cat_comparison['–ü–µ—Ä–∏–æ–¥ 2'],
        name=f'–ü–µ—Ä–∏–æ–¥ 2 ({period2_start} - {period2_end})',
        marker_color='salmon',
        opacity=0.8
    ))
    
    fig_category_comparison.update_layout(
        title="üì¶ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
        barmode='group',
        height=500
    )
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    mgr1_data = period1_data.groupby('manager')['amount'].sum().nlargest(10)
    mgr2_data = period2_data.groupby('manager')['amount'].sum().nlargest(10)
    
    mgr_comparison = pd.DataFrame({
        '–ü–µ—Ä–∏–æ–¥ 1': mgr1_data,
        '–ü–µ—Ä–∏–æ–¥ 2': mgr2_data
    }).fillna(0)
    
    fig_manager_comparison = go.Figure()
    
    fig_manager_comparison.add_trace(go.Bar(
        x=[name[:20] + "..." if len(name) > 20 else name for name in mgr_comparison.index],
        y=mgr_comparison['–ü–µ—Ä–∏–æ–¥ 1'],
        name=f'–ü–µ—Ä–∏–æ–¥ 1 ({period1_start} - {period1_end})',
        marker_color='lightgreen',
        opacity=0.8
    ))

    fig_manager_comparison.add_trace(go.Bar(
        x=[name[:20] + "..." if len(name) > 20 else name for name in mgr_comparison.index],
        y=mgr_comparison['–ü–µ—Ä–∏–æ–¥ 2'],
        name=f'–ü–µ—Ä–∏–æ–¥ 2 ({period2_start} - {period2_end})',
        marker_color='orange',
        opacity=0.8
    ))
    
    fig_manager_comparison.update_layout(
        title="üë®‚Äçüíº –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏",
        barmode='group',
        height=500
    )
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    contr1_data = period1_data.groupby('head_contractor')['amount'].sum()
    contr2_data = period2_data.groupby('head_contractor')['amount'].sum()
    
    contr_comparison = pd.DataFrame({
        '–ü–µ—Ä–∏–æ–¥ 1': contr1_data,
        '–ü–µ—Ä–∏–æ–¥ 2': contr2_data
    }).fillna(0)
    
    fig_contractor_comparison = go.Figure()
    
    fig_contractor_comparison.add_trace(go.Bar(
        x=[name[:20] + "..." if len(name) > 20 else name for name in contr_comparison.index],
        y=contr_comparison['–ü–µ—Ä–∏–æ–¥ 1'],
        name=f'–ü–µ—Ä–∏–æ–¥ 1 ({period1_start} - {period1_end})',
        marker_color='mediumpurple',
        opacity=0.8
    ))

    fig_contractor_comparison.add_trace(go.Bar(
        x=[name[:20] + "..." if len(name) > 20 else name for name in contr_comparison.index],
        y=contr_comparison['–ü–µ—Ä–∏–æ–¥ 2'],
        name=f'–ü–µ—Ä–∏–æ–¥ 2 ({period2_start} - {period2_end})',
        marker_color='gold',
        opacity=0.8
    ))
    
    fig_contractor_comparison.update_layout(
        title="üè¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏",
        barmode='group',
        height=800  # –ï—â–µ –±–æ–ª—å—à–µ –≤—ã—Å–æ—Ç—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    )

    # –ê–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏
    product1_data = period1_data.groupby(['product_name', 'category'])['amount'].sum().reset_index()
    product2_data = period2_data.groupby(['product_name', 'category'])['amount'].sum().reset_index()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    product_comparison = pd.merge(
        product1_data,
        product2_data,
        on=['product_name', 'category'],
        suffixes=('_p1', '_p2'),
        how='outer'
    ).fillna(0)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏
    product_comparison['–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏'] = product_comparison['amount_p2'] - product_comparison['amount_p1']
    product_comparison['–ò–∑–º–µ–Ω–µ–Ω–∏–µ %'] = ((product_comparison['amount_p2'] - product_comparison['amount_p1']) / product_comparison['amount_p1'] * 100).replace([np.inf, -np.inf], 0)

    # –¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–æ—Å—Ç—É –≤—ã—Ä—É—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    top_products_by_category = {}
    categories = product_comparison['category'].unique()

    for category in categories:
        category_data = product_comparison[product_comparison['category'] == category]
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ä–æ—Å—Ç–æ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –≤—ã—Ä—É—á–∫–∏
        top_10 = category_data[category_data['–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏'] > 0].nlargest(10, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏')
        if not top_10.empty:
            top_products_by_category[category] = top_10

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    product_comparison_charts = []
    for category, data in top_products_by_category.items():
        fig = go.Figure()

        # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ 1
        fig.add_trace(go.Bar(
            x=[name[:25] + "..." if len(name) > 25 else name for name in data['product_name']],
            y=data['amount_p1'],
            name=f'–ü–µ—Ä–∏–æ–¥ 1 ({period1_start} - {period1_end})',
            marker_color='lightblue',
            opacity=0.8,
            text=[f"{val:,.0f} ‚ÇΩ" for val in data['amount_p1']],
            textposition='auto'
        ))

        # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ 2
        fig.add_trace(go.Bar(
            x=[name[:25] + "..." if len(name) > 25 else name for name in data['product_name']],
            y=data['amount_p2'],
            name=f'–ü–µ—Ä–∏–æ–¥ 2 ({period2_start} - {period2_end})',
            marker_color='lightcoral',
            opacity=0.8,
            text=[f"{val:,.0f} ‚ÇΩ" for val in data['amount_p2']],
            textposition='auto'
        ))

        fig.update_layout(
            title=f"üí∞ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {category}",
            xaxis_title="–¢–æ–≤–∞—Ä",
            yaxis_title="–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)",
            barmode='group',
            height=400
        )

        product_comparison_charts.append(fig)

    return (fig_comparison, fig_category_comparison, fig_manager_comparison,
            fig_contractor_comparison, metrics_df, cat_comparison, product_comparison_charts)

def create_cross_analysis(df):
    """–ö—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤"""
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è: –∫–∞–∫–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å –∫–∞–∫–∏–º–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º–∏
    coverage_matrix = df.groupby(['manager', 'head_contractor']).size().unstack(fill_value=0)
    coverage_matrix = (coverage_matrix > 0).astype(int)  # –ë–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    manager_specialization = df.groupby(['manager', 'category'])['amount'].sum().unstack(fill_value=0)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–µ–π
    manager_specialization_pct = manager_specialization.div(manager_specialization.sum(axis=1), axis=0) * 100
    
    # –¢–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    top_managers_spec = df.groupby('manager')['amount'].sum().nlargest(8).index
    
    fig_specialization = go.Figure()
    
    for category in manager_specialization_pct.columns:
        fig_specialization.add_trace(go.Bar(
            x=[m[:15] + "..." if len(m) > 15 else m for m in top_managers_spec],
            y=[manager_specialization_pct.loc[m, category] if m in manager_specialization_pct.index else 0 for m in top_managers_spec],
            name=category
        ))
    
    fig_specialization.update_layout(
        title="üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (%)",
        xaxis_title="–ú–µ–Ω–µ–¥–∂–µ—Ä—ã",
        yaxis_title="–î–æ–ª—è –æ—Ç –≤—ã—Ä—É—á–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (%)",
        barmode='stack',
        height=500
    )
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –º–µ–∂–¥—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
    shared_customers = df.groupby('buyer')['manager'].nunique()
    competitive_customers = shared_customers[shared_customers > 1]
    
    competition_data = df[df['buyer'].isin(competitive_customers.index)]
    manager_competition = competition_data.groupby(['buyer', 'manager'])['amount'].sum().unstack(fill_value=0)
    
    return fig_specialization, len(competitive_customers), manager_specialization_pct

def upload_and_update_data():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–µ—à–∞
    if st.sidebar.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫–µ—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", key="reset_cache_main"):
        if 'last_uploaded_file_hash' in st.session_state:
            del st.session_state.last_uploaded_file_hash
        st.sidebar.success("‚úÖ –ö–µ—à —Å–±—Ä–æ—à–µ–Ω!")
        st.rerun()
    
    uploaded_file = st.sidebar.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π CSV —Ñ–∞–π–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:",
        type=['csv'],
        help="–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    )
    
    if uploaded_file is not None:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        st.sidebar.write(f"üìÑ –§–∞–π–ª: {uploaded_file.name}")
        st.sidebar.write(f"üìè –†–∞–∑–º–µ—Ä: {uploaded_file.size:,} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
        file_hash = hashlib.md5(uploaded_file.getbuffer()).hexdigest()
        if 'last_uploaded_file_hash' in st.session_state and st.session_state.last_uploaded_file_hash == file_hash:
            st.sidebar.warning("‚ö†Ô∏è –≠—Ç–æ—Ç —Ñ–∞–π–ª —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–Ω–µ–µ!")
            st.sidebar.write("üí° –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:")
            if st.sidebar.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫–µ—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", key="reset_cache_duplicate"):
                if 'last_uploaded_file_hash' in st.session_state:
                    del st.session_state.last_uploaded_file_hash
                st.sidebar.success("‚úÖ –ö–µ—à —Å–±—Ä–æ—à–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
                st.rerun()
            return False
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open("temp_upload.csv", "wb") as f:
                f.write(uploaded_file.getbuffer())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞ –≤ —Å–µ—Å—Å–∏–∏
            st.session_state.last_uploaded_file_hash = file_hash
            
            st.sidebar.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            with st.spinner("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
                if not os.path.exists("temp_upload.csv"):
                    raise Exception("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                
                st.sidebar.write(f"üìÅ –†–∞–∑–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {os.path.getsize('temp_upload.csv'):,} –±–∞–π—Ç")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î
                st.sidebar.write("üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î...")
                result = parse_csv_to_database("temp_upload.csv", "orimex_orders.db")
                
                if not result:
                    raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if os.path.exists("orimex_orders.db"):
                    db_size = os.path.getsize("orimex_orders.db")
                    st.sidebar.write(f"üìä –†–∞–∑–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ë–î: {db_size:,} –±–∞–π—Ç")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    try:
                        conn = sqlite3.connect("orimex_orders.db")
                        cursor = conn.cursor()
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        cursor.execute("SELECT COUNT(*) FROM contractors")
                        contractors_count = cursor.fetchone()[0]
                        
                        cursor.execute("SELECT COUNT(*) FROM products")
                        products_count = cursor.fetchone()[0]
                        
                        cursor.execute("SELECT COUNT(*) FROM orders")
                        orders_count = cursor.fetchone()[0]
                        
                        cursor.execute("SELECT SUM(amount) FROM orders")
                        total_amount = cursor.fetchone()[0] or 0
                        
                        cursor.execute("SELECT MIN(order_date), MAX(order_date) FROM orders")
                        date_range = cursor.fetchone()
                        min_date, max_date = date_range[0], date_range[1]
                        
                        conn.close()
                        
                        st.sidebar.write(f"üìà –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {contractors_count}")
                        st.sidebar.write(f"üì¶ –ü—Ä–æ–¥—É–∫—Ç–æ–≤: {products_count}")
                        st.sidebar.write(f"üìã –ó–∞–∫–∞–∑–æ–≤: {orders_count}")
                        st.sidebar.write(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.2f} —Ä—É–±.")
                        st.sidebar.write(f"üìÖ –ü–µ—Ä–∏–æ–¥: {min_date} - {max_date}")
                        
                        st.sidebar.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î!")

                        # –û—á–∏—â–∞–µ–º –∫–µ—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                        load_data.clear()
                        create_sales_dynamics_analysis.clear()

                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—à–±–æ—Ä–¥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                        st.sidebar.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
                        time.sleep(2)
                        st.rerun()
                    except Exception as e:
                        st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {str(e)}")
                        return False
                else:
                    st.sidebar.error("‚ùå –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove("temp_upload.csv")
                st.sidebar.write("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
                
        except Exception as e:
            st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            st.sidebar.exception(e)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if os.path.exists("temp_upload.csv"):
                os.remove("temp_upload.csv")
            return False
    
    return False

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏–∑–∞ –û—Ä–∏–º—ç–∫—Å</h1>', unsafe_allow_html=True)
    
    # –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    file_uploaded = upload_and_update_data()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    with st.spinner('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'):
        df = load_data()
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if file_uploaded:
        st.success("üéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –¥–∞—à–±–æ—Ä–¥–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞.")
    
    if df.empty:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞.")
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    st.sidebar.markdown("## üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
    
    # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if os.path.exists('orimex_orders.db'):
        db_time = os.path.getmtime('orimex_orders.db')
        db_datetime = datetime.fromtimestamp(db_time)
        st.sidebar.write(f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {db_datetime.strftime('%d.%m.%Y %H:%M')}")
    
    st.sidebar.write(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {df['order_date'].min().strftime('%d.%m.%Y')} - {df['order_date'].max().strftime('%d.%m.%Y')}")
    st.sidebar.write(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df):,}")
    st.sidebar.write(f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {df['amount'].sum():,.0f} ‚ÇΩ")
    st.sidebar.write(f"üè¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {df['head_contractor'].nunique():,}")
    st.sidebar.write(f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {df['manager'].nunique():,}")
    st.sidebar.write(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {df['product_name'].nunique():,}")
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if st.sidebar.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", help="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã"):
        st.rerun()
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    st.sidebar.markdown("## üîß –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏
    st.sidebar.markdown('<div class="filter-section">', unsafe_allow_html=True)
    date_preset = st.sidebar.selectbox(
        "üìÖ –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞",
        ["–í–µ—Å—å –ø–µ—Ä–∏–æ–¥", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π", 
         "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", "–¢–µ–∫—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"],
        index=0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–í–µ—Å—å –ø–µ—Ä–∏–æ–¥"
    )
    
    # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç
    if date_preset == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π":
        end_date = df['order_date'].max().date()
        start_date = end_date - timedelta(days=30)
    elif date_preset == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π":
        end_date = df['order_date'].max().date()
        start_date = end_date - timedelta(days=90)
    elif date_preset == "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
        end_date = df['order_date'].max().date()
        start_date = end_date.replace(day=1)
    elif date_preset == "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü":
        current_month = df['order_date'].max().date().replace(day=1)
        start_date = (current_month - timedelta(days=1)).replace(day=1)
        end_date = current_month - timedelta(days=1)
    elif date_preset == "–¢–µ–∫—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª":
        end_date = df['order_date'].max().date()
        quarter_start_month = ((end_date.month - 1) // 3) * 3 + 1
        start_date = end_date.replace(month=quarter_start_month, day=1)
    elif date_preset == "–í–µ—Å—å –ø–µ—Ä–∏–æ–¥":
        start_date = df['order_date'].min().date()
        end_date = df['order_date'].max().date()
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
        start_date = df['order_date'].min().date()
        end_date = df['order_date'].max().date()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–∞—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if date_preset == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π":
        date_range = st.sidebar.date_input(
            "–¢–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
            value=(start_date, end_date),
            min_value=df['order_date'].min().date(),
            max_value=df['order_date'].max().date()
        )
        
        if len(date_range) == 2:
            start_date, end_date = date_range
    else:
        st.sidebar.info(f"üìÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}")
    st.sidebar.markdown('</div>', unsafe_allow_html=True)
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–æ —Å—É—â–Ω–æ—Å—Ç—è–º
    st.sidebar.markdown('<div class="filter-section">', unsafe_allow_html=True)
    st.sidebar.markdown("### üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
    
    # –†–µ–≥–∏–æ–Ω—ã
    regions = sorted(df['region'].unique().tolist())
    selected_regions = st.sidebar.multiselect(
        "üó∫Ô∏è –†–µ–≥–∏–æ–Ω—ã", 
        regions, 
        default=[],  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–π = –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã
        help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"
    )
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = sorted(df['category'].unique().tolist()) 
    selected_categories = st.sidebar.multiselect(
        "üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤",
        categories,
        default=[],  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–π = –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
    )
    
    # –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
    contractors = sorted(df['head_contractor'].unique().tolist())
    selected_contractors = st.sidebar.multiselect(
        "üè¢ –ì–æ–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã",
        contractors,
        default=[],  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–π = –≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
        help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤"
    )
    
    # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã  
    managers = sorted(df['manager'].unique().tolist())
    selected_managers = st.sidebar.multiselect(
        "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä—ã",
        managers,
        default=[],  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–π = –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"
    )
    st.sidebar.markdown('</div>', unsafe_allow_html=True)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    st.sidebar.markdown('<div class="filter-section">', unsafe_allow_html=True)
    st.sidebar.markdown("### ‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
    
    # –†–∞–∑–º–µ—Ä –∑–∞–∫–∞–∑–∞ (—É–±–∏—Ä–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π –ª–∏–º–∏—Ç)
    min_amount = st.sidebar.number_input(
        "üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–∫–∞–∑–∞ (—Ä—É–±.)",
        min_value=0,
        max_value=int(df['amount'].max()),
        value=0,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)"
    )
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (—É–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
    min_quantity = st.sidebar.number_input(
        "üì¶ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞",
        min_value=0,
        max_value=int(df['quantity'].max()),
        value=0,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)"
    )
    st.sidebar.markdown('</div>', unsafe_allow_html=True)
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_df = df.copy()
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    filtered_df = filtered_df[
        (filtered_df['order_date'].dt.date >= start_date) &
        (filtered_df['order_date'].dt.date <= end_date)
    ]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–Ω–æ)
    if selected_regions:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
        filtered_df = filtered_df[filtered_df['region'].isin(selected_regions)]
    
    if selected_categories:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
        filtered_df = filtered_df[filtered_df['category'].isin(selected_categories)]
        
    if selected_contractors:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
        filtered_df = filtered_df[filtered_df['head_contractor'].isin(selected_contractors)]
        
    if selected_managers:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
        filtered_df = filtered_df[filtered_df['manager'].isin(selected_managers)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—É–º–º–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
    if min_amount > 0:
        filtered_df = filtered_df[filtered_df['amount'] >= min_amount]
    
    if min_quantity > 0:
        filtered_df = filtered_df[filtered_df['quantity'] >= min_quantity]
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.sidebar.markdown("### üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.sidebar.write(f"üìä –ò—Å—Ö–æ–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(df):,}")
    st.sidebar.write(f"üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_df):,}")
    st.sidebar.write(f"üí∞ –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞: {df['amount'].sum():,.0f} ‚ÇΩ")
    st.sidebar.write(f"üí∞ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {filtered_df['amount'].sum():,.0f} ‚ÇΩ")
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ KPI
    kpis = create_advanced_kpi_dashboard(filtered_df)
    
    # –ü–∞–Ω–µ–ª—å KPI
    st.markdown("## üíé –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.markdown(f"""
        <div class="metric-highlight">
            <h3>üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥</h3>
            <h2>{kpis['total_revenue']:,.0f} ‚ÇΩ</h2>
            <p>{'üìà' if kpis['mom_growth'] > 0 else 'üìâ'} {kpis['mom_growth']:+.1f}% –∫ –ø—Ä–µ–¥. –º–µ—Å—è—Ü—É</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="metric-highlight">
            <h3>üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤</h3>
            <h2>{kpis['unique_managers']}</h2>
            <p>–°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {kpis['avg_manager_efficiency']:,.0f} ‚ÇΩ</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="metric-highlight">
            <h3>üè¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤</h3>
            <h2>{kpis['unique_contractors']}</h2>
            <p>HHI: {kpis['hhi_contractors']:.0f} {'(–≤—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è)' if kpis['hhi_contractors'] > 2500 else '(–Ω–∏–∑–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è)'}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown(f"""
        <div class="metric-highlight">
            <h3>üë• –ö–ª–∏–µ–Ω—Ç–æ–≤</h3>
            <h2>{kpis['unique_customers']}</h2>
            <p>üîÑ Retention: {kpis['retention_rate']:.1f}%</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col5:
        st.markdown(f"""
        <div class="metric-highlight">
            <h3>üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫</h3>
            <h2>{kpis['avg_order_value']:,.0f} ‚ÇΩ</h2>
            <p>–ú–µ–¥–∏–∞–Ω–∞: {kpis['median_order_value']:,.0f} ‚ÇΩ</p>
        </div>
        """, unsafe_allow_html=True)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab0, tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8, tab9 = st.tabs([
        "üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂",
        "üë®‚Äçüíº –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤",
        "üè¢ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤", 
        "üì¶ –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤",
        "üîó –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç-–¢–æ–≤–∞—Ä –∞–Ω–∞–ª–∏–∑",
        "‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤",
        "üîó –ú–∞—Ç—Ä–∏—Ü–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π",
        "üìà –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞",
        "üéØ –ö—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑",
        "üìä –°–≤–æ–¥–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"
    ])
    
    # –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞: –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
    with tab0:
        st.markdown('<div class="enhanced-card">', unsafe_allow_html=True)
        st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É")
        
        if not filtered_df.empty:
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
            col1, col2 = st.columns([1, 2])
            
            with col1:
                # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞
                period_type = st.selectbox(
                    "üìÖ –¢–∏–ø –ø–µ—Ä–∏–æ–¥–∞",
                    ["–î–µ–Ω—å", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–ö–≤–∞—Ä—Ç–∞–ª", "–ì–æ–¥"],
                    index=2,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ú–µ—Å—è—Ü"
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
                )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–∞–º
                use_custom_dates = st.checkbox("üìÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞—Ç—ã", value=False)
                
                if use_custom_dates:
                    min_date = filtered_df['order_date'].min().date()
                    max_date = filtered_df['order_date'].max().date()
                    
                    custom_start = st.date_input(
                        "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞",
                        value=min_date,
                        min_value=min_date,
                        max_value=max_date
                    )
                    
                    custom_end = st.date_input(
                        "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", 
                        value=max_date,
                        min_value=custom_start,
                        max_value=max_date
                    )
                else:
                    custom_start = None
                    custom_end = None
            
            with col2:
                st.info(f"""
                üìä **–ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –ø—Ä–æ–¥–∞–∂**
                
                –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: **{period_type.lower()}**
                
                –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–∏–Ω–∞–º–∏–∫–∞:
                - üìà –í—ã—Ä—É—á–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
                - üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
                - üí∞ –°—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
                - üìâ –¢—Ä–µ–Ω–¥–æ–≤ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                """)
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
            try:
                fig_revenue, fig_orders, fig_avg_check, fig_combined, dynamics_data, stats = create_sales_dynamics_analysis(
                    filtered_df, period_type, custom_start, custom_end
                )
                
                if fig_revenue is not None:
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
                    st.markdown("### üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
                    
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric(
                            label="üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞",
                            value=f"{stats['total_revenue']:,.0f} ‚ÇΩ",
                            delta=f"{stats['revenue_growth']:+.1f}%" if stats['revenue_growth'] != 0 else None
                        )
                    
                    with col2:
                        st.metric(
                            label="üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤",
                            value=f"{stats['total_orders']:,.0f}",
                            delta=f"{stats['orders_growth']:+.1f}%" if stats['orders_growth'] != 0 else None
                        )
                    
                    with col3:
                        st.metric(
                            label="üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫",
                            value=f"{stats['avg_check']:,.0f} ‚ÇΩ"
                        )
                    
                    with col4:
                        st.metric(
                            label="üìÖ –ü–µ—Ä–∏–æ–¥–æ–≤",
                            value=f"{stats['period_count']}"
                        )
                    
                    # –ì—Ä–∞—Ñ–∏–∫–∏
                    st.markdown("### üìà –ì—Ä–∞—Ñ–∏–∫–∏ –¥–∏–Ω–∞–º–∏–∫–∏")
                    
                    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    display_type = st.radio(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                        ["–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "–û—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏"],
                        horizontal=True
                    )
                    
                    if display_type == "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
                        st.plotly_chart(fig_combined, width='stretch')
                    else:
                        # –û—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ –¥–≤—É—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.plotly_chart(fig_revenue, width='stretch')
                            st.plotly_chart(fig_avg_check, width='stretch')
                        
                        with col2:
                            st.plotly_chart(fig_orders, width='stretch')
                    
                    # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    display_data = dynamics_data.copy()
                    display_data['–í—ã—Ä—É—á–∫–∞'] = display_data['–í—ã—Ä—É—á–∫–∞'].apply(lambda x: f"{x:,.0f} ‚ÇΩ")
                    display_data['–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫'] = display_data['–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫'].apply(lambda x: f"{x:,.0f} ‚ÇΩ")
                    display_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–∫–∞–∑–æ–≤'] = display_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–∫–∞–∑–æ–≤'].apply(lambda x: f"{x:,.0f}")
                    display_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤'] = display_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ç–æ–≤–∞—Ä–æ–≤'].apply(lambda x: f"{x:,.0f}")
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
                    display_data.columns = ['–ü–µ—Ä–∏–æ–¥', '–í—ã—Ä—É—á–∫–∞', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤', '–í—ã—Ä—É—á–∫–∞ (—Ç—Ä–µ–Ω–¥)', '–ó–∞–∫–∞–∑—ã (—Ç—Ä–µ–Ω–¥)']
                    
                    st.dataframe(
                        display_data[['–ü–µ—Ä–∏–æ–¥', '–í—ã—Ä—É—á–∫–∞', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤']],
                        width='stretch'
                    )
                    
                    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                    csv_data = dynamics_data.to_csv(index=False, encoding='utf-8')
                    st.download_button(
                        "üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∏–Ω–∞–º–∏–∫–∏ –ø—Ä–æ–¥–∞–∂",
                        data=csv_data,
                        file_name=f"sales_dynamics_{period_type.lower()}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv"
                    )
                    
                else:
                    st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –¥–∏–Ω–∞–º–∏–∫–∏ –ø—Ä–æ–¥–∞–∂. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –ø—Ä–æ–¥–∞–∂: {e}")
                
        else:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –ø—Ä–æ–¥–∞–∂. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab1:
        st.markdown('<div class="enhanced-card">', unsafe_allow_html=True)
        st.subheader("üë®‚Äçüíº –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
        
        if not filtered_df.empty:
            fig_manager_perf, fig_manager_dyn, manager_data = create_manager_detailed_analysis(filtered_df)
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(fig_manager_perf, width='stretch')
            with col2:
                st.plotly_chart(fig_manager_dyn, width='stretch')
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            st.subheader("üìã –†–µ–π—Ç–∏–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            def highlight_performance(val, col_name):
                if isinstance(val, (int, float)) and col_name in manager_data.columns:
                    if val > manager_data[col_name].quantile(0.8):
                        return 'background-color: #d4edda; color: #155724'  # –ó–µ–ª–µ–Ω—ã–π
                    elif val < manager_data[col_name].quantile(0.2):
                        return 'background-color: #f8d7da; color: #721c24'  # –ö—Ä–∞—Å–Ω—ã–π
                return ''
            
            display_columns = [
                '–†–µ–π—Ç–∏–Ω–≥', 'manager', '–û–±—â–∞—è —Å—É–º–º–∞', '–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑', 
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π', '–í—ã—Ä—É—á–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è',
                '–í—ã—Ä—É—á–∫–∞ –≤ –¥–µ–Ω—å', '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'
            ]
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
            display_data = manager_data[display_columns].head(15).copy()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
            for col in ['–û–±—â–∞—è —Å—É–º–º–∞', '–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑', '–í—ã—Ä—É—á–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è', '–í—ã—Ä—É—á–∫–∞ –≤ –¥–µ–Ω—å']:
                if col in display_data.columns:
                    display_data[col] = display_data[col].apply(lambda x: f"{x:,.0f} ‚ÇΩ" if pd.notna(x) else "0 ‚ÇΩ")
            
            if '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å' in display_data.columns:
                display_data['–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'] = display_data['–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'].apply(lambda x: f"{x:.2f}" if pd.notna(x) else "0.00")
            
            st.dataframe(display_data, width='stretch')
            
            # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            csv_managers = manager_data.to_csv(index=False, encoding='utf-8')
            st.download_button(
                "üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º",
                data=csv_managers,
                file_name=f"managers_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab2:
        st.markdown('<div class="enhanced-card">', unsafe_allow_html=True)
        st.subheader("üè¢ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤")
        
        if not filtered_df.empty:
            fig_contr_segments, fig_contr_dyn, contractor_data, buyer_data, all_contractors, contractor_dynamics = create_contractor_detailed_analysis(filtered_df)
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(fig_contr_segments, width='stretch')
            with col2:
                st.plotly_chart(fig_contr_dyn, width='stretch')
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
            st.subheader("üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏")
            
            selected_contractors_dynamics = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏:",
                all_contractors,
                default=all_contractors[:5] if len(all_contractors) > 5 else all_contractors[:3],
                help="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 10 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏"
            )
            
            if selected_contractors_dynamics:
                fig_custom_dynamics = go.Figure()
                
                colors = px.colors.qualitative.Set1
                for i, contractor in enumerate(selected_contractors_dynamics[:10]):  # –ú–∞–∫—Å–∏–º—É–º 10
                    if contractor in contractor_dynamics.index:
                        monthly_data = contractor_dynamics.loc[contractor]
                        fig_custom_dynamics.add_trace(go.Scatter(
                            x=[str(month) for month in monthly_data.index],
                            y=monthly_data.values,
                            mode='lines+markers',
                            name=contractor[:30] + "..." if len(contractor) > 30 else contractor,
                            line=dict(width=3, color=colors[i % len(colors)]),
                            marker=dict(size=8)
                        ))
                
                fig_custom_dynamics.update_layout(
                    title=f"üìà –î–∏–Ω–∞–º–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ ({len(selected_contractors_dynamics)} —à—Ç.)",
                    xaxis_title="–ú–µ—Å—è—Ü",
                    yaxis_title="–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)",
                    height=500
                )
                
                st.plotly_chart(fig_custom_dynamics, width='stretch')
            
            # –ê–Ω–∞–ª–∏–∑ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
            st.subheader("üíé –ê–Ω–∞–ª–∏–∑ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤")
            loyalty_stats = contractor_data['–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏'].value_counts()
            
            col3, col4 = st.columns(2)
            with col3:
                fig_loyalty = px.pie(
                    values=loyalty_stats.values,
                    names=loyalty_stats.index,
                    title="üîÑ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"
                )
                st.plotly_chart(fig_loyalty, width='stretch')
            
            with col4:
                st.write("**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:**")
                for category, count in loyalty_stats.items():
                    percentage = count / len(contractor_data) * 100
                    st.write(f"‚Ä¢ **{category}**: {count} ({percentage:.1f}%)")
                
                # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
                loyalty_metrics = contractor_data.groupby('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏')[
                    ['–û–±—â–∞—è —Å—É–º–º–∞', '–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑', '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å']
                ].mean().round(0)
                
                st.write("**üí∞ –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**")
                st.dataframe(loyalty_metrics)
            
            # –¢–æ–ø –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
            st.subheader("üèÜ –¢–æ–ø-20 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤")
            top_contractors_display = contractor_data.nlargest(20, '–û–±—â–∞—è —Å—É–º–º–∞')[
                ['head_contractor', '–û–±—â–∞—è —Å—É–º–º–∞', '–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', 
                 '–ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π', '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏']
            ]
            
            st.dataframe(
                top_contractors_display.style.format({
                    '–û–±—â–∞—è —Å—É–º–º–∞': '{:,.0f} ‚ÇΩ',
                    '–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑': '{:,.0f} ‚ÇΩ',
                    '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å': '{:.2f}'
                }),
                width='stretch'
            )
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab3:
        st.markdown('<div class="enhanced-card">', unsafe_allow_html=True)
        st.subheader("üì¶ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤")
        
        if not filtered_df.empty:
            fig_product_matrix, fig_product_dynamics, product_data, fig_category_dynamics, category_charts = create_product_detailed_analysis(filtered_df)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            st.plotly_chart(fig_category_dynamics, width='stretch')
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(fig_product_matrix, width='stretch')
            with col2:
                st.plotly_chart(fig_product_dynamics, width='stretch')
            
            # –û—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            selected_category_detail = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
                list(category_charts.keys()),
                help="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            )
            
            if selected_category_detail and selected_category_detail in category_charts:
                st.plotly_chart(category_charts[selected_category_detail], width='stretch')
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_info = filtered_df[filtered_df['category'] == selected_category_detail]
                
                col_cat1, col_cat2, col_cat3, col_cat4 = st.columns(4)
                
                with col_cat1:
                    st.metric("üí∞ –í—ã—Ä—É—á–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", f"{category_info['amount'].sum():,.0f} ‚ÇΩ")
                
                with col_cat2:
                    st.metric("üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", f"{category_info['product_name'].nunique():,}")
                
                with col_cat3:
                    st.metric("üõí –ó–∞–∫–∞–∑–æ–≤", f"{len(category_info):,}")
                
                with col_cat4:
                    st.metric("üè¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤", f"{category_info['head_contractor'].nunique():,}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            show_all_categories = st.checkbox("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
            
            if show_all_categories:
                st.subheader("üìä –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 2 –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ä—è–¥
                categories_list = list(category_charts.keys())
                for i in range(0, len(categories_list), 2):
                    col_cat_left, col_cat_right = st.columns(2)
                    
                    with col_cat_left:
                        if i < len(categories_list):
                            st.plotly_chart(category_charts[categories_list[i]], width='stretch')
                    
                    with col_cat_right:
                        if i + 1 < len(categories_list):
                            st.plotly_chart(category_charts[categories_list[i + 1]], width='stretch')
            
            # ABC –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
            st.subheader("üéØ ABC –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
            abc_stats = product_data['ABC –∫–ª–∞—Å—Å'].value_counts()
            
            col3, col4 = st.columns(2)
            with col3:
                fig_abc = px.pie(
                    values=abc_stats.values,
                    names=abc_stats.index,
                    title="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ ABC",
                    color_discrete_map={'A': '#2E8B57', 'B': '#FFD700', 'C': '#DC143C'}
                )
                st.plotly_chart(fig_abc, width='stretch')
            
            with col4:
                st.write("**üìä ABC —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                total_products = len(product_data)
                for abc_class, count in abc_stats.items():
                    percentage = count / total_products * 100
                    revenue_share = product_data[product_data['ABC –∫–ª–∞—Å—Å'] == abc_class]['–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏'].sum()
                    
                    if abc_class == 'A':
                        st.success(f"üü¢ **–ö–ª–∞—Å—Å A**: {count} —Ç–æ–≤–∞—Ä–æ–≤ ({percentage:.1f}%) = {revenue_share:.1f}% –≤—ã—Ä—É—á–∫–∏")
                    elif abc_class == 'B':
                        st.warning(f"üü° **–ö–ª–∞—Å—Å B**: {count} —Ç–æ–≤–∞—Ä–æ–≤ ({percentage:.1f}%) = {revenue_share:.1f}% –≤—ã—Ä—É—á–∫–∏")
                    else:
                        st.error(f"üî¥ **–ö–ª–∞—Å—Å C**: {count} —Ç–æ–≤–∞—Ä–æ–≤ ({percentage:.1f}%) = {revenue_share:.1f}% –≤—ã—Ä—É—á–∫–∏")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞")
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞
            products_list = sorted(filtered_df['product_name'].unique())
            selected_product = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
                products_list,
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É"
            )
            
            if selected_product:
                fig_product_deep, product_contractors, product_regions = create_product_deep_dive(filtered_df, selected_product)
                
                if fig_product_deep is not None:
                    st.plotly_chart(fig_product_deep, width='stretch')
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä—É
                    col_prod1, col_prod2, col_prod3 = st.columns(3)
                    
                    product_info = filtered_df[filtered_df['product_name'] == selected_product]
                    
                    with col_prod1:
                        st.metric("üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{product_info['amount'].sum():,.0f} ‚ÇΩ")
                        st.metric("üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", f"{product_info['quantity'].sum():,.0f}")
                    
                    with col_prod2:
                        st.metric("üõí –ó–∞–∫–∞–∑–æ–≤", f"{len(product_info):,}")
                        st.metric("üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π", f"{product_info['buyer'].nunique():,}")
                    
                    with col_prod3:
                        st.metric("üè¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤", f"{product_info['head_contractor'].nunique():,}")
                        st.metric("üó∫Ô∏è –†–µ–≥–∏–æ–Ω–æ–≤", f"{product_info['region'].nunique():,}")
                    
                    # –¢–æ–ø –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                    st.write("**üè¢ –¢–æ–ø-10 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:**")
                    st.dataframe(product_contractors.head(10), width='stretch')
                else:
                    st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ñ–∏–ª—å—Ç—Ä–µ")
            
            # –¢–æ–ø —Ç–æ–≤–∞—Ä—ã —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
            st.subheader("üèÜ –¢–æ–ø-20 —Ç–æ–≤–∞—Ä–æ–≤")
            top_products_display = product_data.head(20)[
                ['product_name', 'category', 'ABC –∫–ª–∞—Å—Å', '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞', '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', 
                 '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π', '–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ']
            ]
            
            st.dataframe(top_products_display, width='stretch')
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab4:
        st.markdown('<div class="enhanced-card">', unsafe_allow_html=True)
        st.subheader("üîó –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç-—Ç–æ–≤–∞—Ä")
        
        if not filtered_df.empty:
            fig_contr_spec, fig_diversity, fig_pairs_dyn, pairs_data, diversity_data = create_contractor_product_analysis(filtered_df)
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(fig_contr_spec, width='stretch')
            with col2:
                st.plotly_chart(fig_diversity, width='stretch')
            
            # –î–∏–Ω–∞–º–∏–∫–∞ –ø–∞—Ä
            st.plotly_chart(fig_pairs_dyn, width='stretch')
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã
            st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç-—Ç–æ–≤–∞—Ä")
            
            col_select1, col_select2 = st.columns(2)
            
            with col_select1:
                # –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
                contractors_list = sorted(filtered_df['head_contractor'].unique())
                selected_contractor_pair = st.selectbox(
                    "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:",
                    contractors_list,
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                )
            
            with col_select2:
                # –°–µ–ª–µ–∫—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞ (—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É)
                if selected_contractor_pair:
                    contractor_products = filtered_df[
                        filtered_df['head_contractor'] == selected_contractor_pair
                    ]['product_name'].unique()
                    
                    selected_product_pair = st.selectbox(
                        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                        sorted(contractor_products),
                        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞"
                    )
                else:
                    selected_product_pair = None
            
            # –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
            if selected_contractor_pair and selected_product_pair:
                fig_pair_deep, pair_stats = create_contractor_product_deep_dive(
                    filtered_df, selected_contractor_pair, selected_product_pair
                )
                
                if fig_pair_deep is not None:
                    st.plotly_chart(fig_pair_deep, width='stretch')
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—ã
                    st.subheader(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—ã: {selected_contractor_pair} √ó {selected_product_pair}")
                    
                    col_pair1, col_pair2, col_pair3, col_pair4 = st.columns(4)
                    
                    with col_pair1:
                        st.metric("üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{pair_stats['total_revenue']:,.0f} ‚ÇΩ")
                        st.metric("üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", f"{pair_stats['total_quantity']:,.0f}")
                    
                    with col_pair2:
                        st.metric("üõí –ó–∞–∫–∞–∑–æ–≤", f"{pair_stats['total_orders']:,}")
                        st.metric("üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π", f"{pair_stats['unique_buyers']:,}")
                    
                    with col_pair3:
                        st.metric("üìä –°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑", f"{pair_stats['avg_order']:,.0f} ‚ÇΩ")
                        st.metric("üìÖ –î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", f"{pair_stats['days_active']:,}")
                    
                    with col_pair4:
                        st.metric("üìÖ –ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑", pair_stats['first_order'].strftime('%d.%m.%Y'))
                        st.metric("üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑", pair_stats['last_order'].strftime('%d.%m.%Y'))
                    
                    # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞
                    intensity = pair_stats['total_orders'] / pair_stats['days_active'] if pair_stats['days_active'] > 0 else 0
                    
                    if intensity > 0.5:
                        st.success(f"üî• –í—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity:.2f} –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å")
                    elif intensity > 0.1:
                        st.info(f"üìä –°—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity:.2f} –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å")
                    else:
                        st.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity:.2f} –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å")
                
                else:
                    st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –≤ —Ç–µ–∫—É—â–µ–º —Ñ–∏–ª—å—Ç—Ä–µ")
            
            # –¢–æ–ø –ø–∞—Ä—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç-—Ç–æ–≤–∞—Ä
            st.subheader("‚≠ê –¢–æ–ø-15 –ø–∞—Ä –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç-—Ç–æ–≤–∞—Ä")
            top_pairs_display = pairs_data.head(15)[
                ['head_contractor', 'product_name', 'category', 'amount', 'quantity', 'id', 'buyer']
            ]
            
            st.dataframe(
                top_pairs_display.style.format({
                    'amount': '{:,.0f} ‚ÇΩ',
                    'quantity': '{:,.0f} —à—Ç.'
                }),
                width='stretch',
                column_config={
                    "head_contractor": st.column_config.TextColumn("üè¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"),
                    "product_name": st.column_config.TextColumn("üì¶ –¢–æ–≤–∞—Ä"),
                    "category": st.column_config.TextColumn("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
                    "amount": st.column_config.NumberColumn("üí∞ –í—ã—Ä—É—á–∫–∞"),
                    "quantity": st.column_config.NumberColumn("üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
                    "id": st.column_config.NumberColumn("üõí –ó–∞–∫–∞–∑–æ–≤"),
                    "buyer": st.column_config.NumberColumn("üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π")
                }
            )
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            st.subheader("üåà –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤")
            
            col5, col6 = st.columns(2)
            with col5:
                st.write("**üèÜ –°–∞–º—ã–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:**")
                top_diversified = diversity_data.nlargest(5, '–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è')
                for _, row in top_diversified.iterrows():
                    st.write(f"‚Ä¢ **{row['head_contractor'][:30]}**: {row['–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']:.2f} —Ç–æ–≤–∞—Ä–æ–≤/–∑–∞–∫–∞–∑")
            
            with col6:
                st.write("**üìä –°—Ä–µ–¥–Ω—è—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**")
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
                contractor_main_category = df.groupby('head_contractor')['category'].agg(
                    lambda x: x.value_counts().index[0]
                ).reset_index()
                contractor_main_category.columns = ['head_contractor', '–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è']
                
                diversity_with_category = diversity_data.merge(contractor_main_category, on='head_contractor')
                avg_diversity_by_category = diversity_with_category.groupby('–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è')['–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è'].mean().round(2)
                
                for category, avg_div in avg_diversity_by_category.items():
                    st.write(f"‚Ä¢ **{category}**: {avg_div:.2f}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab5:
        st.markdown('<div class="enhanced-card">', unsafe_allow_html=True)
        st.subheader("‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤")
        
        st.write("**–°—Ä–∞–≤–Ω–∏—Ç–µ –ª—é–±—ã–µ –¥–≤–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Ç–∞, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∏–∑–Ω–µ—Å–µ**")
        
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–µ—Ä–∏–æ–¥–æ–≤
        col_period1, col_period2 = st.columns(2)
        
        with col_period1:
            st.markdown("### üìÖ –ü–µ—Ä–∏–æ–¥ 1")
            period1_preset = st.selectbox(
                "–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ 1:",
                ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π", "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π"],
                key="period1"
            )
            
            if period1_preset == "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
                p1_end = df['order_date'].max().date()
                p1_start = p1_end.replace(day=1)
            elif period1_preset == "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü":
                current_month = df['order_date'].max().date().replace(day=1)
                p1_start = (current_month - timedelta(days=1)).replace(day=1)
                p1_end = current_month - timedelta(days=1)
            elif period1_preset == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π":
                p1_end = df['order_date'].max().date()
                p1_start = p1_end - timedelta(days=30)
            elif period1_preset == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π":
                p1_end = df['order_date'].max().date()
                p1_start = p1_end - timedelta(days=90)
            else:
                p1_start = df['order_date'].min().date()
                p1_end = df['order_date'].max().date()
            
            period1_range = st.date_input(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ 1:",
                value=(p1_start, p1_end),
                min_value=df['order_date'].min().date(),
                max_value=df['order_date'].max().date(),
                key="period1_dates"
            )
        
        with col_period2:
            st.markdown("### üìÖ –ü–µ—Ä–∏–æ–¥ 2")
            period2_preset = st.selectbox(
                "–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ 2:",
                ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π", "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π"],
                key="period2"
            )
            
            if period2_preset == "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
                p2_end = df['order_date'].max().date()
                p2_start = p2_end.replace(day=1)
            elif period2_preset == "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü":
                current_month = df['order_date'].max().date().replace(day=1)
                p2_start = (current_month - timedelta(days=1)).replace(day=1)
                p2_end = current_month - timedelta(days=1)
            elif period2_preset == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π":
                p2_end = df['order_date'].max().date()
                p2_start = p2_end - timedelta(days=30)
            elif period2_preset == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π":
                p2_end = df['order_date'].max().date()
                p2_start = p2_end - timedelta(days=90)
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                current_month = df['order_date'].max().date().replace(day=1)
                p2_start = (current_month - timedelta(days=1)).replace(day=1)
                p2_end = current_month - timedelta(days=1)
            
            period2_range = st.date_input(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ 2:",
                value=(p2_start, p2_end),
                min_value=df['order_date'].min().date(),
                max_value=df['order_date'].max().date(),
                key="period2_dates"
            )
        
        # –ü—Ä–æ–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –æ–±–∞ –ø–µ—Ä–∏–æ–¥–∞
        if len(period1_range) == 2 and len(period2_range) == 2:
            p1_start, p1_end = period1_range
            p2_start, p2_end = period2_range
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            (fig_main_comparison, fig_cat_comparison, fig_mgr_comparison,
             fig_contr_comparison, metrics_comparison, cat_comparison, product_comparison_charts) = create_period_comparison(
                df, p1_start, p1_end, p2_start, p2_end
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.plotly_chart(fig_main_comparison, width='stretch')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            def format_change(val):
                if val > 0:
                    return f"üü¢ +{val:.1f}%"
                elif val < 0:
                    return f"üî¥ {val:.1f}%"
                else:
                    return f"‚ö™ {val:.1f}%"
            
            metrics_display = metrics_comparison.copy()
            metrics_display['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] = metrics_display['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'].apply(format_change)
            
            st.dataframe(
                metrics_display.style.format({
                    '–ü–µ—Ä–∏–æ–¥ 1': '{:,.0f}',
                    '–ü–µ—Ä–∏–æ–¥ 2': '{:,.0f}'
                }),
                width='stretch'
            )
            
            # –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º
            col_comp1, col_comp2 = st.columns(2)
            
            with col_comp1:
                st.plotly_chart(fig_cat_comparison, width='stretch')
                st.plotly_chart(fig_mgr_comparison, width='stretch')

            with col_comp2:
                # –°–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                st.subheader("üìà –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                for category, change in cat_comparison['–ò–∑–º–µ–Ω–µ–Ω–∏–µ %'].items():
                    if not pd.isna(change) and change != 0:
                        if change > 0:
                            st.success(f"üì¶ **{category}**: +{change:.1f}%")
                        else:
                            st.error(f"üì¶ **{category}**: {change:.1f}%")

            # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
            st.subheader("üè¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤")
            st.plotly_chart(fig_contr_comparison, width='stretch')

            # –ì—Ä–∞—Ñ–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if product_comparison_charts:
                st.subheader("üí∞ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                st.write("**–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–æ—Å—Ç—É –≤—ã—Ä—É—á–∫–∏ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º**")

                chart_index = 0
                for i, chart in enumerate(product_comparison_charts):
                    if i % 2 == 0:
                        if i > 0:
                            st.markdown("---")
                        col1, col2 = st.columns(2)
                        with col1:
                            st.plotly_chart(chart, width='stretch', config={'displayModeBar': False})
                            chart_index += 1
                        if i + 1 < len(product_comparison_charts):
                            with col2:
                                st.plotly_chart(product_comparison_charts[i + 1], width='stretch', config={'displayModeBar': False})
                                chart_index += 1
                    elif i == len(product_comparison_charts) - 1:
                        st.plotly_chart(chart, width='stretch', config={'displayModeBar': False})

        else:
            st.info("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab6:
        st.markdown('<div class="enhanced-card">', unsafe_allow_html=True)
        st.subheader("üîó –ú–∞—Ç—Ä–∏—Ü–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
        
        if not filtered_df.empty:
            fig_heatmap, interaction_data = create_manager_contractor_matrix(filtered_df)
            st.plotly_chart(fig_heatmap, width='stretch')
            
            # –¢–æ–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            st.subheader("‚≠ê –¢–æ–ø-15 –ø–∞—Ä –º–µ–Ω–µ–¥–∂–µ—Ä-–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç")
            top_interactions = interaction_data.head(15)[
                ['manager', 'head_contractor', 'amount', 'id', 'buyer', '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']
            ]
            
            st.dataframe(
                top_interactions.style.format({
                    'amount': '{:,.0f} ‚ÇΩ',
                    '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': '{:,.0f} ‚ÇΩ'
                }),
                width='stretch',
                column_config={
                    "manager": st.column_config.TextColumn("üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä"),
                    "head_contractor": st.column_config.TextColumn("üè¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"),
                    "amount": st.column_config.NumberColumn("üí∞ –°—É–º–º–∞"),
                    "id": st.column_config.NumberColumn("üìä –ó–∞–∫–∞–∑–æ–≤"),
                    "buyer": st.column_config.NumberColumn("üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"),
                    "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": st.column_config.NumberColumn("‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
                }
            )
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab7:
        st.markdown('<div class="enhanced-card">', unsafe_allow_html=True)
        st.subheader("üìà –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞")
        
        if not filtered_df.empty:
            # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
            analysis_type = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
                ["üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä—ã", "üè¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã"],
                horizontal=True
            )

            # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            grouping_period = st.selectbox(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:",
                ["–î–Ω–∏", "–ù–µ–¥–µ–ª–∏", "–ú–µ—Å—è—Ü—ã"],
                index=2  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ—Å—è—Ü—ã
            )

            entity_type = 'manager' if analysis_type == "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä—ã" else 'contractor'
            fig_quarterly, fig_seasonal = create_temporal_analysis(filtered_df, entity_type, grouping_period)
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(fig_quarterly, width='stretch')
            with col2:
                st.plotly_chart(fig_seasonal, width='stretch')
            
            # –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            st.subheader("üìä –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")

            entity_col = 'manager' if entity_type == 'manager' else 'head_contractor'

            # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞/–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            entities_list = filtered_df[entity_col].unique()
            selected_entity = st.selectbox(
                f"–í—ã–±–µ—Ä–∏—Ç–µ {'–º–µ–Ω–µ–¥–∂–µ—Ä–∞' if entity_type == 'manager' else '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞'} –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
                entities_list
            )

            if selected_entity:
                entity_data = filtered_df[filtered_df[entity_col] == selected_entity]

                # –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                if grouping_period == '–î–Ω–∏':
                    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
                    period_entity = entity_data.groupby('order_date').agg({
                        'amount': 'sum',
                        'id': 'count',
                        'buyer': 'nunique'
                    }).reset_index()
                    x_title = "–î–∞—Ç–∞ (–¥–Ω–∏)"
                elif grouping_period == '–ù–µ–¥–µ–ª–∏':
                    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º
                    period_entity = entity_data.groupby(entity_data['order_date'].dt.to_period('W')).agg({
                        'amount': 'sum',
                        'id': 'count',
                        'buyer': 'nunique'
                    }).reset_index()
                    period_entity['order_date'] = period_entity['order_date'].dt.start_time
                    x_title = "–î–∞—Ç–∞ (–Ω–µ–¥–µ–ª–∏)"
                else:  # –ú–µ—Å—è—Ü—ã
                    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
                    period_entity = entity_data.groupby(entity_data['order_date'].dt.to_period('M')).agg({
                        'amount': 'sum',
                        'id': 'count',
                        'buyer': 'nunique'
                    }).reset_index()
                    period_entity['order_date'] = period_entity['order_date'].dt.start_time
                    x_title = "–î–∞—Ç–∞ (–º–µ—Å—è—Ü—ã)"
                
                fig_entity_trend = go.Figure()

                fig_entity_trend.add_trace(go.Scatter(
                    x=period_entity['order_date'],
                    y=period_entity['amount'],
                    mode='lines+markers',
                    name='–í—ã—Ä—É—á–∫–∞',
                    line=dict(color='blue', width=2),
                    yaxis='y1'
                ))

                fig_entity_trend.add_trace(go.Bar(
                    x=period_entity['order_date'],
                    y=period_entity['id'],
                    name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
                    marker_color='lightblue',
                    opacity=0.6,
                    yaxis='y2'
                ))

                fig_entity_trend.update_layout(
                    title=f"üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞: {selected_entity} (–ø–æ {grouping_period.lower()})",
                    xaxis_title=x_title,
                    yaxis=dict(title="–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)", side="left"),
                    yaxis2=dict(title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", side="right", overlaying="y"),
                    height=500
                )
                
                st.plotly_chart(fig_entity_trend, width='stretch')
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É
                col_stat1, col_stat2, col_stat3 = st.columns(3)
                
                with col_stat1:
                    st.metric("üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{entity_data['amount'].sum():,.0f} ‚ÇΩ")
                    st.metric("üìä –°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑", f"{entity_data['amount'].mean():,.0f} ‚ÇΩ")
                
                with col_stat2:
                    st.metric("üõí –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", f"{len(entity_data):,}")
                    st.metric("üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", f"{entity_data['buyer'].nunique():,}")
                
                with col_stat3:
                    st.metric("üì¶ –¢–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π", f"{entity_data['product_name'].nunique():,}")
                    st.metric("üó∫Ô∏è –†–µ–≥–∏–æ–Ω–æ–≤", f"{entity_data['region'].nunique():,}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab8:
        st.markdown('<div class="enhanced-card">', unsafe_allow_html=True)
        st.subheader("üéØ –ö—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑")
        
        if not filtered_df.empty:
            fig_specialization, competitive_customers_count, specialization_data = create_cross_analysis(filtered_df)
            st.plotly_chart(fig_specialization, width='stretch')
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("ü§ù –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
                st.info(f"üìä –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏: **{competitive_customers_count}**")
                
                if competitive_customers_count > 0:
                    competition_rate = competitive_customers_count / filtered_df['buyer'].nunique() * 100
                    st.write(f"üìà –î–æ–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: **{competition_rate:.1f}%**")
                    
                    if competition_rate > 20:
                        st.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –º–µ–∂–¥—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
                    else:
                        st.success("‚úÖ –ù–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤")
            
            with col2:
                st.subheader("üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
                
                # –ò–Ω–¥–µ–∫—Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–∞—Å–∫–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω –Ω–∞ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
                specialization_index = specialization_data.max(axis=1).sort_values(ascending=False)
                
                st.write("**üèÜ –¢–æ–ø-5 —Å–∞–º—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö:**")
                for manager, spec_level in specialization_index.head(5).items():
                    main_category = specialization_data.loc[manager].idxmax()
                    st.write(f"‚Ä¢ **{manager[:25]}**: {spec_level:.1f}% –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{main_category}'")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab9:
        st.markdown('<div class="enhanced-card">', unsafe_allow_html=True)
        st.subheader("üìä –°–≤–æ–¥–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç")
        
        if not filtered_df.empty:
            # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º
            summary_report = filtered_df.groupby(['manager', 'head_contractor']).agg({
                'amount': ['sum', 'mean', 'count'],
                'buyer': 'nunique',
                'product_name': 'nunique',
                'order_date': ['min', 'max']
            }).round(2)
            
            summary_report.columns = [
                '–û–±—â–∞—è —Å—É–º–º–∞', '–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
                '–ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π', '–¢–æ–≤–∞—Ä–æ–≤', '–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'
            ]
            summary_report = summary_report.reset_index()
            
            # –§–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç—á–µ—Ç–∞
            report_filter = st.selectbox(
                "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç:",
                ["–í—Å–µ –ø–∞—Ä—ã", "–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (>5 –∑–∞–∫–∞–∑–æ–≤)", "–¢–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã–µ (>100k ‚ÇΩ)", "VIP (>500k ‚ÇΩ)"]
            )
            
            if report_filter == "–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (>5 –∑–∞–∫–∞–∑–æ–≤)":
                display_report = summary_report[summary_report['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'] > 5]
            elif report_filter == "–¢–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã–µ (>100k ‚ÇΩ)":
                display_report = summary_report[summary_report['–û–±—â–∞—è —Å—É–º–º–∞'] > 100000]
            elif report_filter == "VIP (>500k ‚ÇΩ)":
                display_report = summary_report[summary_report['–û–±—â–∞—è —Å—É–º–º–∞'] > 500000]
            else:
                display_report = summary_report
            
            st.dataframe(
                display_report.head(50).style.format({
                    '–û–±—â–∞—è —Å—É–º–º–∞': '{:,.0f} ‚ÇΩ',
                    '–°—Ä–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑': '{:,.0f} ‚ÇΩ'
                }),
                width='stretch'
            )
            
            st.info(f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ {len(display_report)} –ø–∞—Ä –∏–∑ {len(summary_report)} –æ–±—â–∏—Ö")
            
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
            col_exp1, col_exp2, col_exp3 = st.columns(3)
            
            with col_exp1:
                csv_summary = display_report.to_csv(index=False, encoding='utf-8')
                st.download_button(
                    "üì• –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç (CSV)",
                    data=csv_summary,
                    file_name=f"summary_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
            
            with col_exp2:
                csv_buyers = buyer_data.to_csv(index=False, encoding='utf-8')
                st.download_button(
                    "üì• –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º (CSV)",
                    data=csv_buyers,
                    file_name=f"buyers_detail_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
            
            with col_exp3:
                csv_contractors = contractor_data.to_csv(index=False, encoding='utf-8')
                st.download_button(
                    "üì• –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ (CSV)",
                    data=csv_contractors,
                    file_name=f"contractors_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    st.sidebar.markdown("---")
    st.sidebar.markdown("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    
    if not filtered_df.empty:
        total_filtered_revenue = filtered_df['amount'].sum()
        total_revenue = df['amount'].sum()
        filter_coverage = total_filtered_revenue / total_revenue * 100
        
        st.sidebar.metric("üéØ –ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–º", f"{filter_coverage:.1f}%")
        st.sidebar.metric("üìä –ó–∞–ø–∏—Å–µ–π –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ", f"{len(filtered_df):,} –∏–∑ {len(df):,}")
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
        st.sidebar.write("**üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:**")
        if selected_regions:
            st.sidebar.write(f"‚Ä¢ –†–µ–≥–∏–æ–Ω–æ–≤: {len(selected_regions)}")
        if selected_categories:
            st.sidebar.write(f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(selected_categories)}")
        if selected_contractors:
            st.sidebar.write(f"‚Ä¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {len(selected_contractors)}")
        if selected_managers:
            st.sidebar.write(f"‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {len(selected_managers)}")
    
    # –§—É—Ç–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    st.markdown("---")
    st.markdown(f"""
    <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 15px; color: white;">
        <h3>üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –û—Ä–∏–º—ç–∫—Å v2.0</h3>
        <p>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</p>
        <p>üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(filtered_df):,} –∑–∞–ø–∏—Å–µ–π | üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
        <p>üéØ –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–µ: {filtered_df['manager'].nunique()} | üè¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {filtered_df['head_contractor'].nunique()}</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
